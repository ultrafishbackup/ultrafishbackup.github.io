<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022暑期回顾 - Summer Break 2022 Review</title>
    <link href="/2022/07/16/summer-break-2022/"/>
    <url>/2022/07/16/summer-break-2022/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>生活主题：</p><iframe name="ifr" width="100%" src="/content/life.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p><strong>1. 前言</strong></p><p>今年我的暑期从4月30日就开始了，目前已经过了两个半月。在这一段时间中，我更新文章的频率变低了很多，前两个月内我只发布了两篇文章。这是因为在这段时间中发生了很多事，我也做了很多事，可以说是我经历过的最充实，最忙碌，最有意义的一个暑期。因此，我想借此文章记录一下其中三件最有意思的事情。</p><span id="more"></span><hr><h1 id="2-PolyHack2022-Hackathon"><a href="#2-PolyHack2022-Hackathon" class="headerlink" title="2. PolyHack2022 Hackathon"></a>2. PolyHack2022 Hackathon</h1><p><strong>2. PolyHack2022 黑客马拉松比赛</strong></p><p><strong><em>2022.05.21 - 2022.06.05</em></strong></p><p>我记得第一个学期刚开学的时候，<a href="https://guanlin.life">David同学</a>就找过我去参加校外的一个黑客马拉松比赛，但是当时比较忙就没有参加。</p><p>到第二个学期快结束的时候，4月21日，<a href="https://guanlin.life">David同学</a>找到我说可以参加一个<a href="https://www.polyhack.net/">PolyHack2022</a>黑客马拉松比赛，是<a href="https://gdsc.community.dev/the-hong-kong-polytechnic-university/">香港理工大学谷歌开发者学生社团(Google Developer Student Club in The Hong Kong Polytechnic University)</a>组织的第一届黑客马拉松比赛。觉得很有意思，就报名参加了.</p><p>我们选择了有关区块链的一个问题来做项目。</p><p><img src="https://src.ultrafish.cn/storage/polyhack_blockchain.jpg" alt="Blockchain Problem Statement"></p><blockquote><p><strong>问题：</strong><br>Verifying a candidate’s experiences, education, and achievements all relies on a self-created Curriculum Vitae. How might we improve the exchange of CVs from candidates to potential employers?<br>核实候选人的经历、教育和成就都依赖于自己创建的个人简历。我们该如何改善求职者与潜在雇主之间的简历交换? (来自有道翻译)</p></blockquote><p>这次比赛只给了我们组两个星期的时间去开发和准备展示，时间非常紧张。但是在6月3号，最后我们还是把这个项目的原型给做了出来：</p><blockquote><p><a href="https://cvchain.skyproton.org/">CV Chain - A Curriculum Vitae System based on Blockchain Technology (基于区块链的个人简历系统)</a><br>网站：<a href="https://cvchain.skyproton.org/">https://cvchain.skyproton.org/</a><br>详情：<a href="https://github.com/Team-Unhackable/CV-Chain">https://github.com/Team-Unhackable/CV-Chain</a><br>演示：<a href="https://www.bilibili.com/video/BV1J94y1m7rh?share_source=copy_web&amp;vd_source=1ca1728d3795938355ad33c969ee6cb0">bilibili</a><br><img src="https://src.ultrafish.cn/storage/cvchain.png" alt="CV Chain"></p></blockquote><p>我主要负责这个项目的<strong>前端的网页</strong>以及<strong>后端的数据库</strong>开发。<br>前端就是用经典三件套(HTML+CSS+JS)来开发的，后端数据库以及用户登录注册是用<a href="https://www.leancloud.cn/">LeanCloud</a>来开发的。LeanCloud提供了提供了强大的SDK，并且有丰富的API使用。</p><p><img src="https://src.ultrafish.cn/storage/leancloud1.png" alt="LeanCloud"></p><p>最后，很幸运我们<a href="https://unhackable.skyproton.org/">Unhackable</a>小组获得了提名奖(Honorable Mentions)以及500元港币的奖金。</p><p><img src="https://src.ultrafish.cn/storage/PolyHack2022_Honorable_Mentions.jpg" alt="PolyHack2022 Honorable Mentions"></p><hr><h2 id="2-1-PolyHack2022-Reflection"><a href="#2-1-PolyHack2022-Reflection" class="headerlink" title="2.1 PolyHack2022 Reflection"></a>2.1 PolyHack2022 Reflection</h2><p><strong>2.1 反思</strong></p><p>这是我第一次尝试有关区块链的项目，比赛周中也听了很多有关区块链的讲座，了解了区块链的概念及其应用，并且也学习了一些新的技术，相信是一个发展前景很好的技术。</p><p>增加了我对前端三件套(HTML+CSS+JS)的开发经验。</p><p>LeanCloud是在我制作个人博客网站时碰到的，是用作文章评论和浏览数统计的一个Serverless云服务。这次能够把其用户验证和数据库的服务用到我们的项目中也是非常有意思的尝试。</p><p>对于提升团队协作，问题分析，时间管理，展示演讲的能力都有很大的帮助。</p><p>美中不足的就是我们的项目缺少了在商业上的一些分析和规划，导致我们的产品弱于其他组的产品。在以后的项目中，要进一步加强在商业的规划。</p><hr><h1 id="3-Service-learning"><a href="#3-Service-learning" class="headerlink" title="3. Service learning"></a>3. Service learning</h1><p><strong>3. 社会服务学习</strong></p><p><strong><em>2022.05.30-2022.07.03</em></strong></p><blockquote><p><a href="https://www.polyu.edu.hk/osl/index.php?option=com_content&amp;view=article&amp;id=88&amp;Itemid=218"><strong>社会服务学习(Service Learning)</strong> </a>课程是香港理工大学每一位本科生的必修课程，旨在学习如何服务并在服务中学习。</p></blockquote><p>我所选的课程为<strong>促进儿童和青少年发展</strong> (Promotion of Children and Adolescent Development)，服务对象为杭州一所小学的学生，我们小组成员为一班同学进行五天的夏令营，为他们提供多方面的课程。</p><p>我花了很多的时间在课程选题以及准备上。最后在一本名为<a href="https://en.wikipedia.org/wiki/Code:_The_Hidden_Language_of_Computer_Hardware_and_Software"><strong>Code: The Hidden Language of Computer Hardware and Software (编码：隐匿在计算机软硬件背后的语言)</strong></a>的书上找到了灵感。此书第一章就用生动形象的故事介绍了<a href="https://baike.baidu.com/item/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/1527853"><strong>莫尔斯码(Morse Code)</strong></a>，让我印象深刻。</p><p>因此我为孩子们准备了名为 <strong><em>关灯啦！- 初识莫尔斯码 (Lights Out! - The Morse Code)</em></strong> 的课程。希望通过这一节课能过让孩子们了解莫尔斯码的知识，知道如何使用简单的莫尔斯码，了解生活中的莫尔斯码，并希望能够激起他们对于计算机相关知识的兴趣。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/sl_morse_code_1.png" alt="Lights Out! - The Morse Code"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/sl_morse_code_2.png" alt="Lights Out! - The Morse Code"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/sl_morse_code_3.png" alt="Lights Out! - The Morse Code"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/sl_morse_code_4.png" alt="Lights Out! - The Morse Code"></div></div></div><p>在准备课程内容时，我十分担心孩子们是否真的能够理解并使用莫尔斯码，尽管我已经尽可能的用一种简洁明了的方式去引入并一步步深入。</p><p>于是我决定，要多进行几次模拟上课，邀请<strong>有计算机知识背景</strong>和<strong>没有计算机背景</strong>以及<strong>不同年龄段</strong>和<strong>不同学习背景</strong>的人来试听我的课程。</p><p>第一次模拟上课，我邀请了和我<strong>相似年龄段的同学和朋友</strong>来试课。听取了他们有关我课程内容以及结构上的建议和意见。让我觉得课程的方向和难易程度是没有问题的。再次感谢当时抽空来参加我模拟上课的同学和朋友，你们对我的课程的建议有十分大的帮助。</p><p>第二次模拟上课，邀请了真的<strong>正在小学以及初中读书的孩子们</strong>来试课。我主要想看孩子们对于课程内容的反应以及参与程度。出乎意料的是，他们对于莫尔斯码有关内容的接受特别快，参与度很高，有几位孩子已经知道了莫尔斯码的知识。这一次试课让我更加确定了课程的方向和难易程度。非常感谢他们。</p><p>经过两个多星期的准备，我们小组开始了为期一星期的夏令营服务。包括了开幕式，热身活动，闭幕式歌舞彩排，上课，闭幕式等内容。</p><p>2022年7月1日星期五早上八点三十分，我开始了我的莫尔斯码课程，四十分钟后，课程结束。课程效果和我的预期相当，孩子们的参与度十分高，知识学习和应用的也特别快，非常聪明。美中不足的可能是，由于线上上课，我不能看到课中活动进行时孩子们的具体表现，因此小活动的效果差强人意。</p><p><em>（由于隐私原因，不能放与孩子们活动的照片，但是他们真的很活泼很可爱）</em></p><hr><h2 id="3-1-Service-Learning-Reflection"><a href="#3-1-Service-Learning-Reflection" class="headerlink" title="3.1 Service Learning Reflection"></a>3.1 Service Learning Reflection</h2><p><strong>3.1 反思</strong></p><p>这是我第一次真正意义上的教书体验，从前期准备到上课再到分析总结，感觉都是不容易的，但是十分有意义。</p><p>也是第一次结合服务的理论知识去提供服务，是一个学习如何去服务的过程。学到了很多分析的方法和知识。</p><p>也是第一次尝试把有关计算机科学的知识用一种不同的角度去解释，加深了我对专业知识的理解。</p><p>收到评价说我挺适合教小朋友的，或许我会往这方面有更多的尝试。</p><p>积累了更多团队协作，演讲，沟通，时间管理，问题分析方面的经验。</p><p>还需要提高与人沟通的能力。</p><hr><h1 id="4-MIT-Research-Internship"><a href="#4-MIT-Research-Internship" class="headerlink" title="4. MIT Research Internship"></a>4. MIT Research Internship</h1><p><strong>4. 麻省理工研究实习</strong></p><p><strong><em>2022.06.06-2022.07.15</em></strong></p><p>2022年5月15日，我收到来自一位学长的消息，问我有没有报MIT的实习。经过他的讲解，我觉得是一个不错的机会，再加上这个实习是要求线下进行的，虽然当时我还在内地家中，但正好也有近期回港的打算，于是就去报名了。</p><p>5月26日，收到了正式的录取通知，要求6月6日开始实习，我也就准备回港了。</p><p>这是一个研究实习，不同于普通的实习，更多的是去研究一个领域的知识，再进行应用，做出一个项目。</p><p>提供这个实习的是<a href="https://hkinnovationnode.mit.edu/">MIT Hong Kong Innovation Node (麻省理工学院香港创新中心)</a>，是麻省理工学院在香港开设的创新中心。</p><p>实习第一天，认识了很多同专业、不同专业、内地、本地和海外的同学，认识了创新中心的职工。也参观了中心的环境，以及让人惊喜的创客空间，有各式各样的工具，3D打印机等。也参观了<a href="https://www.sick.com/cn/zh/">西克传感器公司(SICK Sensor Intelligence)</a>，看到了顶尖的传感器以及各种有趣的解决方案和应用。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_1.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_2.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_4.jpg" alt="MIT Hong Kong Innovation Node"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_5.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_7.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_6.jpg" alt="MIT Hong Kong Innovation Node"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_8.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_9.jpg" alt="MIT Hong Kong Innovation Node"></div></div></div><p>6个星期里，我们研究了<a href="https://baike.baidu.com/item/UWB">超宽频(Ultra-wideband, UWB)</a>以及<a href="https://baike.baidu.com/item/%E7%89%A9%E8%81%94%E7%BD%91/7306589">物联网(Internet of Things, IoT)</a>，并分析日常生活以及商业和工业中的问题，提出了解决方案，做出了一个项目原型。</p><hr><p><strong>lighTag - An UWB Positioning System Integrated in Lighting System and its Applications</strong><br>(一种与照明系统集成的超宽频定位系统及其应用)<br><img src="https://src.ultrafish.cn/storage/lighTag_Logo_2.png" alt="lighTag"></p><p><strong>现有问题：</strong></p><ol><li>用户难以在复杂的多层建筑中定位自己以及寻找目标；</li><li>在新型冠状病毒肺炎疫情下，不能精确地以及在特定范围内记录到访行程；</li><li>室内的照明系统不能基于区域内人数调节灯光开关以及亮度，现有人体传感器多数只能感应运动而非人本身。</li></ol><p><strong>lighTag特点：</strong></p><ol><li>解决基站设备供电问题。与照明系统集成，电源得以保证；</li><li>实现室内三维定位。基于用户移动手机内的UWB芯片或者lighTag提供的内置UWB芯片的标签，实现对用户的定位，包括高度消息，即楼层；</li><li>高精度定位。5cm测距精度，10cm二维定位精度，20cm三位定位精度；</li><li>AOI(Area of Interest)检测。检测规定区域内的用户到访与离开，可用于疫情下指定区域的到访记录。</li></ol><p><strong>lighTag原型：</strong></p><p><img src="https://src.ultrafish.cn/storage/lighTag_Product.png" alt="lighTag原型"></p><p>更多有关<strong>项目实现内容</strong>，<strong>实际应用</strong>，<strong>项目代码</strong>等，请访问<a href="https://github.com/lighTag-UWB">https://github.com/lighTag-UWB</a></p><hr><p>在实习的最后一天，我们小组进行了项目展示汇报，与老师同学进行了交流与分享，听取了大家的评价。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_15.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_11.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_13.jpg" alt="MIT Hong Kong Innovation Node"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_14.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_16.jpg" alt="MIT Hong Kong Innovation Node"></div><div class="group-image-wrap"><img src="https://src.ultrafish.cn/storage/mit_node_12.jpg" alt="MIT Hong Kong Innovation Node"></div></div></div><hr><h2 id="4-1-MIT-Research-Internship-Reflection"><a href="#4-1-MIT-Research-Internship-Reflection" class="headerlink" title="4.1 MIT Research Internship Reflection"></a>4.1 MIT Research Internship Reflection</h2><p><strong>4.1 反思</strong></p><p>学习了UWB的概念和原理及其与物联网的结合。</p><p>学习了TWR(Two Way Ranging)测距算法，以用UWB获取标签与基站的距离。</p><p>学习了串口、WI-FI通信，以及TCP/IP。</p><p>学习了三边定位(Trilateration)和多边定位(Multilateration)算法，及其优化。</p><p>加强了Python编程能力，增加了OOP的编程经验。</p><p>增加了三维建模以及3D打印的经验。</p><p>增加了计划，时间管理，团队合作，任务分析，演讲，人际关系方面的经验。</p><p>需要加强硬件、电子电路相关知识的学习，加强编程熟练程度，加强任务分析、分配的能力等。</p><hr><h1 id="5-Outro"><a href="#5-Outro" class="headerlink" title="5. Outro"></a>5. Outro</h1><p><strong>5. 尾巴</strong></p><p>这两个半月中，有多项任务同时进行，确实是对心理和生理的多重考验。但是确实收获很多，是一个十分充实的暑期。接下来我会把更对的时间放在自学上，应该会进行高频率的文章更新，也请大家监督。</p><p>最后，我还记得<a href="https://ultrafish.cn/2021/12/31/2021-review/">去年末进行了2021年的总结</a>，并且定下了<a href="https://ultrafish.cn/2021/12/31/2021-review/#2022-Preview">2022年的目标</a>。现在半年已过，看看目前完成的怎么样了：</p><p><strong>2022年目标</strong>：</p><ul><li>            <input type="checkbox" disabled checked="checked"><strong>保持长期健康及规律的饮食和睡眠</strong>。长期健康及规律的饮食和睡眠，辅以合适的运动与休息，是一切活动的基频(Fundamental Frequency)。          </li><li>            <input type="checkbox" disabled checked="checked"><strong>保持日程规划与反思</strong>。          </li><li>            <input type="checkbox" disabled checked="checked"><strong>保持高质量的学习</strong>。以原则为根本，以效率为基础，以质量为目标。          </li><li>            <input type="checkbox" disabled><strong>多阅读专业课程相关书籍，学习相关项目</strong>。学习，研究，并总结为博客文章。          </li><li>            <input type="checkbox" disabled><strong>提高博客更新频率</strong>。2022年至少更新30篇文章，多个开发性页面，继续维护网站。。          </li><li>            <input type="checkbox" disabled checked="checked"><strong>参加一项课外活动</strong>。          </li><li>            <input type="checkbox" disabled checked="checked"><strong>拿到奖学金</strong>。          </li><li>            <input type="checkbox" disabled><strong>免隔离回到内地</strong>。希望香港与内地尽快通关，回家不用隔离。(😭😭😭)          </li><li>            <input type="checkbox" disabled><strong>进行年末总结并展望2023年</strong>。          </li></ul><hr><p><strong><em>无限进步</em></strong></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2022暑期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Queue Introduction - 队列简介</title>
    <link href="/2022/06/24/queue-introduction/"/>
    <url>/2022/06/24/queue-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction-to-Queue"><a href="#1-Introduction-to-Queue" class="headerlink" title="1 Introduction to Queue"></a>1 Introduction to Queue</h1><blockquote><p><strong>Queue (队列)</strong> is another fundamental data structure, which is similar to the <a href="https://ultrafish.cn/2022/05/18/stack-introduction/">Stack</a></p></blockquote><p>A queue is a collection of objects that are inserted and removed according to the <strong>first-in, first-out (FIFO)</strong> principle, while Stack is LIFO.</p><span id="more"></span><p><strong>[Example]</strong><br>Like the queue in the real life:<br>the first person got in the queue will first get the ticket and leave the queue, while the last person in the queue will be the last one get the ticket.</p><p><img src="https://src.ultrafish.cn/storage/queue-in-tickets.png" alt="queue"><br><em>Image: Goodrich, M., Tamassia, R., &amp; O’reilly, A. (2014). Data Structures and Algorithms in Java, 6th Edition. John Wiley &amp; Sons.</em></p><hr><h1 id="2-Queue-Abstract-Data-Type"><a href="#2-Queue-Abstract-Data-Type" class="headerlink" title="2 Queue Abstract Data Type"></a>2 Queue Abstract Data Type</h1><p><a href="https://ultrafish.cn/2022/05/18/stack-introduction/#2-Stack-Abstract-Data-Type">See what is the Abstract Data Type</a></p><p><code>enqueue(e)</code>: Add an element <code>e</code> to the back of the queue;<br><code>dequeue()</code>: Remove and return the first element of the queue, or <code>null</code> if the queue is empty;</p><p><code>first()</code>: Return but <strong>NOT</strong> remove the first element of the queue, or <code>null</code> if the queue is empty;<br><code>size()</code>: Return the number of elements in the queue;<br><code>isEmpty()</code>: Return a boolean value indicating whether the queue is empty.</p><p>Define the Queue interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E e)</span>;<br>    E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span>;<br>    E <span class="hljs-title function_">first</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="3-java-util-Queue-Interface"><a href="#3-java-util-Queue-Interface" class="headerlink" title="3 java.util.Queue Interface"></a>3 java.util.Queue Interface</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Queue.html">Queue - Java SE 17</a></p><div class="table-container"><table><thead><tr><th style="text-align:center">Queue ADT</th><th style="text-align:center"><code>java.util.Queue</code> throws exceptions</th><th style="text-align:center"><code>java.util.Queue</code> returns special value</th></tr></thead><tbody><tr><td style="text-align:center"><code>enqueue(E e)</code></td><td style="text-align:center"><code>add(E e)</code></td><td style="text-align:center"><code>offer(E e)</code></td></tr><tr><td style="text-align:center"><code>dequeue()</code></td><td style="text-align:center"><code>remove(E e)</code></td><td style="text-align:center"><code>poll()</code></td></tr><tr><td style="text-align:center"><code>first()</code></td><td style="text-align:center"><code>element()</code></td><td style="text-align:center"><code>peek()</code></td></tr><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center"><code>size()</code></td><td style="text-align:center"><code>size()</code></td></tr><tr><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center"><code>isEmpty()</code></td></tr></tbody></table></div><hr><h1 id="4-Queue-ADT-Implementations"><a href="#4-Queue-ADT-Implementations" class="headerlink" title="4 Queue ADT Implementations"></a>4 Queue ADT Implementations</h1><h2 id="4-1-Implement-Queue-Using-Array"><a href="#4-1-Implement-Queue-Using-Array" class="headerlink" title="4.1 Implement Queue Using Array"></a>4.1 Implement Queue Using Array</h2><ul><li>Using an array <code>data</code> to store the elements in the stack, with fixed size of the array, $N$.</li><li>Using the array <strong>circularly</strong> by indicating 2 variables:<ul><li><code>f</code>: indicate the index of the first element of Queue in the array, <code>(f + 1) % data.length;</code> indicates the new front of the Queue in the array when calling <code>dequeue()</code>;</li><li><code>size</code>: indicate the number of elements in the Queue, using <code>(f + sz) % data.length</code> to indicate the index of the tail of the Queue in the array when calling <code>enqueue(E e)</code>.</li></ul></li></ul><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// implements the above Queue Interface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123; <br><br>    <span class="hljs-keyword">private</span> E[] data; <span class="hljs-comment">// Using array to store elements in the Queue</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// Default capacity 100</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// indicate the index of the first element of Queue in the array</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// indicate the number of elements in the Queue</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> inSize)</span> &#123;<br>        data = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[inSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// return the size of the Queue</span><br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// check whether the Queue si empty or not</span><br>        <span class="hljs-keyword">return</span> (size == <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> IllegalStateException&#123; <span class="hljs-comment">// Add an element to the back of the queue</span><br>        <span class="hljs-keyword">if</span> (size == data.length) &#123; <span class="hljs-comment">// check whether the queue is full</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;The queue is full!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> (f + size) % data.length; <span class="hljs-comment">// get the position of the tail</span><br>            data[pos] = e;<br>            size ++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// Remove and return the first element of the queue</span><br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123; <span class="hljs-comment">// Check whether the queue is empty or not</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> data[f];<br>            data[f] = <span class="hljs-literal">null</span>;<br>            f = (f + <span class="hljs-number">1</span>) % data.length; <span class="hljs-comment">// let the front point to the next position</span><br>            size --;<br>            <span class="hljs-keyword">return</span> out;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// return the front element of the queue</span><br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> data[f];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;front -&gt; &quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ind</span> <span class="hljs-operator">=</span> (i+f)% data.length;<br>            outString = outString + data[ind] + <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        outString = outString + <span class="hljs-string">&quot;&lt;- tail&quot;</span>;<br>        <span class="hljs-keyword">return</span> outString;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span> &#123;<br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayQueue</span>&lt;Integer&gt;();<br>    System.out.println(queue.isEmpty()); <span class="hljs-comment">// true</span><br>    queue.enqueue(<span class="hljs-number">1</span>);<br>    queue.enqueue(<span class="hljs-number">2</span>);<br>    queue.enqueue(<span class="hljs-number">3</span>);<br>    System.out.println(queue.size()); <span class="hljs-comment">// 3</span><br>    System.out.println(queue.toString()); <span class="hljs-comment">// 1 2 3</span><br>    System.out.println(queue.first()); <span class="hljs-comment">// 1</span><br>    System.out.println(queue.dequeue()); <span class="hljs-comment">// 1</span><br>    System.out.println(queue.first()); <span class="hljs-comment">// 2</span><br>    queue.enqueue(<span class="hljs-number">4</span>);<br>    System.out.println(queue.toString()); <span class="hljs-comment">// 2 3 4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-number">3</span><br>front -&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> &lt;- tail<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>front -&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> &lt;- tail<br></code></pre></td></tr></table></figure><hr><p><strong>Advantages</strong> of using an array to implement the Queue:</p><ul><li><p>Simple and efficient;</p><ul><li><p>Each method just includes some <a href="https://ultrafish.cn/2022/05/13/algorithm-analysis-introduction/#2-Analysis-on-High-level-Description-of-Algorithm">primitive operations</a>, which is easy to understand and implement.</p></li><li><p><strong>Running time of each method:</strong></p></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Method</th><th style="text-align:center">Running time</th></tr></thead><tbody><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>enqueue(e)</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>dequeue()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>first()</code></td><td style="text-align:center">$O(1)$</td></tr></tbody></table></div><ul><li>Therefore, using Array to implement the Queue is efficient, for each method runs in constant time, $O(1)$ time.</li></ul><hr><p><strong>Drawbacks</strong> of using an array to implement the Queue:</p><ul><li>It is based on a fixed size of the array, $N$, which means the size of the Queue is fixed, limited and unchangeable, while the the actual size of the Queue is dynamic.<ul><li>If we needs much less space than the reserved size, memory is wasted.</li><li>If we try to enqueue an element into the Queue when the array storage is full, the program will throw an exception, and we cannot enqueue any more elements into the Queue.</li></ul></li></ul><p>To solve the above problem, we can use a <strong>LinkedList</strong> to implement the Queue.</p><hr><h2 id="4-2-Implement-Queue-Using-LinkedList"><a href="#4-2-Implement-Queue-Using-LinkedList" class="headerlink" title="4.2 Implement Queue Using LinkedList"></a>4.2 Implement Queue Using LinkedList</h2><ul><li>Using a <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-Singly-Linked-List">singly linked list</a> to store the elements in the queue;</li><li>The memory usage is always associated with the actual number of elements in the Queue, without a capacity limitation;</li><li>According to the queue ADT, we can adapt our <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-3-Implementation-of-the-Singly-Linked-List-Class">SinglyLinkedList class</a> to define a new LinkedQueue class:</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Methods in Queue</th><th style="text-align:center">Method in <code>SingleLinkedList</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center"><code>getSize()</code></td></tr><tr><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center"><code>isEmpty()</code></td></tr><tr><td style="text-align:center"><code>enqueue(e)</code></td><td style="text-align:center"><code>addAtTail(e)</code></td></tr><tr><td style="text-align:center"><code>dequeue()</code></td><td style="text-align:center"><code>deleteAtHead()</code></td></tr><tr><td style="text-align:center"><code>first()</code></td><td style="text-align:center"><code>getHead()</code></td></tr></tbody></table></div><p>Java implementation:</p><p>(Import the <code>SingleLinkedList</code> class from the post-<a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-3-Implementation-of-the-Singly-Linked-List-Class">Linked List Introduction - 链表简介</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedQueue</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> SinglyLinkedList&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SinglyLinkedList</span>&lt;E&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedQueue</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getSize();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.isEmpty();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E element)</span> &#123;<br>        list.addAtTail(element);<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.deleteAtHead();<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getHead();<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;first -&gt;&quot;</span>+list.toString()+<span class="hljs-string">&quot;&lt;- tail&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span> &#123;<br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedQueue</span>&lt;&gt;();<br>    System.out.println(queue.isEmpty()); <span class="hljs-comment">// true</span><br>    queue.enqueue(<span class="hljs-number">1</span>);<br>    queue.enqueue(<span class="hljs-number">2</span>);<br>    queue.enqueue(<span class="hljs-number">3</span>);<br>    System.out.println(queue.size()); <span class="hljs-comment">// 3</span><br>    System.out.println(queue.toString()); <span class="hljs-comment">// 1 2 3</span><br>    System.out.println(queue.first()); <span class="hljs-comment">// 1</span><br>    System.out.println(queue.dequeue()); <span class="hljs-comment">// 1</span><br>    System.out.println(queue.first()); <span class="hljs-comment">// 2</span><br>    queue.enqueue(<span class="hljs-number">4</span>);<br>    System.out.println(queue.toString()); <span class="hljs-comment">// 2 3 4</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-number">3</span><br>first -&gt;<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> &lt;- tail<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>first -&gt;<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> &lt;- tail<br></code></pre></td></tr></table></figure><hr><h1 id="5-Circular-Queue"><a href="#5-Circular-Queue" class="headerlink" title="5 Circular Queue"></a>5 Circular Queue</h1><p>We have discussed <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#3-Circularly-Linked-List">Circularly Linked List</a> in the post - <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/">Linked List Introduction - 链表简介</a>.</p><p>Similarly, there is <code>CircularQueue</code> interface extends from <code>Queue</code> with a useful <code>rotate()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CircularQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CircularQueue</code> can be implemented by using <code>CircularlyLinkedList</code> to generate the <code>LinkedCircularQueue</code>:</p><p>(Import the <code>CircularlyLinkedList</code> class from the post-<a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-3-Implementation-of-the-Singly-Linked-List-Class">Linked List Introduction - 链表简介</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedCircularQueue</span> &lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CircularQueue</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> CircularlyLinkedList&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircularlyLinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedCircularQueue</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getSize();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.isEmpty();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E element)</span> &#123;<br>        list.addAtTail(element);<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.deleteAtHead();<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getHeadData();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">()</span> &#123;<br>        list.rotate();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;first -&gt;&quot;</span>+list.toString()+<span class="hljs-string">&quot;&lt;- tail&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="5-1-Circular-Queue-Application-Josephus-Problem"><a href="#5-1-Circular-Queue-Application-Josephus-Problem" class="headerlink" title="5.1 Circular Queue Application - Josephus Problem"></a>5.1 Circular Queue Application - Josephus Problem</h2><p>I have studied and discussed Josephus Problem in the post - <a href="https://ultrafish.cn/2020/08/05/josephus-problem/">Python对约瑟夫问题(Josephus Problem)的高效解决方法</a> with Python implementation.</p><p>Now, it is also easy and efficient to solve this problem with Circular Queue because the basic of Josephus Problem is <strong>rotate</strong> and <strong>dequeue</strong>, which can be easily implemented by Circular Queue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Josephus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; E <span class="hljs-title function_">Josephus</span><span class="hljs-params">(CircularQueue&lt;E&gt; queue, <span class="hljs-type">int</span> m)</span> &#123;<br>        <span class="hljs-keyword">if</span> (queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (queue.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; m-<span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-comment">// Rotate the queue to pass to the next person</span><br>                queue.rotate(); <br>            &#125;<br>            <span class="hljs-comment">// Remove the target one</span><br>            <span class="hljs-type">E</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> queue.dequeue();<br>            System.out.println(out+<span class="hljs-string">&quot; OUT&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// The last one is the winner</span><br>        <span class="hljs-keyword">return</span> queue.dequeue();<br>    &#125;<br><br>    <span class="hljs-comment">// Build CircularQueue from Array</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; CircularQueue&lt;E&gt; <span class="hljs-title function_">buildCircularQueue</span><span class="hljs-params">(E inList[])</span> &#123;<br>        CircularQueue&lt;E&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedCircularQueue</span>&lt;&gt;( );<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;inList.length;j++) &#123;<br>            queue.enqueue(inList[j]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span> &#123;<br>    String[] players = &#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Cindy&quot;</span>, <span class="hljs-string">&quot;Doug&quot;</span>, <span class="hljs-string">&quot;Ed&quot;</span>, <span class="hljs-string">&quot;Fred&quot;</span>&#125;;<br>    System.out.println(Josephus(buildCircularQueue(players),<span class="hljs-number">2</span>)+<span class="hljs-string">&quot; WIN&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Bob OUT<br>Doug OUT<br>Fred OUT<br>Cindy OUT<br>Alice OUT<br>Ed WIN<br></code></pre></td></tr></table></figure><p>The result is correct and can be verified by the <a href="https://plus.ultrafish.cn/Josephus-Problem">UltraFish Plus - Python对约瑟夫问题的高效解决方法 Josephus Problem with Python</a></p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Goodrich, M., Tamassia, R., &amp; O’reilly, A. (2014). <em>Data Structures and Algorithms in Java, 6th Edition.</em> John Wiley &amp; Sons.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Queue 相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Data Structure</category>
      
      <category>Queue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sorting Algorithm Introduction - 排序算法简介</title>
    <link href="/2022/05/25/sorting-algorithm-introduction/"/>
    <url>/2022/05/25/sorting-algorithm-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction-to-Sorting-Algorithm"><a href="#1-Introduction-to-Sorting-Algorithm" class="headerlink" title="1 Introduction to Sorting Algorithm"></a>1 Introduction to Sorting Algorithm</h1><blockquote><p>Sorting is a process of arranging a sequence of elements into some logical order (e.g. increasing or decreasing order).</p></blockquote><span id="more"></span><p>Nowadays, most of programming languages and computer systems have implementations of sorting algorithms.</p><p>But, it is still very important to know and study how to implement sorting algorithms as</p><ol><li>Sorting algorithm can be used to solve other problems in a similar way;</li><li>Sorting algorithm can be the first step of solving other problems;</li><li>Sorting algorithm analysis is a good practice of algorithm performance analysis.</li></ol><p>Let’s introduce some popular sorting algorithms: Bubble Sort, Selection Sort, Insertion Sort, Merge Sort, Quick Sort, Counting Sort, Heap Sort, etc.</p><p>(Assume all resulting arrays are sorted in ascending order.)</p><hr><h1 id="2-Bubble-Sort"><a href="#2-Bubble-Sort" class="headerlink" title="2 Bubble Sort"></a>2 Bubble Sort</h1><p><strong>冒泡排序</strong></p><p><strong>Algorithm</strong>:</p><ol><li>Starting from the first element, compare the first adjacent elements of the array, if the first element is larger than the second element, swap the two elements;</li><li>Repeat doing step 1 for each pair of adjacent elements from the first element to the last element, end up with the biggest element in the last position.</li><li>Repeat doing above steps for all element except the last element;</li><li>Each time, the relatively biggest element will be moved towards the end of the array, the array is sorted when no swap is made.</li></ol><p><strong>Illustration</strong>:</p><p><img src="https://src.ultrafish.cn/storage/bubble-sort.gif" alt="Bubble Sort Illustration"><br><em>Source: <a href="https://visualgo.net/en">VisuAlgo</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (inArr[j] &gt; inArr[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> inArr[j];<br>                inArr[j] = inArr[j + <span class="hljs-number">1</span>];<br>                inArr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">14</span>&#125;;<br>        bubbleSort(arr);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">14</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n^2)$<br>Worst time complexity: $O(n^2)$</p><hr><h1 id="3-Selection-Sort"><a href="#3-Selection-Sort" class="headerlink" title="3 Selection Sort"></a>3 Selection Sort</h1><p><strong>选择排序</strong></p><ol><li>Starting from the first element, find the smallest element in the array, swap it with the first element;</li><li>Then find the next smallest element in the array, swap it with the second element;</li><li>Repeat in the above way until the array is sorted.<blockquote><p>Each time we select the smallest element in remaining unsorted array, and move it to the beginning of the unsorted part of array (or end of sorted part).</p></blockquote></li></ol><p><strong>Illustration</strong>:<br><img src="https://src.ultrafish.cn/storage/selection-sort.gif" alt="Selection Sort Illustration"><br><em>Source: <a href="https://visualgo.net/en">VisuAlgo</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minEle</span> <span class="hljs-operator">=</span> i; <span class="hljs-comment">// Default smallest element is the first element</span><br>        <span class="hljs-comment">// Find the smallest element iteratively</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123; <br>            <span class="hljs-keyword">if</span> (inArr[j] &lt; inArr[minEle]) &#123;<br>                minEle = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// Swap the smallest element with the front element</span><br>        <span class="hljs-keyword">if</span> (minEle != i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> inArr[i];<br>            inArr[i] = inArr[minEle];<br>            inArr[minEle] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">14</span>&#125;;<br>    selectionSort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">14</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n^2)$<br>Worst time complexity: $O(n^2)$</p><hr><h1 id="4-Insertion-Sort"><a href="#4-Insertion-Sort" class="headerlink" title="4 Insertion Sort"></a>4 Insertion Sort</h1><p><strong>插入排序</strong></p><p><strong>Algorithm</strong>:</p><ol><li>Assume the first element is already sorted, start from the second element;</li><li>Scan the sorted elements($S$) before the current element($C$) (left in illustration) from the end to the beginning;</li><li>If the element $C$ is smaller than the element $S$, move the scanner to next position;</li><li>Repeat step 3 until the element $C$ is larger than or equal to the element $S$, then insert the element $C$ into the position.</li><li>Repeat step 2-4 until all elements are sorted.</li></ol><p><strong>Illustration</strong>:<br><img src="https://src.ultrafish.cn/storage/insertion-sort.gif" alt="Insertion Sort Illustration"><br><em>Source: <a href="https://visualgo.net/en">VisuAlgo</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> inArr[i]; <span class="hljs-comment">// The element to be inserted (C)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; <span class="hljs-comment">// The element to be compared in the sorted part (S)</span><br>        <span class="hljs-comment">// Find the position to insert the element (C)</span><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; inArr[j] &gt; key) &#123;<br>            inArr[j + <span class="hljs-number">1</span>] = inArr[j];<br>            j--;<br>        &#125;<br>        inArr[j + <span class="hljs-number">1</span>] = key; <span class="hljs-comment">// Insert the element (C)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">14</span>&#125;;<br>    insertionSort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">14</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n^2)$<br>Worst time complexity: $O(n^2)$</p><hr><h1 id="5-Merge-Sort"><a href="#5-Merge-Sort" class="headerlink" title="5 Merge Sort"></a>5 Merge Sort</h1><p><strong>并归排序</strong></p><p><strong>Algorithm</strong>:<br>A classic application of <strong>Divide and Conquer(分治法)</strong> algorithm.</p><ol><li>Divide the array into two halves;</li><li>Recursively sort the two halves;</li><li>Merge the two sorted halves into one sorted array.</li></ol><p><strong>Illustration</strong>:<br><img src="https://src.ultrafish.cn/storage/merge-sort.gif" alt="Merge Sort Illustration"><br><em>Source: <a href="https://visualgo.net/en">VisuAlgo</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] mergeSort(<span class="hljs-type">int</span>[] inArr) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> inArr;<br>    &#125;<br>    <span class="hljs-comment">// Step 1: Divide the array into two halves</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span>[] left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[mid];<br>    <span class="hljs-type">int</span>[] right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n - mid];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mid; i++) &#123;<br>        left[i] = inArr[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mid; i &lt; n; i++) &#123;<br>        right[i - mid] = inArr[i];<br>    &#125;<br>    <span class="hljs-comment">// Step 2: Recursively sort the two halves</span><br>    <span class="hljs-type">int</span>[] sortedLeft = mergeSort(left);<br>    <span class="hljs-type">int</span>[] sortedRight = mergeSort(right);<br>    <span class="hljs-keyword">return</span> merge(sortedLeft, sortedRight);<br>&#125;<br><br><span class="hljs-comment">// Step 3: Merge two sorted arrays into one sorted array</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] merge(<span class="hljs-type">int</span>[] left, <span class="hljs-type">int</span>[] right) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[left.length + right.length];<br>    <span class="hljs-keyword">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;<br>        <span class="hljs-keyword">if</span> (left[i] &lt; right[j]) &#123;<br>            arr[k++] = left[i++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arr[k++] = right[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; left.length) &#123;<br>        arr[k++] = left[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt; right.length) &#123;<br>        arr[k++] = right[j++];<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-type">int</span>[] sortedArr = mergeSort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sortedArr.length; i++) &#123;<br>        System.out.print(sortedArr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">14</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n log(n))$<br>Worst time complexity: $O(n log(n))$</p><hr><h1 id="6-Quick-Sort"><a href="#6-Quick-Sort" class="headerlink" title="6 Quick Sort"></a>6 Quick Sort</h1><p><strong>快速排序</strong></p><p><strong>Algorithm</strong>:<br>A classic application of <strong>Divide and Conquer(分治法)</strong> algorithm.</p><ol><li>Choose a pivot element (start from the first element);</li><li>Compare the pivot element with the rest of the elements;</li><li>Find all elements that are smaller than the pivot element, rearrange them in the left part of the array;</li><li>Find all elements that are larger than the pivot element, rearrange them in the right part of the array;</li><li>Now, the pivot element is in the correct position;</li><li>Repeat step 2-5 for the left and right parts of the array recursively.</li></ol><p><strong>Illustration</strong>:<br><img src="https://src.ultrafish.cn/storage/quick-sort2.gif" alt="Quick Sort Illustration"><br><em>Source: <a href="https://algorithm-visualizer.org/divide-and-conquer/quicksort">Quicksort - Algorithm Visualizer</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    quickSort(inArr, <span class="hljs-number">0</span>, inArr.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> partition(inArr, low, high);<br>        quickSort(inArr, low, pivot - <span class="hljs-number">1</span>);<br>        quickSort(inArr, pivot + <span class="hljs-number">1</span>, high);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> inArr[low];<br>    <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; inArr[high] &gt;= pivot) &#123;<br>            high--;<br>        &#125;<br>        inArr[low] = inArr[high];<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; inArr[low] &lt;= pivot) &#123;<br>            low++;<br>        &#125;<br>        inArr[high] = inArr[low];<br>    &#125;<br>    inArr[low] = pivot;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">34</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">9</span>&#125;;<br>    quickSort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">30</span> <span class="hljs-number">34</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n log(n))$<br>Worst time complexity: $O(n^2)$</p><hr><h1 id="7-Counting-Sort"><a href="#7-Counting-Sort" class="headerlink" title="7 Counting Sort"></a>7 Counting Sort</h1><p><strong>计数排序</strong></p><p><em>Very interesting sorting algorithm. More details will be discussed in later articles.</em></p><p><strong>Algorithm</strong>:</p><ol><li>Find the maximum element in the array (as value $M$);</li><li>Build a count array with size $M + 1$ (as array $C$);</li><li>Count the number of each element in unsorted array (as element $i$ appears $n$ times), store <code>C[i] = n</code>;</li><li>Accumulate each element in count array with the previous one (as element $i$ should appears in position of $(C[i - 1] + C[i])$) to get the final position of each element;</li><li>Put all elements back to the array in the correct position (the position of element $i$ is $(C[i - 1] + C[i])$);</li></ol><p><strong>Illustration</strong>:<br><img src="https://src.ultrafish.cn/storage/counting-sort2.gif" alt="Counting Sort Illustration*"><br><em>Source: <a href="https://visualgo.net/en">VisuAlgo</a></em></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> inArr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (inArr[i] &gt; max) &#123;<br>            max = inArr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span>[] countArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        countArr[inArr[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; countArr.length; i++) &#123;<br>        countArr[i] += countArr[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-type">int</span>[] sortedArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        sortedArr[countArr[inArr[i]] - <span class="hljs-number">1</span>] = inArr[i];<br>        countArr[inArr[i]]--;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        inArr[i] = sortedArr[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;;<br>    countingSort(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n+k)$<br>Worst time complexity: $O(n+k)$</p><hr><h1 id="8-Heap-Sort"><a href="#8-Heap-Sort" class="headerlink" title="8 Heap Sort"></a>8 Heap Sort</h1><p><strong>堆排序</strong></p><p><strong>Algorithm</strong>:<br>Very similar to selection sort, but instead of using linear scan to find the maximum element, we use heap data structure to find the maximum element.</p><blockquote><p>Heap:<br>A binary tree whose root is the largest element in the tree, and the value of each vertex (except the root) is greater than the value of its child vertices.</p></blockquote><p><strong>Illustration</strong>:</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/HeapSort.html">Heap Sort - Algorithm Visualizations</a></p><p><strong>Java implementation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        heapify(inArr, n, i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> inArr[<span class="hljs-number">0</span>];<br>        inArr[<span class="hljs-number">0</span>] = inArr[i];<br>        inArr[i] = temp;<br>        heapify(inArr, i, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">largest</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (l &lt; n &amp;&amp; inArr[l] &gt; inArr[largest]) &#123;<br>        largest = l;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &lt; n &amp;&amp; inArr[r] &gt; inArr[largest]) &#123;<br>        largest = r;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (largest != i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> inArr[i];<br>        inArr[i] = inArr[largest];<br>        inArr[largest] = temp;<br>        heapify(inArr, n, largest);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Test</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>, <span class="hljs-number">37</span>, <span class="hljs-number">14</span>&#125;;<br>    heapSort(a);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        System.out.print(a[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">14</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">29</span> <span class="hljs-number">37</span> <br></code></pre></td></tr></table></figure><p>Average time complexity: $O(n log(n))$<br>Worst time complexity: $O(n log(n))$</p><hr><h1 id="9-Summary"><a href="#9-Summary" class="headerlink" title="9 Summary"></a>9 Summary</h1><div class="table-container"><table><thead><tr><th style="text-align:center">Sort Algorithm</th><th style="text-align:center">Average Time Complexity</th><th style="text-align:center">Worst Time Complexity</th></tr></thead><tbody><tr><td style="text-align:center">Bubble Sort</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td></tr><tr><td style="text-align:center">Selection Sort</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td></tr><tr><td style="text-align:center">Insertion Sort</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td></tr><tr><td style="text-align:center">Merge Sort</td><td style="text-align:center">$O(n log(n))$</td><td style="text-align:center">$O(n log(n))$</td></tr><tr><td style="text-align:center">Quick Sort</td><td style="text-align:center">$O(n log(n))$</td><td style="text-align:center">$O(n^2)$</td></tr><tr><td style="text-align:center">Counting Sort</td><td style="text-align:center">$O(n+k)$</td><td style="text-align:center">$O(n+k)$</td></tr><tr><td style="text-align:center">Heap Sort</td><td style="text-align:center">$O(n log(n))$</td><td style="text-align:center">$O(n log(n))$</td></tr></tbody></table></div><p>Source: <a href="https://www.bigocheatsheet.com/">Big-O Cheat Sheet</a></p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://algorithm-visualizer.org/">Algorithm Visualizer</a><br><a href="https://www.bigocheatsheet.com/">Big-O Cheat Sheet</a><br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.<br>R. Sedgewick and K. Wayne, <em>Algorithms</em>. Upper Saddle River, Nj: Addison-Wesley, 2011.<br><a href="https://mp.weixin.qq.com/s/ekGdneZrMa23ALxt5mvKpQ">十大经典排序算法大梳理 (动图+代码)</a><br><a href="https://visualgo.net/en">visualising data structures and algorithms through animation - VisuAlgo</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>还有很多有趣的排序算法，如Bucket Sort, Radix Sort, Shell Sort，会继续学习，继续更新。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
      <tag>Sorting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack Introduction - 栈简介</title>
    <link href="/2022/05/18/stack-introduction/"/>
    <url>/2022/05/18/stack-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction-to-Stack"><a href="#1-Introduction-to-Stack" class="headerlink" title="1 Introduction to Stack"></a>1 Introduction to Stack</h1><blockquote><p><strong>Stack (栈)</strong> is the <strong>simplest</strong> and very <strong>important</strong> data structure.</p></blockquote><p>A stack is a collection of objects that are inserted and removed according to the <strong>last-in, first-out (LIFO)</strong> principle.</p><p>The fundamental operations of a stack are <strong><em>push</em></strong> and <strong><em>pop</em></strong>.</p><span id="more"></span><p><strong>[Example]</strong><br>Like the coin collector in real life:<br>You are always able to take out the top coin which is the one most recently inserted, and the first coin you put in will be the last one you take out.</p><p><img src="https://src.ultrafish.cn/storage/coin-storage.jpeg" alt="coin collector"></p><hr><h1 id="2-Stack-Abstract-Data-Type"><a href="#2-Stack-Abstract-Data-Type" class="headerlink" title="2 Stack Abstract Data Type"></a>2 Stack Abstract Data Type</h1><blockquote><p>First thing first, what is the <strong><em>Abstract Data Type</em></strong>?</p><ul><li>Abstract Data Type (ADT) is an concept based on <a href="https://ultrafish.cn/categories/Programming/Java/OOP/">abstraction of OOP</a>, where abstraction describes a system in a very general way, including naming and explaining their functionality.<br>Therefore, ADT is a model of a data structure specifying the type of data stored, the operations performed on them, and the types of parameters of the operations.<br>ADT is treated as an <a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">interface in Java</a>, just including method declarations and their parameters, but leaving the method bodies empty, which mean the ADT only know what each operation does, but does not know how it does.<br>To realize an ADT, we need some concrete date structure to specify how operations work. In Java, this process is realized by <a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/#Interface">a class to implement an interface</a>.</li></ul></blockquote><p>Stack Abstract Data Type specifies the following operations (with examples in coin collector):</p><ul><li><code>push(e)</code>: Add (push) an element <code>e</code> to the top of the stack (store a new coin);</li><li><code>pop()</code>: Remove (pop) and return the top element from the stack, or <code>null</code> if the stack is empty (take out a coin);</li><li><code>top()</code>: Return but NOT remove the top element from the stack, or <code>null</code> if the stack is empty (check the coin on top);</li><li><code>size()</code>: Return the number of elements in the stack (check how many coins are there);</li><li><code>isEmpty()</code>: Return a boolean value indicating whether the stack is empty (check whether the collector is empty);</li></ul><hr><p>In order to use the Stack ADT in Java, we first need to define the Stack interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span>;<br>    E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br>    E <span class="hljs-title function_">top</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Then we need to define the concrete Stack class to implement the Stack interface to give each method a body.</p><p>Two ways:</p><ol><li>Using <strong>Array</strong> to implement the Stack;</li><li>Using <strong>LinkedList</strong> to implement the Stack.</li></ol><p>Before our implementation, we first look at the Stack class offered by Java, which is the <code>java.util.Stack</code> class.</p><hr><h1 id="3-java-util-Stack-Class"><a href="#3-java-util-Stack-Class" class="headerlink" title="3 java.util.Stack Class"></a>3 java.util.Stack Class</h1><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Stack.html">Stack - Java SE 17</a></p><p>Some differences of method between the Stack ADT and the <code>java.util.Stack</code> class:</p><div class="table-container"><table><thead><tr><th style="text-align:center">Stack ADT</th><th style="text-align:center"><code>java.util.Stack</code> Class</th></tr></thead><tbody><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center"><code>size()</code></td></tr><tr><td style="text-align:center"><strong><code>isEmpty()</code></strong></td><td style="text-align:center"><strong><code>empty()</code></strong></td></tr><tr><td style="text-align:center"><code>push(e)</code></td><td style="text-align:center"><code>push(e)</code></td></tr><tr><td style="text-align:center"><code>pop()</code></td><td style="text-align:center"><code>pop()</code></td></tr><tr><td style="text-align:center"><strong><code>top()</code></strong></td><td style="text-align:center"><strong><code>peek()</code></strong></td></tr></tbody></table></div><hr><h1 id="4-Stack-ADT-Implementations"><a href="#4-Stack-ADT-Implementations" class="headerlink" title="4 Stack ADT Implementations"></a>4 Stack ADT Implementations</h1><h2 id="4-1-Implement-Stack-Using-Array"><a href="#4-1-Implement-Stack-Using-Array" class="headerlink" title="4.1 Implement Stack Using Array"></a>4.1 Implement Stack Using Array</h2><ul><li>Using an array to store the elements in the stack, with fixed size of the array, $N$.</li><li>We use a variable $t$ to indicate the top of the stack, and $t = -1$ indicates the stack is empty, as the first inserted element is at index $0$.</li></ul><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// Default array size</span><br>    <span class="hljs-keyword">private</span> E[] elements; <span class="hljs-comment">// Using array to store elements in the Stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// Start index of the top</span><br>    <span class="hljs-comment">// Default constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-built_in">this</span>(SIZE);<br>    &#125;<br>    <span class="hljs-comment">// Constructor with size</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> inSize)</span> &#123; <br>        elements = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[inSize];<br>    &#125;<br>    <span class="hljs-comment">// Return the size of the Stack</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-keyword">return</span> t+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// Return true if the Stack is empty</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-type">return</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span>= -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// Push an element into the Stack</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E inElement)</span> &#123; <br>        <span class="hljs-keyword">if</span> (size() == elements.length) &#123; <span class="hljs-comment">// Check whether the Stack is full</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Stack is full&quot;</span>);<br>        &#125;<br>        t = t + <span class="hljs-number">1</span>; <span class="hljs-comment">// Increase the index of the top</span><br>        elements[t] = inElement; <span class="hljs-comment">// Put the element into the Stack</span><br>    &#125;<br>    <span class="hljs-comment">// Pop an element from the Stack</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123; <br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">outElement</span> <span class="hljs-operator">=</span> elements[t]; <span class="hljs-comment">// Get the element from the top</span><br>        elements[t] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// Set the element to null for garbage collection</span><br>        t = t - <span class="hljs-number">1</span>; <span class="hljs-comment">// Decrease the index of the top</span><br>        <span class="hljs-keyword">return</span> outElement;<br>    &#125;<br>    <span class="hljs-comment">// Return the element from the top</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> elements[t]; <span class="hljs-comment">// Get the element from the top</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bottom -&gt; &quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= t; i++) &#123;<br>            outString = outString + elements[i] + <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        outString = outString + <span class="hljs-string">&quot;&lt;- top&quot;</span>;<br>        <span class="hljs-keyword">return</span> outString;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>&lt;Integer&gt;();<br>        System.out.println(stack.isEmpty()); <span class="hljs-comment">// true</span><br>        stack.push(<span class="hljs-number">1</span>);<br>        stack.push(<span class="hljs-number">2</span>);<br>        stack.push(<span class="hljs-number">3</span>);<br>        System.out.println(stack.size()); <span class="hljs-comment">// 3</span><br>        System.out.println(stack.toString()); <span class="hljs-comment">// bottom -&gt; 1 2 3 &lt;- top</span><br>        System.out.println(stack.pop()); <span class="hljs-comment">// 3</span><br>        System.out.println(stack.toString()); <span class="hljs-comment">// bottom -&gt; 1 2 &lt;- top</span><br>        System.out.println(stack.top()); <span class="hljs-comment">// 2</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-number">3</span><br>bottom -&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> &lt;- top<br><span class="hljs-number">3</span><br>bottom -&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> &lt;- top<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><p><strong>Advantages</strong> of using an array to implement the Stack:</p><ul><li><p>Simple and efficient;</p><ul><li><p>Each method just includes some <a href="https://ultrafish.cn/2022/05/13/algorithm-analysis-introduction/#2-Analysis-on-High-level-Description-of-Algorithm">primitive operations</a>, which is easy to understand and implement.</p></li><li><p><strong>Running time of each method:</strong></p></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Method</th><th style="text-align:center">Running time</th></tr></thead><tbody><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>push(e)</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>pop()</code></td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:center"><code>top()</code></td><td style="text-align:center">$O(1)$</td></tr></tbody></table></div><ul><li>Therefore, using Array to implement the Stack is efficient, for each method runs in constant time, $O(1)$ time.</li></ul><hr><p><strong>Drawbacks</strong> of using an array to implement the Stack:</p><ul><li>It is based on a fixed size of the array, $N$, which means the size of the Stack is fixed, limited and unchangeable, while the the actual size of the Stack is dynamic.<ul><li>If we needs much less space than the reserved size, memory is wasted.</li><li>If we try to push an element into the Stack when the array storage is full, the program will throw an exception, and we cannot push any more elements into the Stack.</li></ul></li></ul><p>To solve the above problem, we can use a <strong>LinkedList</strong> to implement the Stack.</p><hr><h2 id="4-2-Implement-Stack-Using-Linked-List"><a href="#4-2-Implement-Stack-Using-Linked-List" class="headerlink" title="4.2 Implement Stack Using Linked List"></a>4.2 Implement Stack Using Linked List</h2><ul><li>Using a <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-Singly-Linked-List">singly linked list</a> to store the elements in the stack;</li><li>The memory usage is always associated with the actual number of elements in the Stack, without a capacity limitation;</li><li>According to the stack ADT, we can adapt our <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-3-Implementation-of-the-Singly-Linked-List-Class">SinglyLinkedList class</a> to define a new LinkedStack class:</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Methods in Stack</th><th style="text-align:center">Method in <code>SingleLinkedList</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>size()</code></td><td style="text-align:center"><code>getSize()</code></td></tr><tr><td style="text-align:center"><code>isEmpty()</code></td><td style="text-align:center"><code>isEmpty()</code></td></tr><tr><td style="text-align:center"><code>push(e)</code></td><td style="text-align:center"><code>addAtHead(e)</code></td></tr><tr><td style="text-align:center"><code>pop()</code></td><td style="text-align:center"><code>deleteAtHead()</code></td></tr><tr><td style="text-align:center"><code>top()</code></td><td style="text-align:center"><code>getHead()</code></td></tr></tbody></table></div><p>Java implementation:</p><p>(Import the <code>SingleLinkedList</code> class from the post-<a href="https://ultrafish.cn/2022/05/08/linked-list-introduction/#2-3-Implementation-of-the-Singly-Linked-List-Class">Linked List Introduction - 链表简介</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> SinglyLinkedList&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SinglyLinkedList</span>&lt;E&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedStack</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getSize();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.isEmpty();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E element)</span> &#123;<br>        list.addAtHead(element);<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.deleteAtHead();<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.getHead();<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;top -&gt;&quot;</span>+list.toString()+<span class="hljs-string">&quot;&lt;- bottom&quot;</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedStack</span>&lt;Integer&gt;();<br>        System.out.println(stack.isEmpty()); <span class="hljs-comment">// true</span><br>        stack.push(<span class="hljs-number">1</span>);<br>        stack.push(<span class="hljs-number">2</span>);<br>        stack.push(<span class="hljs-number">3</span>);<br>        System.out.println(stack.size()); <span class="hljs-comment">// 3</span><br>        System.out.println(stack.toString()); <span class="hljs-comment">// top -&gt;3 2 1 &lt;- bottom</span><br>        System.out.println(stack.pop()); <span class="hljs-comment">// 3</span><br>        System.out.println(stack.toString()); <span class="hljs-comment">// top -&gt;2 1 &lt;- bottom</span><br>        System.out.println(stack.top()); <span class="hljs-comment">// 2</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-number">3</span><br>top -&gt;<span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> &lt;- bottom<br><span class="hljs-number">3</span><br>top -&gt;<span class="hljs-number">2</span> <span class="hljs-number">1</span> &lt;- bottom<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-Stack-Applications"><a href="#5-Stack-Applications" class="headerlink" title="5 Stack Applications"></a>5 Stack Applications</h1><p>List two simple applications of Stack.</p><h2 id="5-1-Reverse-a-Array"><a href="#5-1-Reverse-a-Array" class="headerlink" title="5.1 Reverse a Array"></a>5.1 Reverse a Array</h2><p>Based on the FILO (First In Last Out) principle, we can reverse an array using Stack. </p><ul><li>First we <strong>push</strong> all the elements into the Stack in the default order in the array;</li><li>Then we <strong>pop</strong> them out one by one to get the reversed array.</li></ul><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(E[] inArr)</span> &#123;<br>    Stack&lt;E&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>&lt;E&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inArr.length; i++) &#123;<br>        stack.push(inArr[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inArr.length; i++) &#123;<br>        inArr[i] = stack.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Integer[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>    reverse(arr);<br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><hr><h2 id="5-2-Matching-Parentheses"><a href="#5-2-Matching-Parentheses" class="headerlink" title="5.2 Matching Parentheses"></a>5.2 Matching Parentheses</h2><p>Giving an arithmetic expressions, we need to check whether their delimiting symbols match up correctly. We can use a stack to check the matching by pushing and popping the delimiting symbols.</p><p>Pairs:</p><ul><li>Parentheses: “(” and “)”</li><li>Braces: “{” and “}”</li><li>Brackets: “[” and “]”</li></ul><p>Examples:</p><ul><li>valid: <code>()</code></li><li>valid: <code>[([])&#123;()&#125;]</code></li><li>invalid: <code>[([&#123;()&#125;]</code></li><li>invalid: <code>&#123;[(&#125;</code></li></ul><p>Simple algorithm:</p><ul><li><ol><li>Traverse the expression from left to right;</li></ol></li><li><ol><li>If we meet a left delimiter(e.g. <code>([&#123;</code>), we push it into the stack;</li></ol></li><li><ol><li>Else if we meet a right delimiter(e.g. <code>)]&#125;</code>), we pop an element from the stack,</li></ol></li><li><ol><li>then check whether the popped element and the met delimiter match up(e.g. <code>()</code>,<code>[]</code>,<code>&#123;&#125;</code>);</li></ol></li><li><p>The expression is <strong>invalid</strong>, if:</p><ul><li>a. When we meet a right delimiter, the stack is empty,;</li><li>b. These two delimiters do <strong>NOT</strong> match up;</li><li>c. After we traversing the whole expression, the stack is <strong>NOT</strong> empty.</li></ul></li><li><p>The expression is <strong>valid</strong>, if:</p><ul><li>d. After we traversing the whole expression, the stack <strong>is</strong> empty.</li></ul></li></ul><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatched</span><span class="hljs-params">(String expression)</span> &#123;<br>        Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedStack</span>&lt;Character&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">opening</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;([&#123;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">closing</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;)]&#125;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; expression.length(); i++) &#123; <span class="hljs-comment">// step 1</span><br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> expression.charAt(i);<br>            <span class="hljs-keyword">if</span> (opening.indexOf(c) != -<span class="hljs-number">1</span>) &#123;<br>                stack.push(c); <span class="hljs-comment">// step 2</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (closing.indexOf(c) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (stack.isEmpty()) &#123; <span class="hljs-comment">// case a</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-comment">// step 3 &amp; 4</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (closing.indexOf(c) != opening.indexOf(stack.pop())) &#123; <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// case b</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.isEmpty(); <span class="hljs-comment">// case c &amp; d</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(isMatched(<span class="hljs-string">&quot;()&quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(isMatched(<span class="hljs-string">&quot;[([])&#123;()&#125;]&quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(isMatched(<span class="hljs-string">&quot;[([&#123;()&#125;]&quot;</span>)); <span class="hljs-comment">// false</span><br>    System.out.println(isMatched(<span class="hljs-string">&quot;&#123;[(&#125;&quot;</span>)); <span class="hljs-comment">// false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Goodrich, M., Tamassia, R., &amp; O’reilly, A. (2014). <em>Data Structures and Algorithms in Java, 6th Edition.</em> John Wiley &amp; Sons.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Stack 相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Data Structure</category>
      
      <category>Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm Analysis Introduction - 算法分析简介</title>
    <link href="/2022/05/13/algorithm-analysis-introduction/"/>
    <url>/2022/05/13/algorithm-analysis-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p><strong>Data Structure</strong>: a systematic way of organizing and accessing data;<br><strong>Algorithm</strong>: a step-by-step <strong>procedure</strong> for performing some task in <strong>a finite amount of time</strong>.</p><span id="more"></span><p>In order to classify some data structure and algorithm as <strong>good</strong>, we need to characterize the <strong>running times</strong> or <strong>space usage</strong> of algorithms and data structure operations, which are the <strong>Time Complexity</strong> and <strong>Space Complexity</strong>. And we will pay more attention to the <strong>time</strong>.</p><p>We can not tell a algorithm or data structure is <strong>good</strong> or <strong>bad</strong> only based on the running times, because the running times can <strong>vary</strong> for different input sizes, hardware environments, software environments and other factors.</p><blockquote><p>Therefore, we will focus on <strong>the relationship between the <em>running time</em> of an algorithm and the <em>size of its input</em>.</strong> And we need to design a way to <strong>measure the this relationship</strong>.</p></blockquote><hr><h2 id="1-2-Mays-of-Measurement"><a href="#1-2-Mays-of-Measurement" class="headerlink" title="1.2 Mays of Measurement"></a>1.2 Mays of Measurement</h2><h3 id="Experimental-Analysis"><a href="#Experimental-Analysis" class="headerlink" title="Experimental Analysis"></a>Experimental Analysis</h3><p>Experiment one algorithm by running the program on various test inputs while recording the time spent during each execution.</p><p><strong>Drawback</strong>: </p><ul><li>Not efficient, because the running time of the algorithm vary on the input size, which may cost a lot of time to run;</li><li>We can not know the goodness of a algorithm until we run it on various test inputs;</li></ul><hr><h3 id="Ideally-Way"><a href="#Ideally-Way" class="headerlink" title="Ideally Way"></a>Ideally Way</h3><p><strong>The Goal</strong>:</p><ol><li>Allows us to evaluate the relative efficiency of any two algorithms in a way that is <strong>independent of the hardware and software environment</strong>;</li><li>Is performed by studying a <strong>high-level description</strong> of the algorithm <strong>without need for implementation</strong>;</li><li>Takes into account <strong>all possible inputs</strong>.</li></ol><hr><h1 id="2-Analysis-on-High-level-Description-of-Algorithm"><a href="#2-Analysis-on-High-level-Description-of-Algorithm" class="headerlink" title="2 Analysis on High-level Description of Algorithm"></a>2 Analysis on High-level Description of Algorithm</h1><p>In order to analyze in a <strong>high-level description</strong>, we define a set of primitive operations of programs:</p><ul><li>Assigning a value to a variable (<code>int val = 0;</code>)</li><li>Following an object reference (<code>object.length;</code>)</li><li>Performing an arithmetic operation (<code>a+b;</code>)</li><li>Comparing two numbers (<code>a&gt;b;</code>)</li><li>Accessing a single element of an array by index (<code>arr[i];</code>)</li><li>Calling a method (<code>object.toString();</code>)</li><li>Returning from a method (<code>return;</code>)</li></ul><p>Our <strong>assumption</strong>:</p><ul><li>The execution time of a primitive operation is <strong>constant</strong> and running time of different primitive operation is <strong>fairly similar</strong>, and are <strong>independent</strong> of the running environment;</li></ul><blockquote><p>Therefore, <strong>the number of primitive operations</strong> an algorithm performs can <strong>characterize</strong> the <strong>actual running time of that algorithm</strong>.</p></blockquote><p>To capture the <strong>order of growth of an algorithm’s running time</strong>, we will associate, with each algorithm, a function $f(n)$ that characterizes <strong>the number of primitive operations</strong> that are performed as a function of <strong>the input size $n$</strong>. </p><blockquote><p>The <strong>more primitive operations</strong> an algorithm performs, the <strong>more time</strong> it takes to run, so we can say the actual running time $T(n)$:</p><script type="math/tex; mode=display">T(n)\propto f(n)</script></blockquote><p><strong>[Example]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">arrSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 Primitive Operation(PO)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">totalSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; j &lt; n; i++) <span class="hljs-comment">// n PO (in a loop)</span><br>        totalSum += inArr[i]; <span class="hljs-comment">// n PO (in a loop)</span><br>    <span class="hljs-keyword">return</span> totalSum; <span class="hljs-comment">// 1 PO</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Where</p><script type="math/tex; mode=display">f(n)=1+1+n+n+1=2n+3</script><p>Based on our abovementioned <strong>assumption</strong>, we can say the <strong>running time $T(n)$ of this program</strong> is $2n+3$ <strong>units of time</strong>, or $T(n) \propto 2n+3$, where $n$ is the input size (the size of array).</p><hr><h1 id="3-Big-O-Notation"><a href="#3-Big-O-Notation" class="headerlink" title="3 Big-O Notation"></a>3 Big-O Notation</h1><p>We can use the following <strong>Big-O Notation</strong> to <strong>uniformly</strong> describe relationship between the <strong>running time of an algorithm</strong> and <strong>the number of primitive operations</strong>, which is the abovementioned $T(n)\propto f(n)$.</p><hr><p><strong>Definition of Big-O Notation:</strong></p><blockquote><p>Let $f(n)$ and $g(n)$ be functions mapping positive integers to positive real numbers. We say that $f(n)$ is $O(g(n))$ if there is a real constant $c &gt; 0$ and an integer constant $n_0 \ge 1$ such that</p><script type="math/tex; mode=display">f (n) \le c\times g(n), \forall n ≥ n_0</script><p>It is sometimes pronounced as “$f(n)$ is <strong><em>big-Oh</em></strong> of $g(n)$.”</p></blockquote><p><img src="/2022/05/13/algorithm-analysis-introduction/1.png" alt="Illustrating the “big-Oh” notation"></p><hr><p><strong>[Example]</strong></p><p>Abovementioned case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">arrSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 Primitive Operation(PO)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">totalSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; j &lt; n; i++) <span class="hljs-comment">// n PO (in a loop)</span><br>        totalSum += inArr[i]; <span class="hljs-comment">// n*1 PO (in a loop)</span><br>    <span class="hljs-keyword">return</span> totalSum; <span class="hljs-comment">// 1 PO</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Where</p><script type="math/tex; mode=display">f(n)=1+1+n+n\times 1+1=2n+3</script><script type="math/tex; mode=display">f(n) \text{ is } O(n)</script><p>[Prove]</p><p>For the Big-O notation, we need to find constant $c&gt;0$ and $n_0\ge 1$ such that $2n+3\le c\times g(n)$, for all $n\ge n_0$.<br>It is easy to find $c=3$, $n_0=3, g(n)=n$, which is $2n+3\le 3n$ when $n\ge 3$. There are also may possible answers.<br>Therefore, according to the definition of Big-O notation, $f(n)$ is $O(n)$.</p><hr><p><strong>Note</strong>:</p><ul><li>We always say $f(n)$ <strong>is</strong> big-Oh of $g(n)$, or $f(n)$ <strong>is</strong> $O(g(n))$;</li><li><strong>NOT</strong> <strong>$f(n)\le O(g(n))$</strong> or <strong>$f(n)=O(g(n))$</strong>;</li></ul><p><strong>Properties</strong> of Big-O Notation:</p><ul><li>The big-Oh notation allows us to <strong>ignore constant factors</strong> and <strong>lower-order terms</strong> and <strong>focus on the main components of a function that affect its growth</strong>.<ul><li><strong>[Example]</strong>:</li><li>$f(n)= a_0+a_1n+a_2n^2+…+a_dn^d,a_d\gt 0$, $f(n)$ is $O(n^d)$;</li><li>$5n^2+3n log n+1$ is $O(n^2)$;</li><li>$5log n+3$ is $O(log n)$</li><li>$2^{n+4}$ is $O(2^{n})$;</li></ul></li><li><strong>Addition rule</strong>: when each primitive operation is parallel with each other, we can calculate the number of operations by addition;</li><li><strong>Multiplication rule</strong>: when each primitive operation is nested in another operation(e.g. loops, methods), we can calculate the number of operations by multiplication;</li></ul><hr><h2 id="3-1-Asymptotic-Analysis-from-Big-O-Notation"><a href="#3-1-Asymptotic-Analysis-from-Big-O-Notation" class="headerlink" title="3.1 Asymptotic Analysis from Big-O Notation"></a>3.1 Asymptotic Analysis from Big-O Notation</h2><blockquote><p>The big-Oh notation allows us to say that a function $f(n)$ is “<strong>less than or equal to</strong>” another function $g(n)$ times to a constant factor and in the <strong>asymptotic</strong> sense as n grows toward infinity, which means Big-O Notation can be used to describe the <strong>growth</strong> of a function $f(n)$ asymptotically.</p></blockquote><p>As we discussed before, the actual running time of an algorithm, $T(n)$ is proportional to the number of primitive operations performed by the algorithm, $f(n)$, where $n$ is the input size of the algorithm, which is </p><script type="math/tex; mode=display">T(n)\propto f(n)</script><p>With the help of Big-O Notation, we can use the Big-O Notation of $f(n)$ to describe the $T(n)$ asymptotically, since $T(n)$ and $f(n)$ grow in a same manner, which is </p><script type="math/tex; mode=display">T(n)\text{ is }O(f(n))</script><p>Thus, we can describe the Time Complexity or running time of an algorithm by saying “the time complexity of this algorithm is $O(f(x))$” or “this algorithm runs in $O(f(n))$ time”.</p><hr><h1 id="4-Example-of-Time-Complexity-Analysis"><a href="#4-Example-of-Time-Complexity-Analysis" class="headerlink" title="4 Example of Time Complexity Analysis"></a>4 Example of Time Complexity Analysis</h1><h2 id="4-1-Constant-Time-Algorithms-O-1"><a href="#4-1-Constant-Time-Algorithms-O-1" class="headerlink" title="4.1 Constant-Time Algorithms $O(1)$"></a>4.1 Constant-Time Algorithms $O(1)$</h2><p>All <a href="#2-Analysis-on-High-level-Description-of-Algorithm">primitive operations</a> run in constant time, or run in $O(1)$ time, so the time complexity of these operation is $O(1)$.</p><p><strong>[Example]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLast</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inA)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastIndex</span> <span class="hljs-operator">=</span> inA.length-<span class="hljs-number">1</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastElement</span> <span class="hljs-operator">=</span> inA[lastIndex]; <span class="hljs-comment">// 1 PO</span><br>    System.out.println(lastElement); <span class="hljs-comment">// 1 PO</span><br>&#125;<br></code></pre></td></tr></table></figure><p>where</p><script type="math/tex; mode=display">f(n)=1+1+1=3</script><p>$f(n)$ is $O(1)$ (The big-Oh notation allows us to ignore constant factors, so we can ignore $3$ and leave the $1$ as the main component of $f(n)$).</p><p>So we can say that the time complexity of above algorithm is $O(1)$, which means it runs in $O(1)$ time (constant time).</p><blockquote><p>Constant-Time complexity means the the running time is a constant, it is independent of the input size.</p></blockquote><hr><h2 id="4-2-Logarithm-Time-Algorithms-O-log-n"><a href="#4-2-Logarithm-Time-Algorithms-O-log-n" class="headerlink" title="4.2 Logarithm-Time Algorithms $O(log n)$"></a>4.2 Logarithm-Time Algorithms $O(log n)$</h2><p><strong>[Example]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">powerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">while</span> (num &lt;= n) &#123; <span class="hljs-comment">// How many times will the loop run?</span><br>        num = num * <span class="hljs-number">2</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>How many times will the loop run? Assume it will run $t$ times. When $2^t=n$, the loop will stop. It means that it runs $t=log_2n$ times in the loop. So,</p><script type="math/tex; mode=display">f(n)=1+log_2(n)</script><p>Therefore, the time complexity of above algorithm is $O(log n)$, it runs in $O(log n)$ time.</p><blockquote><p>Note: The most common base for the logarithm function in computer science is 2 as computers store integers in binary. So we have $log n=log_2n$.</p></blockquote><hr><h2 id="4-3-Linear-Time-Algorithms-O-n"><a href="#4-3-Linear-Time-Algorithms-O-n" class="headerlink" title="4.3 Linear-Time Algorithms $O(n)$"></a>4.3 Linear-Time Algorithms $O(n)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> inArr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <span class="hljs-comment">// (n-1) PO</span><br>        <span class="hljs-keyword">if</span> (inArr[i] &gt; max) &#123; <span class="hljs-comment">// * c(c&lt;=(n-1)) PO</span><br>            max = inArr[i]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><script type="math/tex; mode=display">f(n)=1+1+(n-1)+c\times (n-1)=(c+1)(n-1)+2</script><p>Where $c$ is the running times inside the loop, and we can only tell $c\le (n-1)$.</p><p>So, $f(n)$ is $O(n)$.</p><p>Therefore, the time complexity of above algorithm is $O(n)$, it runs in $O(n)$ time.</p><hr><h2 id="4-4-Linear-Logarithm-Time-Algorithms-O-n-log-n"><a href="#4-4-Linear-Logarithm-Time-Algorithms-O-n-log-n" class="headerlink" title="4.4 Linear-Logarithm-Time Algorithms $O(n log n)$"></a>4.4 Linear-Logarithm-Time Algorithms $O(n log n)$</h2><p>It is a nest of $O(n)$ and $O(log n)$ algorithms.</p><p><strong>[Example]</strong></p><p>Based on the example in $O(log n)$ algorithm:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">powerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123; <span class="hljs-comment">// n PO</span><br>        <span class="hljs-keyword">while</span> (num &lt;= n) &#123; <span class="hljs-comment">// n * log(n) PO (nested in a loop)</span><br>            num = num * <span class="hljs-number">2</span>; <span class="hljs-comment">// n * log(n) PO (nested in a loop)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>This algorithm simply repeats the $O(log n)$ algorithm $n$ times, which gets $O(n log n)$</p></blockquote><script type="math/tex; mode=display">f(n)=1+n+n\times log n+n\times log n=2n log n+n+1</script><p>Therefore, the time complexity of above algorithm is $O(n log n)$, it runs in $O(n log n)$ time.</p><hr><h2 id="4-5-Quadratic-Time-Algorithms-O-n-2"><a href="#4-5-Quadratic-Time-Algorithms-O-n-2" class="headerlink" title="4.5 Quadratic-Time Algorithms $O(n^2)$"></a>4.5 Quadratic-Time Algorithms $O(n^2)$</h2><p>It is a nest of two $O(n)$ algorithms.</p><p><strong>[Example]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nestSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123; <span class="hljs-comment">// n PO</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++) &#123; <span class="hljs-comment">// n * n PO</span><br>            sum += inArr[i] + inArr[j]; <span class="hljs-comment">// n * n PO</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="math/tex; mode=display">f(n)=1+1+n+2 \times n\times n=2n^2+n+2</script><p>Therefore, the time complexity of above algorithm is $O(n^2)$, it runs in $O(n^2)$ time.</p><hr><p>Cubic-Time Algorithms $O(n^3)$ is similar to $O(n^2)$.<br>Exponential-Time Algorithms $O(2^n)$ is rather rare, try not to use it unless the input size is really small.</p><hr><p>Comparative Analysis of each Time Complexity:</p><p><img src="/2022/05/13/algorithm-analysis-introduction/2.png" alt="Comparative Analysis of each Time Complexity"></p><hr><h1 id="5-Worst-Case-Best-Case-Average-Case-Analysis"><a href="#5-Worst-Case-Best-Case-Average-Case-Analysis" class="headerlink" title="5 Worst-Case Best-Case Average-Case Analysis"></a>5 Worst-Case Best-Case Average-Case Analysis</h1><p><strong>[Example]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123; <span class="hljs-comment">// n PO</span><br>        <span class="hljs-keyword">if</span> (inArr[i] == target) &#123; <span class="hljs-comment">// n * c(c&lt;=n) PO</span><br>            flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// n * c(c&lt;=n) PO</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag; <span class="hljs-comment">// 1 PO</span><br>&#125;<br></code></pre></td></tr></table></figure><p>It is easy to see that the time complexity of above algorithm is $O(n)$, it runs in $O(n)$ time.</p><p>However, we can improve the above algorithm by inserting a <code>break</code> statement inside the loop to stop the loop once the target is found. So the rest of the algorithm no need to be executed.</p><p>After improving:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inArr, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> inArr.length; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 1 PO</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123; <span class="hljs-comment">// How many times will the loop run?</span><br>        <span class="hljs-keyword">if</span> (inArr[i] == target) &#123; <br>            flag = <span class="hljs-literal">true</span>; <br>            <span class="hljs-keyword">break</span>; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag; <span class="hljs-comment">// 1 PO</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The <strong>BEST</strong> situation is our target is the <strong>first</strong> element of the array. So the loop will run only once, which means the time complexity of above algorithm is $O(1)$. So we say the time complexity of above algorithm is $O(1)$ in the best case.</p><p>However, the <strong>WORST</strong> situation is, unfortunately, our target is the <strong>last</strong> element of the array. So the loop will run $n$ times, which means the time complexity of above algorithm is $O(n)$ in worst case. So we say the time complexity of above algorithm is $O(n)$ in the worst case.</p><p>The time complexity of the <strong>worst case</strong> of the improved algorithm($O(n)$) is <strong>equal</strong> to the time complexity of the <strong>all cases</strong> of the original algorithm($O(n)$), so we can be sure that the algorithm is improved somehow.</p><hr><p>Usually we can measure the <strong>Average-Case time complexity</strong> of an algorithm.</p><p>Assuming there $n$ cases in a algorithm, then the Average-Case time complexity of the algorithm is:</p><script type="math/tex; mode=display">O(\frac{\sum_{i=0}^n{\text{(Running time in case$_i$)}}}{n})</script><p><strong>[Example]</strong><br>For the above improved algorithm, there may be $n+1$ cases (i.e. target in position$[0,n-1]$, or target not in the array).</p><p>The <strong>Average-Case time complexity</strong>is:</p><script type="math/tex; mode=display">O(\frac{1+2+3+...+n+n}{n+1})=O(\frac{(3+n)n}{2(n+1)})=O(n)</script><hr><h1 id="Useful-Website"><a href="#Useful-Website" class="headerlink" title="Useful Website"></a>Useful Website</h1><p><a href="https://www.bigocheatsheet.com/">Big-O Cheat Sheet</a><br><a href="https://visualgo.net/en">VisuAlgo</a><br><a href="https://algorithm-visualizer.org/">Algorithm Visualizer</a><br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a></p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Goodrich, M., Tamassia, R., &amp; O’reilly, A. (2014). <em>Data Structures and Algorithms in Java, 6th Edition.</em> John Wiley &amp; Sons.<br><a href="https://leetcode.com/explore/learn/card/linked-list/">Linked List - Explore - LeetCode</a><br><a href="https://mp.weixin.qq.com/s/mBTyBkeNHoW7-Rcbv2Exwg">算法复杂度分析，这次真懂了 - CodeSheep</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Algorithm Analysis 相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
      <tag>Algorithm Analysis</tag>
      
      <tag>Big-O</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linked List Introduction - 链表简介</title>
    <link href="/2022/05/08/linked-list-introduction/"/>
    <url>/2022/05/08/linked-list-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><div class="note note-danger">            <p>母亲节快乐 🌹<br>Happy Mother’s Day 🌹</p>          </div><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction-to-Linked-List"><a href="#1-Introduction-to-Linked-List" class="headerlink" title="1 Introduction to Linked List"></a>1 Introduction to Linked List</h1><p>The drawbacks of <code>Array</code>:</p><ul><li>The <strong>capacity</strong> of an array is <strong>fixed</strong> once created;</li><li>The time complexity of array <strong>insertion</strong> and <strong>deletion</strong> is <strong>high</strong> for elements shifting.</li></ul><span id="more"></span><p>Linked List:</p><blockquote><p>A collection of <code>nodes</code> that collectively form a linear sequence, an alternative to an array-based structure.</p></blockquote><p>Including <strong>Singly Linked List</strong>, <strong>Circularly Linked List</strong>, and <strong>Doubly Linked List</strong>.</p><hr><h1 id="2-Singly-Linked-List"><a href="#2-Singly-Linked-List" class="headerlink" title="2 Singly Linked List"></a>2 Singly Linked List</h1><blockquote><p>One kind of <strong>Linked List</strong> whose each <code>node</code> stores a <strong>reference</strong> to an object that is <strong>next node</strong> of the list.</p></blockquote><p><img src="/2022/05/08/linked-list-introduction/1.png" alt="Singly Linked List"></p><ul><li><code>head</code>: the <strong>first node</strong> of the linked list<ul><li>the linked list instance must keep a reference to its <code>head</code>;</li></ul></li><li><code>tail</code>: the <strong>last node</strong> of the linked list<ul><li>can be found by <strong>traversing</strong> the linked list;</li><li>the <code>next</code> reference of <code>tail</code> is <strong><code>null</code></strong>;<ul><li>Alternatively, the <code>next</code> reference of the <code>tail</code> can be <strong>itself</strong>, which can also help us to find the end of the list by checking whether the <code>next</code> reference of a node is itself or not.</li></ul></li><li>it is usual <strong>efficiency</strong> to <strong>store an explicit reference to the tail node</strong> for avoiding such traversal;</li></ul></li><li>It is usual for a linked list instance to <strong>keep a count of the total number of nodes</strong> that is the <strong>size of the list</strong>, to avoid traversing the list to count the nodes.</li></ul><p><img src="/2022/05/08/linked-list-introduction/2.png" alt="Singly Linked List with head and tail"></p><p>Java implementation of the <code>Node</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> E data;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        data = <span class="hljs-literal">null</span>;<br>        next = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        next = <span class="hljs-literal">null</span>;<br>    &#125;<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node&lt;E&gt; next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java implementation of the <strong>Singly Linked List initialization</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; head;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; tail;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SinglyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Node class nested</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-1-Insertion-of-Singly-Linked-List"><a href="#2-1-Insertion-of-Singly-Linked-List" class="headerlink" title="2.1 Insertion of Singly Linked List"></a>2.1 Insertion of Singly Linked List</h2><h3 id="Insert-at-the-head"><a href="#Insert-at-the-head" class="headerlink" title="Insert at the head"></a>Insert at the head</h3><ol><li>Create a new node as the <code>new head</code>;</li><li>Set the <code>next node</code> of the <code>new head</code> to point to the <code>current head</code>;</li><li>Set the <code>head</code> of the list to point to the <code>new head</code>;</li></ol><p><img src="/2022/05/08/linked-list-introduction/3.png" alt="Insert at the head of Singly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(E inData)</span> &#123;<br>    Node&lt;E&gt; newHead = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData); <span class="hljs-comment">// Create a new head, </span><br>    newHead.setNext(head); <span class="hljs-comment">// and set its next to point to the current head</span><br>    head = newHead; <span class="hljs-comment">// Set the head of the list to point to the new head;</span><br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// If the head is only node in the list</span><br>        tail = head; <span class="hljs-comment">// The head is also the tail</span><br>    &#125;<br>    size++; <span class="hljs-comment">// Increase the size</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Insert-at-the-tail"><a href="#Insert-at-the-tail" class="headerlink" title="Insert at the tail"></a>Insert at the tail</h3><ol><li>Create a new node as the <code>new tail</code>;</li><li>Set the <code>next node</code> of the <code>new head</code> to point to the <code>null</code>;</li><li>Set the <code>tail</code> of the list to point to the <code>new tail</code>;</li></ol><p><img src="/2022/05/08/linked-list-introduction/4.png" alt="Insert at the tail of Singly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(E inData)</span> &#123;<br>    Node&lt;E&gt; newTail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData); <span class="hljs-comment">// Create a new tail, </span><br>    newTail.setNext(<span class="hljs-literal">null</span>); <span class="hljs-comment">// and set its next to point to null</span><br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// if the tail is only node in the list</span><br>        head = newTail; <span class="hljs-comment">// The tail is also the head</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        tail.setNext(newTail); <span class="hljs-comment">// else the new tail is the next node of current tail</span><br>    &#125;<br>    tail = newTail; <span class="hljs-comment">// Set the tail of the list to point to the new tail;</span><br>    size++; <span class="hljs-comment">// Increase the size</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Insert-at-the-index"><a href="#Insert-at-the-index" class="headerlink" title="Insert at the index"></a>Insert at the index</h3><ol><li>If the index is <code>0</code>, then call <code>addAtHead()</code>;</li><li>If the index is <code>size</code>, then call <code>addAtTail()</code>;</li><li>Create a new node as <code>new node</code>;</li><li>Access the node <strong>before</strong> the <code>index node</code> by traversal as <code>current node</code>;</li><li>Set the <strong><code>next node</code> of the <code>new node</code></strong> to point to the <strong><code>next node</code> of the <code>current node</code></strong>;</li><li>Set the <code>next node</code> of the <code>current node</code> to point to the <code>new node</code>.</li></ol><p><img src="/2022/05/08/linked-list-introduction/6.png" alt="Insert at the index of Singly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(E inData, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// If the index is 0, then call addAtHead();</span><br>        addAtHead(inData);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123; <span class="hljs-comment">// If the index is size, then call addAtTail();</span><br>        addAtTail(inData);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData); <span class="hljs-comment">// Create a new node as new node</span><br>        Node&lt;E&gt; current = head;<br>        <span class="hljs-comment">// Access the node before the index node by traversal</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-comment">// Set the next node of the new node to point to the next node of the current node</span><br>        newNode.setNext(current.getNext());<br>        <span class="hljs-comment">// Set the next node of the current node to point to the new node</span><br>        current.setNext(newNode);<br>        size++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-Removing-of-Singly-Linked-List"><a href="#2-2-Removing-of-Singly-Linked-List" class="headerlink" title="2.2 Removing of Singly Linked List"></a>2.2 Removing of Singly Linked List</h2><h3 id="Remove-the-head"><a href="#Remove-the-head" class="headerlink" title="Remove the head"></a>Remove the head</h3><p>Just let <code>head</code> point to the <code>next node</code> of the <code>head</code>.</p><p><img src="/2022/05/08/linked-list-introduction/5.png" alt="Remove the head of Singly Linked List"></p><hr><h3 id="Remove-at-the-index"><a href="#Remove-at-the-index" class="headerlink" title="Remove at the index"></a>Remove at the index</h3><ol><li>Access the node <strong>before</strong> the <code>index node</code> by traversal as <code>current node</code>;</li><li>Set the <code>next node</code> of <code>current node</code> to point to the <strong><code>next node</code> of <code>next node</code> of the <code>current node</code></strong>.</li></ol><p><img src="/2022/05/08/linked-list-introduction/7.png" alt="Remove at the index of Singly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Just set head point to the next node of the head</span><br>        head = head.getNext();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &gt;<span class="hljs-number">0</span> &amp;&amp; index &lt; size) &#123;<br>        Node&lt;E&gt; current = head;<br>        <span class="hljs-comment">// Access the node before the index node by traversal as current node</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-comment">// Set the next node of current node to point to the next node of next node of the current node</span><br>        current.setNext(current.getNext().getNext());<br>    &#125;<br>    size--; <span class="hljs-comment">// decrease the size</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-Implementation-of-the-Singly-Linked-List-Class"><a href="#2-3-Implementation-of-the-Singly-Linked-List-Class" class="headerlink" title="2.3 Implementation of the Singly Linked List Class"></a>2.3 Implementation of the Singly Linked List Class</h2><p>Using <strong><em>generics</em></strong> datatype in Java to define the data stored in nodes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; head;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; tail;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">// constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SinglyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-literal">null</span>;<br>        tail = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head.getData();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tail.getData();<br>    &#125;<br>    <span class="hljs-comment">// get node from an index</span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; current = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-keyword">return</span> current;<br>    &#125;<br><br>    <span class="hljs-comment">// insert node at head</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(E inData)</span> &#123;<br>        Node&lt;E&gt; newHead = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData);<br>        newHead.setNext(head);<br>        head = newHead;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            tail = head;<br>        &#125;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// insert node at tail</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(E inData)</span> &#123;<br>        Node&lt;E&gt; newTail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData);<br>        newTail.setNext(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            head = newTail;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            tail.setNext(newTail);<br>        &#125;<br>        tail = newTail;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// insert node at an index</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(E inData, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addAtHead(inData);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123;<br>            addAtTail(inData);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(inData);<br>            Node&lt;E&gt; current = head;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>                current = current.getNext();<br>            &#125;<br>            newNode.setNext(current.getNext());<br>            current.setNext(newNode);<br>            size++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// remove and return a node at head</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">deleteAtHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> head.getData();<br>        head = head.getNext();<br>        size--;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            tail = head;<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">// remove and return a node at an index</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> deleteAtHead();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &gt;<span class="hljs-number">0</span> &amp;&amp; index &lt; size) &#123;<br>            Node&lt;E&gt; current = head;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>                current = current.getNext();<br>            &#125;<br>            data = current.getNext().getData();<br>            current.setNext(current.getNext().getNext());<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">// Node class</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        <span class="hljs-keyword">private</span> E data;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            data = <span class="hljs-literal">null</span>;<br>            next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2-4-Reverse-Singly-Linked-List"><a href="#2-4-Reverse-Singly-Linked-List" class="headerlink" title="2.4 Reverse Singly Linked List"></a>2.4 Reverse Singly Linked List</h2><p>To reverse a Singly Linked List.</p><p><img src="/2022/05/08/linked-list-introduction/9.png" alt="Reverse Singly Linked List"></p><blockquote><p>The main idea is move the <strong>node after the <code>old head</code></strong>(as the <code>new head</code>) to the <strong>front of the list</strong>(as the <code>head</code>) one by one till the head become the tail of the list.</p></blockquote><p><img src="/2022/05/08/linked-list-introduction/8.png" alt="Reverse Singly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span> &#123;<br>    Node&lt;E&gt; oldHead = <span class="hljs-built_in">this</span>.head; <span class="hljs-comment">// initial the oldHead to the head</span><br>    <span class="hljs-keyword">while</span> (oldHead != <span class="hljs-literal">null</span> &amp;&amp; oldHead.next != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// loop till lodHead become the tail</span><br>        Node&lt;E&gt; newHead = oldHead.next; <span class="hljs-comment">// Set the newHead as the next of oldHead</span><br>        oldHead.next = newHead.next; <span class="hljs-comment">// Set next node of the old one to new one&#x27;s next</span><br>        newHead.next = <span class="hljs-built_in">this</span>.head; <span class="hljs-comment">// Main idea: Move the newHead to the front of the list, to become the current head</span><br>        <span class="hljs-built_in">this</span>.head = newHead; <span class="hljs-comment">// Let head point to the newHead</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="3-Circularly-Linked-List"><a href="#3-Circularly-Linked-List" class="headerlink" title="3 Circularly Linked List"></a>3 Circularly Linked List</h1><blockquote><p>Circularly Linked List is a special case of Singly Linked List, which <strong>the <code>next node</code> of the <code>tail</code> points back to the <code>head</code> of the list</strong>, rather than <code>null</code>;</p></blockquote><p><img src="/2022/05/08/linked-list-introduction/10.png" alt="Circularly Linked List"></p><ul><li>NO maintain of the <code>head</code> reference;</li><li>Once we have the reference to the <code>tail</code>, <code>tail.getNext()</code> refers to the head of the list;<ul><li>It saves a bit of memory storage;</li><li>And simplify the code and make it more efficient, since it no need to maintain an additional <code>head</code> reference;</li></ul></li></ul><hr><h2 id="3-1-Rotate-a-Circularly-Linked-List"><a href="#3-1-Rotate-a-Circularly-Linked-List" class="headerlink" title="3.1 Rotate a Circularly Linked List"></a>3.1 Rotate a Circularly Linked List</h2><p>Just let the <code>current tail node</code> point to its <code>next node</code>:</p><p><img src="/2022/05/08/linked-list-introduction/11.png" alt="Rotate a Circularly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (tail != <span class="hljs-literal">null</span>) &#123;<br>        tail = tail.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3-2-Insert-and-Remove-Node-from-a-Circularly-Linked-List"><a href="#3-2-Insert-and-Remove-Node-from-a-Circularly-Linked-List" class="headerlink" title="3.2 Insert and Remove Node from a Circularly Linked List"></a>3.2 Insert and Remove Node from a Circularly Linked List</h2><p>Similar to <a href="#2-1-Insertion-of-Singly-Linked-List">Insertion of Singly Linked List</a> and <a href="#2-2-Removing-of-Singly-Linked-List">Removing of Singly Linked List</a>.</p><p><img src="/2022/05/08/linked-list-introduction/12.png" alt="Insert and Remove Node from a Circularly Linked List"></p><p>Some keys: </p><ul><li><strong>Insert at the head of the list</strong>: just insert the new node <strong>after</strong> the <code>tail</code> node;</li><li><strong>Insert at the tail of the list</strong>: first call method to <strong>insert the <code>new node</code> at the <code>head</code></strong>, then <strong>set the <code>tail</code> reference point to the <code>new node</code></strong>.</li></ul><hr><h2 id="3-3-Implementation-of-the-Circularly-Linked-List-Class"><a href="#3-3-Implementation-of-the-Circularly-Linked-List-Class" class="headerlink" title="3.3 Implementation of the Circularly Linked List Class"></a>3.3 Implementation of the Circularly Linked List Class</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircularlyLinkedList</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; tail;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CircularlyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        tail = <span class="hljs-literal">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tail;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tail == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tail.next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getHeadData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getHead().data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        Node&lt;E&gt; current = getHead();<br>        sb.append(current.getData() + <span class="hljs-string">&quot; &quot;</span>);<br>        current = current.getNext();<br>        <span class="hljs-keyword">while</span> (current != getHead()) &#123;<br>            sb.append(current.getData() + <span class="hljs-string">&quot; &quot;</span>);<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tail != <span class="hljs-literal">null</span>) &#123;<br>            tail = tail.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span> <span class="hljs-params">(E e)</span> &#123;<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(e);<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            tail = newNode;<br>            tail.setNext(tail);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            newNode.next = tail.getNext();<br>            tail.setNext(newNode);<br>        &#125;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span> <span class="hljs-params">(E e)</span> &#123;<br>        addAtHead(e);<br>        tail = tail.next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span> <span class="hljs-params">(<span class="hljs-type">int</span> index, E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addAtHead(e);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123;<br>            addAtTail(e);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; current = getHead();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>                current = current.next;<br>            &#125;<br>            Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(e);<br>            newNode.next = current.next;<br>            current.next = newNode;<br>            size++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span> <span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (size == <span class="hljs-number">1</span>) &#123;<br>                tail = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                tail.setNext(tail.next.next);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index&gt;<span class="hljs-number">0</span> &amp;&amp; index&lt;size) &#123;<br>            Node&lt;E&gt; current = getHead();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>                current = current.next;<br>            &#125;<br>            current.next = current.next.next;<br>            size--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">deleteAtHead</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">1</span>) &#123;<br>            out = tail.data;<br>            tail = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            out = tail.next.data;<br>            tail.setNext(tail.next.next);<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        <span class="hljs-keyword">private</span> E data;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            data = <span class="hljs-literal">null</span>;<br>            next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h1 id="4-Doubly-Linked-List"><a href="#4-Doubly-Linked-List" class="headerlink" title="4 Doubly Linked List"></a>4 Doubly Linked List</h1><p>Problem:</p><blockquote><p>In the Singly Linked List, it is <strong>not efficient</strong> to <strong>insert</strong> and <strong>delete</strong> a arbitrary node except the head node, because we <strong>cannot determine</strong> the node that immediately <strong>precedes</strong> the arbitrary node, since we only know the next node of it. </p></blockquote><p>Solution:</p><blockquote><p>Based on the Singly Linked List, we add an additional reference in each node to point to the node <strong>before</strong> it, which is the <strong>Doubly Linked List</strong>.</p></blockquote><p>Using <code>next</code> to point to the <strong>next node</strong>.<br>Using <code>prev</code> to point to the <strong>previous node</strong>.</p><p><img src="/2022/05/08/linked-list-introduction/13.png" alt="Example of Doubly Linked List"></p><p>Java implementation of the <code>Node</code> in Doubly Linked List:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        <span class="hljs-keyword">private</span> E data;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; prev;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            data = <span class="hljs-literal">null</span>;<br>            next = <span class="hljs-literal">null</span>;<br>            prev = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            next = <span class="hljs-literal">null</span>;<br>            prev = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node&lt;E&gt; prev, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            <span class="hljs-built_in">this</span>.next = next;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getPrev</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrev</span><span class="hljs-params">(Node&lt;E&gt; prev)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-1-Header-and-Trailer-Sentinels"><a href="#4-1-Header-and-Trailer-Sentinels" class="headerlink" title="4.1 Header and Trailer Sentinels"></a>4.1 Header and Trailer Sentinels</h2><p>It is helpful to add additional nodes at ends of the list:</p><ul><li>A <code>header</code> node ar the <strong>beginning</strong> of the list, and a <code>trailer</code> node the <strong>end</strong> of the list;</li><li>They called <strong>sentinels</strong> or <strong>guards</strong>, they do not store elements of thr primary list;</li><li>For an <strong>empty</strong> list, the <code>next</code> field of <code>header</code> points to <code>trailer</code>, and the <code>prev</code> field of <code>trailer</code> points to <code>header</code>, the rest will be set as <code>null</code>;</li><li>For n <strong>nonempty</strong>, the <code>next</code> field of <code>header</code> points to the first element in the sequence, <code>prev</code> field of <code>trailer</code> points to last element of the sequence.</li></ul><p><img src="/2022/05/08/linked-list-introduction/14.png" alt="Header and Trailer Sentinels"></p><p><strong>Advantage</strong> of Using Sentinels:</p><ul><li>The slight extra memory for the sentinels greatly <strong>simplifies the logic of our operations</strong>;</li><li>The header and trailer node <strong>will never be changed</strong>;</li><li>Treat <strong>all insertion and deletion in unified manners</strong>, since every element is guaranteed to be store in node <strong>with nodes as neighbors on both sides</strong>.</li></ul><hr><h2 id="4-2-Inserting-in-Doubly-Linked-List"><a href="#4-2-Inserting-in-Doubly-Linked-List" class="headerlink" title="4.2 Inserting in Doubly Linked List"></a>4.2 Inserting in Doubly Linked List</h2><p>Insert <code>x</code> between <code>a</code> and <code>b</code> node:</p><ol><li>Create a new node as <code>x</code>;</li><li>Set the <code>next</code> field of <code>x</code> to point to node <code>b</code>, set the <code>prev</code> field of <code>x</code> to point to node <code>a</code> (step b);</li><li>Set the <code>next</code> field of <code>a</code> to point to node <code>x</code>, set the <code>prev</code> field of <code>b</code> to point to node <code>x</code> (step c);</li></ol><p><img src="/2022/05/08/linked-list-introduction/15.png" alt="Inserting in Doubly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBetween</span><span class="hljs-params">(E data, Node&lt;E&gt; prev, Node&lt;E&gt; next)</span> &#123;<br>    Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(data);<br>    <br>    <span class="hljs-comment">// Step 2</span><br>    newNode.setPrev(prev);<br>    newNode.setNext(next);<br><br>    <span class="hljs-comment">// Step 3</span><br>    prev.setNext(newNode);<br>    next.setPrev(newNode);<br><br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-3-Deleting-in-Doubly-Linked-List"><a href="#4-3-Deleting-in-Doubly-Linked-List" class="headerlink" title="4.3 Deleting in Doubly Linked List"></a>4.3 Deleting in Doubly Linked List</h2><p>Simply idea:</p><blockquote><p>The two neighbors of the node to be deleted are linked directly to each other, thereby bypassing the original node.</p></blockquote><ol><li>Set the <code>next</code> of <strong><em>the <code>prev</code> node of deleted node</em></strong> to point to <strong><em>the deleted node’s <code>next</code> node</em></strong>;</li><li>Set the <code>prev</code> of <strong><em>the <code>next</code> node of deleted node</em></strong> to point to <strong><em>the deleted node’s <code>prev</code> node</em></strong>;</li></ol><ul><li>In the following example, the neighbors of the node 3, which are node 2 and 4, are linked directly to each other, so node 3 is skipped when traversing the list, seems that the node 3 is deleted.</li></ul><p><img src="/2022/05/08/linked-list-introduction/16.png" alt="Deleting in Doubly Linked List"></p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(Node&lt;E&gt; node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    node.getPrev().setNext(node.getNext()); <span class="hljs-comment">// Step 1</span><br>    node.getNext().setPrev(node.getPrev()); <span class="hljs-comment">// Step 2</span><br>    size--;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-4-Implementation-of-the-Doubly-Linked-List-Class"><a href="#4-4-Implementation-of-the-Doubly-Linked-List-Class" class="headerlink" title="4.4 Implementation of the Doubly Linked List Class"></a>4.4 Implementation of the Doubly Linked List Class</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedList</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; header;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; trailer;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">// constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>        trailer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>        header.setNext(trailer);<br>        trailer.setPrev(header);<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> header.getNext();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> trailer.getPrev();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        Node&lt;E&gt; current = <span class="hljs-built_in">this</span>.getHead();<br>        <span class="hljs-keyword">while</span> (current != trailer) &#123;<br>            sb.append(current.getData() + <span class="hljs-string">&quot; &quot;</span>);<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-comment">// Get a node at an index</span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; current = <span class="hljs-built_in">this</span>.getHead();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            current = current.getNext();<br>        &#125;<br>        <span class="hljs-keyword">return</span> current;<br>    &#125;<br><br>    <span class="hljs-comment">// Add a node between two nodes</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBetween</span><span class="hljs-params">(E data, Node&lt;E&gt; prev, Node&lt;E&gt; next)</span> &#123;<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(data);<br>        newNode.setPrev(prev);<br>        newNode.setNext(next);<br>        prev.setNext(newNode);<br>        next.setPrev(newNode);<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// Add a node at the head of list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(E data)</span> &#123;<br>        addBetween(data, header, header.getNext());<br>    &#125;<br><br>    <span class="hljs-comment">// Add a node at the tail of list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(E data)</span> &#123;<br>        addBetween(data, trailer.getPrev(), trailer);<br>    &#125;<br><br>    <span class="hljs-comment">// Add a node at an index of list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(E data, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addAtHead(data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123;<br>            addAtTail(data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; prev = getAtIndex(index - <span class="hljs-number">1</span>);<br>            addBetween(data, prev, prev.getNext());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Remove a special node</span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(Node&lt;E&gt; node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        node.getPrev().setNext(node.getNext());<br>        node.getNext().setPrev(node.getPrev());<br>        size--;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">// Remove the head node</span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">deleteAtHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> delete(header.getNext());<br>    &#125;<br><br>    <span class="hljs-comment">// Remove the tail node </span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">deleteAtTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> delete(trailer.getPrev());<br>    &#125;<br><br>    <span class="hljs-comment">// Remove a node at an index</span><br>    <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> deleteAtHead();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> deleteAtTail();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; prev = getAtIndex(index - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> delete(prev.getNext());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Node class</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        <span class="hljs-keyword">private</span> E data;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; prev;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>            data = <span class="hljs-literal">null</span>;<br>            next = <span class="hljs-literal">null</span>;<br>            prev = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            next = <span class="hljs-literal">null</span>;<br>            prev = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E data, Node&lt;E&gt; prev, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>            <span class="hljs-built_in">this</span>.next = next;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(E data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getPrev</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrev</span><span class="hljs-params">(Node&lt;E&gt; prev)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;E&gt; <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="Linked-List-Problem-Set"><a href="#Linked-List-Problem-Set" class="headerlink" title="Linked List Problem Set"></a>Linked List Problem Set</h1><p>Refer to <a href="https://ultrafish.cn/2022/03/08/linked-list-problems/">Linked List Problems</a></p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Goodrich, M., Tamassia, R., &amp; O’reilly, A. (2014). <em>Data Structures and Algorithms in Java, 6th Edition.</em> John Wiley &amp; Sons.<br><a href="https://leetcode.com/explore/learn/card/linked-list/">Linked List - Explore - LeetCode</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Linked List 相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Data Structure</category>
      
      <category>Linked List</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Linked List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Computer Systems Course Note</title>
    <link href="/2022/04/30/introduction-to-computer-systems-course-note/"/>
    <url>/2022/04/30/introduction-to-computer-systems-course-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p>Course note of <strong>COMP1411 Introduction to Computer Systems</strong>, The Hong Kong Polytechnic University, 2022.</p><p>Mainly focus on</p><ul><li>Data representation</li><li>Machine language</li><li>Processor architecture</li><li>Memory hierarchy</li><li>Virtual memory</li><li>System-level I/O</li><li>Networking</li></ul><span id="more"></span><hr><h1 id="1-Data-representation-I"><a href="#1-Data-representation-I" class="headerlink" title="1 Data representation I"></a>1 Data representation I</h1><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/3.png" width="60%" height="60%"></center><p>Use C code to get the size of a data type:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1-Unsigned-amp-Signed-Integer"><a href="#1-1-Unsigned-amp-Signed-Integer" class="headerlink" title="1.1 Unsigned &amp; Signed Integer"></a>1.1 Unsigned &amp; Signed Integer</h2><blockquote><p>binary: 8 bits $\to$ 1 byte, not convenient to represent;<br>hexadecimal: 2 bits $\to$ 1 byte, easy to represent.</p></blockquote><h3 id="1-1-1-Bit-Level-Operations-in-C"><a href="#1-1-1-Bit-Level-Operations-in-C" class="headerlink" title="1.1.1 Bit-Level Operations in C"></a>1.1.1 Bit-Level Operations in C</h3><blockquote><p>Use logic expression on <strong>single bit</strong>, <code>True</code> as 1  and  <code>False</code> as 0;<br>Apply to any “integral” data type: <code>long</code>, <code>int</code>, <code>short</code>, <code>char</code>, <code>unsigned</code>, applied <strong>bit-wise</strong>;<br>Return any value;</p></blockquote><ul><li><code>&amp;</code>: AND (Intersection in Set)</li><li><code>|</code>: OR (Union in Set)</li><li><code>~</code>: NOT (Complement in Set)</li><li><code>^</code>: Exclusive-OR (Symmetric difference in Set)</li></ul><hr><h3 id="1-1-2-Logic-Operations-in-C"><a href="#1-1-2-Logic-Operations-in-C" class="headerlink" title="1.1.2 Logic Operations in C"></a>1.1.2 Logic Operations in C</h3><blockquote><p><code>True</code> as <strong>nonzero</strong> and  <code>False</code> as 0;<br>Always return 0 or 1.</p></blockquote><ul><li><code>&amp;&amp;</code>: Logic AND;</li><li><code>||</code>: Logic OR;</li><li><code>!</code>: Logic NOT.</li></ul><hr><h3 id="1-1-3-Shift-Operations"><a href="#1-1-3-Shift-Operations" class="headerlink" title="1.1.3 Shift Operations"></a>1.1.3 Shift Operations</h3><ul><li>Left Shift <code>x &lt;&lt; y</code><ul><li>Shift bit-vector x left y positions</li><li>Left: Throw away;</li><li>Right: Fill with 0’s.</li></ul></li><li>Right Shift <code>x &gt;&gt; y</code><ul><li>Shift bit-vector x right y positions</li><li>Right: Throw away;</li><li>Left:<ul><li><strong>Logical shift</strong>: Fill with 0’s;</li><li><strong>Arithmetic shift</strong>: Fill with <strong>most significant bit</strong></li></ul></li></ul></li></ul><hr><h3 id="1-1-4-Encoding-Integer"><a href="#1-1-4-Encoding-Integer" class="headerlink" title="1.1.4 Encoding Integer"></a>1.1.4 Encoding Integer</h3><ul><li><strong>Unsigned</strong></li></ul><script type="math/tex; mode=display">B2U(X)=\sum^{w-1}_{i=0}x_i\cdot2^i</script><ul><li><strong>Two’s Complement</strong></li></ul><script type="math/tex; mode=display">B2T(X)=-x_{w-1}\cdot2^{w-1}+\sum^{w-2}_{i=0}x_i\cdot2^i</script><hr><h3 id="1-1-5-Range"><a href="#1-1-5-Range" class="headerlink" title="1.1.5 Range"></a>1.1.5 Range</h3><ul><li><strong>Unsigned</strong><ul><li>$UMin = 0$;</li><li>$UMax = 2^w-1$;</li></ul></li><li><strong>Two’s Complement</strong><ul><li>$TMax = 2^{w-1}-1$</li><li>$TMin = -2^{w-1}$;</li></ul></li></ul><p>$|TMin|=TMax+1$ (Asymmetric Range for Two’s Complement)</p><p>$UMax = 2\times TMax+1$</p><p>$UMax=T2U(-1)$</p><p>$U2T(2^{w-1})=U2T(TMax+1)=TMin$</p><p>$T2U(TMin)=TMax+1$</p><hr><h2 id="1-2-Conversion-amp-Casting"><a href="#1-2-Conversion-amp-Casting" class="headerlink" title="1.2 Conversion &amp; Casting"></a>1.2 Conversion &amp; Casting</h2><p><strong>Conversion</strong>:</p><script type="math/tex; mode=display">T2U(X)= \begin{cases}    x+2^w, &\text{$x$ $\lt$ 0} \\    x, &\text{$x$ $\ge$ 0}\end{cases} =x+x_{w-1}2^w \\ TMin \le x \le TMax</script><script type="math/tex; mode=display">U2T(U)= \begin{cases}    u, &\text{$u$ $\le$ TMax} \\    u-2^w, &\text{$u$ $\gt$ TMax}\end{cases} =u-u_{w-1}2^w \\0\le u \le UMax</script><ul><li>By <strong>default</strong>: <strong>signed</strong> integers;</li><li>suffix <code>U</code>: Unsigned;</li></ul><hr><blockquote><p>A <strong>mix of unsigned and signed</strong> in single expression:<br><strong>signed values implicitly cast to unsigned</strong></p></blockquote><p><strong>[Example]</strong><br><img src="/2022/04/30/introduction-to-computer-systems-course-note/1.png" alt="Effects of C promotion rules - CS:APP"></p><p><strong>Casting</strong>:</p><ul><li>Truncating of <strong>unsigned</strong> number:<ul><li>$x$: the original number <strong>w-bit</strong>; $x’$: the result of truncaing of $x$ to k-bit:</li><li><script type="math/tex; mode=display">x'=x\;mod\;2^k</script></li></ul></li><li>Truncating of <strong>two’s complement</strong> number:<ul><li>$x$: the original number <strong>w-bit</strong>; $x’$: the result of truncaing of $x$ to k-bit:</li><li><script type="math/tex; mode=display">x'=U2T_k(x\;mod\;2^k)</script></li></ul></li></ul><hr><h2 id="1-3-Addition-amp-Multiplication-amp-Shifting"><a href="#1-3-Addition-amp-Multiplication-amp-Shifting" class="headerlink" title="1.3 Addition &amp; Multiplication &amp; Shifting"></a>1.3 Addition &amp; Multiplication &amp; Shifting</h2><h3 id="1-3-1-Addition"><a href="#1-3-1-Addition" class="headerlink" title="1.3.1 Addition"></a>1.3.1 Addition</h3><ul><li>Unsigned</li></ul><script type="math/tex; mode=display">UAdd_w(u,v)=(u+v)\;mod\;2^w = \begin{cases}    u+v, &\text{$u+v \lt 2^w$ Normal} \\    u+v-2^w, &\text{$2^w\le x \lt 2^{w+1}$ Overflow}\end{cases}</script><ul><li>Two’s Complement</li></ul><script type="math/tex; mode=display">TAdd_w(u,v)=\begin{cases}    u+v-2^w, &\text{$u+v \ge 2^{w-1}$ Positive Overflow} \\    u+v, &\text{$-2^{w-1} \le u+v \lt 2^{w-1}$ Normal} \\    u+v+2^w, &\text{$x \lt -2^{w-1}$ Negative Overflow}\end{cases}</script><hr><h3 id="1-3-2-Multiplication"><a href="#1-3-2-Multiplication" class="headerlink" title="1.3.2 Multiplication"></a>1.3.2 Multiplication</h3><ul><li>Unsigned</li></ul><script type="math/tex; mode=display">UMult_w(u,v)=(u\cdot v)\;mod\;2^w</script><ul><li>Two’s Complement</li></ul><script type="math/tex; mode=display">TMult_w(u,v)=U2T[(u\cdot v)\;mod\;2^w]</script><hr><h3 id="1-3-3-Shift-with-Power-of-2"><a href="#1-3-3-Shift-with-Power-of-2" class="headerlink" title="1.3.3 Shift with Power-of-2"></a>1.3.3 Shift with Power-of-2</h3><ul><li>Unsigned and Signed shift for <strong>Multiplication</strong> with Power-of-2 <script type="math/tex; mode=display">u<<k==u\times2^k</script></li></ul><blockquote><p>Most machines shift and add faster than multiply.</p></blockquote><p>$x <em> K$:<br>Convert the constant <code>K</code> in binary, consider a run of <strong>ones</strong> from bit position $n$ down to bit position $m$ ($n\ge m$), $x </em> K$ can be represented in:</p><p>$(x&lt;&lt;n)+(x&lt;&lt;(n-1))+…+(x&lt;&lt;m)$, or<br>$(x&lt;&lt;(n+1))-(x&lt;&lt;m)$</p><ul><li>Unsigned shift for <strong>Quotient</strong> with Power-of-2 </li></ul><script type="math/tex; mode=display">u>>k==\lfloor u/2^k\rfloor</script><hr><h2 id="1-4-Memory-amp-Pointers-amp-Strings-Representations"><a href="#1-4-Memory-amp-Pointers-amp-Strings-Representations" class="headerlink" title="1.4 Memory &amp; Pointers &amp; Strings Representations"></a>1.4 Memory &amp; Pointers &amp; Strings Representations</h2><h3 id="1-4-1-Memory"><a href="#1-4-1-Memory" class="headerlink" title="1.4.1 Memory"></a>1.4.1 Memory</h3><ul><li>Programs refer to data by <strong>address</strong>;</li><li>Each byte has a address;</li><li>Word Size: how many data can be transferred in the I/O BUS at a clock time;</li></ul><hr><h3 id="1-4-2-Byte-Ordering"><a href="#1-4-2-Byte-Ordering" class="headerlink" title="1.4.2 Byte Ordering"></a>1.4.2 Byte Ordering</h3><ul><li>Big Endian:<ul><li><strong>Least</strong> significant byte has <strong>highest</strong> address;</li><li>Sun, PPC Mac, Internet</li></ul></li><li>Little Endian<ul><li><strong>Least</strong> significant byte has <strong>lowest</strong> address;</li><li>x86, ARM processors running Android, iOS, and Windows</li></ul></li></ul><p><strong>[Example]</strong></p><p><img src="/2022/04/30/introduction-to-computer-systems-course-note/2.png" alt="Byte Ordering"></p><hr><h3 id="1-4-3-Pointer"><a href="#1-4-3-Pointer" class="headerlink" title="1.4.3 Pointer"></a>1.4.3 Pointer</h3><ul><li>Size of a pointer: depends on the word-size of a computer<ul><li>size of 4: 32-bit; </li><li>size of 8: 64-bit.</li></ul></li></ul><h3 id="1-4-4-String"><a href="#1-4-4-String" class="headerlink" title="1.4.4 String"></a>1.4.4 String</h3><ul><li>Array of characters;</li><li>Encoded in <strong>ASCII</strong> format;</li><li>String should be <strong>null-terminate</strong>: Final character = 0;</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> S[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;18213&quot;</span>; <span class="hljs-comment">// length is 6;</span><br>[ <span class="hljs-comment">// IA32, Sun</span><br>    <span class="hljs-number">31</span>,<br>    <span class="hljs-number">38</span>,<br>    <span class="hljs-number">32</span>,<br>    <span class="hljs-number">31</span>,<br>    <span class="hljs-number">33</span>,<br>    <span class="hljs-number">00</span> <span class="hljs-comment">// Final character = 0</span><br>]<br></code></pre></td></tr></table></figure><hr><h1 id="2-Data-representation-II"><a href="#2-Data-representation-II" class="headerlink" title="2 Data representation II"></a>2 Data representation II</h1><h2 id="2-1-Fixed-Pointer-Representation"><a href="#2-1-Fixed-Pointer-Representation" class="headerlink" title="2.1 Fixed Pointer Representation"></a>2.1 Fixed Pointer Representation</h2><p>Write a decimal number in binary:</p><script type="math/tex; mode=display">b_ib_{i-1}...b_2b_1.b_{-1}b_{-2...b_{-j}}</script><p>then</p><script type="math/tex; mode=display">b=\sum_{k=-j}^ib_k\times 2^k</script><p>Limitations:</p><blockquote><ol><li>Can only exactly represent numbers of the form $\frac{x}{2^k}$</li><li>Limited range of numbers, can not represent very large and very small numbers, due to the point is <strong>fixed</strong>.</li></ol></blockquote><p>Judge whether a decimal number can be exactly represented:</p><blockquote><p>write into form of $\frac{x}{2^k}$, if can write, YES; if can not, NO;<br>e.g., $0.18=\frac{9}{50}$, not in that form, NO. </p></blockquote><hr><h2 id="2-2-IEEE-754-Floating-Point-Representation"><a href="#2-2-IEEE-754-Floating-Point-Representation" class="headerlink" title="2.2 IEEE 754 Floating Point Representation"></a>2.2 IEEE 754 Floating Point Representation</h2><h3 id="2-2-1-Numerical-Form"><a href="#2-2-1-Numerical-Form" class="headerlink" title="2.2.1 Numerical Form"></a>2.2.1 Numerical Form</h3><script type="math/tex; mode=display">V = (-1)^s\times M\times 2^E</script><blockquote><p>$s$: sign bit, determines positive(0) or negative(1);<br>$M$: significand, fractional value in $[1.0,2.0)$;<br>$E$: exponent, weights value by power of two.</p></blockquote><hr><h3 id="2-2-2-Encoding"><a href="#2-2-2-Encoding" class="headerlink" title="2.2.2 Encoding"></a>2.2.2 Encoding</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/4.png" width="60%" height="60%"></center><blockquote><p>In binary<br>$s$ is the sign bit;<br>$exp$ is the encoded $E$;<br>$frac$ is the encoded $M$</p></blockquote><p><strong>Categories of single-precision floating-point values in IEEE 754:</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/5.png" width="60%" height="60%"></center><hr><h4 id="2-2-2-1-Normalized"><a href="#2-2-2-1-Normalized" class="headerlink" title="2.2.2.1 Normalized"></a>2.2.2.1 Normalized</h4><blockquote><p>The $exp$ is neither all $1$s nor $0$s, $exp\ne 0000\;0000(0)$, $exp\ne 1111\;1111(255)$;</p><p>$s$: 1-bit sign bit<br>$exp$: 8-bit, encode in biased $(2^{k-1}-1)$, $exp=E+127$, $E=exp-127$, $[-126,127]\to [0000\;0001,0111\;1111]$;<br>$f$: 23-bit,encoded with hidden-1, $M=1.f=1.xxx…x_2$.</p></blockquote><hr><h4 id="2-2-2-2-Denormalized"><a href="#2-2-2-2-Denormalized" class="headerlink" title="2.2.2.2 Denormalized"></a>2.2.2.2 Denormalized</h4><blockquote><p>The $exp$ is all $0$s, $exp= 0000\;0000(0)$;</p><p>$s$: 1-bit sign bit<br>$exp$: 8-bit, encode to $0000\;0000$, $E=1-(2^{k-1}-1)$, $E=1-127=-126$;<br>$f$: 23-bit,encoded <strong>without</strong> hidden-1, $M=0.f=0.xxx…x_2$.</p></blockquote><p>With the feature of $exp$ and no hidden-1, the denormalized value can represent <strong>value $0$</strong> and <strong>very close to $0.0$</strong>.</p><blockquote><p>$exp=0000\;0000$, $frac=0000\;0000$: represent $0$;<br>$exp=0000\;0000$, $frac\ne 0000\;0000$: represent values very close to $0$;</p></blockquote><hr><h4 id="2-2-2-3-Special-Values"><a href="#2-2-2-3-Special-Values" class="headerlink" title="2.2.2.3 Special Values"></a>2.2.2.3 Special Values</h4><blockquote><p>The $exp$ is all $1$s, $exp= 1111\;1111(255)$;</p><p>$s$: 1-bit sign bit</p><p>$exp=1111\;1111$, $frac=0000\;0000$: represent $\infin$;<br>$s=0$: $+\infin$,$s=1$: $-\infin$;<br>represent the <strong>overflow</strong> result;</p><p>$exp=1111\;1111$, $frac\ne 0000\;0000$: represent $NaN$ (Not-a-Number);<br>like $\sqrt{-1},\infin-\infin, \infin \times 0$</p></blockquote><hr><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/8.png" width="80%" height="80%"></center><hr><h2 id="2-3-Rounding"><a href="#2-3-Rounding" class="headerlink" title="2.3 Rounding"></a>2.3 Rounding</h2><p><strong>Using the Round-To-Even</strong></p><p>Round to 3 d.p.</p><script type="math/tex; mode=display">1.BBG\;R\;XXX</script><ul><li>$G$: Guard bit, the LSB of rounded result;</li><li>$R$: Round bit, first bit to remove;</li><li>$S$: $S=X|X|X$, Stick bit, OR of remaining bis.</li></ul><blockquote><p>$R\;XXX\lt$ half-way(e.g., 1/2), means $R=0$, then round down;<br>$R\;XXX\gt$ half-way(e.g., 1/2), means $R=1,S=1$, then round up;<br>$R\;XXX=$ half-way(e.g., 1/2), means $R=1,S=0$, then <strong>round to even</strong>:</p><blockquote><p>if $G=1$: round up(+1);<br>if $G=0$: round down;</p></blockquote></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/6.png" width="60%" height="60%"></center><p>Rounding may cause overflow, then use <strong>Postnormalize</strong>:</p><ul><li>Shifting the overflowed value <strong>right</strong> once and <strong>incrementing</strong> the exponent</li></ul><hr><h2 id="2-4-Floating-Point-Operations"><a href="#2-4-Floating-Point-Operations" class="headerlink" title="2.4 Floating Point Operations"></a>2.4 Floating Point Operations</h2><ul><li>First compute the exact result;</li><li>Fix:<ul><li>Possibly <strong>overflow</strong> if exponent too large;</li><li>Possibly <strong>round</strong> to fit into $frac$</li></ul></li></ul><hr><h3 id="2-4-1-Floating-Point-Multiplication"><a href="#2-4-1-Floating-Point-Multiplication" class="headerlink" title="2.4.1 Floating Point Multiplication"></a>2.4.1 Floating Point Multiplication</h3><p>E.g.</p><script type="math/tex; mode=display">(-1)^{s_1} M_12^{E_1}\times(-1)^{s_2} M_22^{E_2}</script><p><strong>Result:</strong><br>$(-1)^{s} M2^{E}$</p><blockquote><p>$s=$ $s_1$^$s_2$ (exclusive-OR)<br>$M=M_1\times M_2$<br>$E=E_1+E_2$</p></blockquote><p><strong>Fix:</strong></p><ul><li>if $M\ge2$, overflow, then <strong>Postnormalize</strong>, shift M right, increment E;</li><li>if $E$ out of range, then the result is <strong>overflow</strong>;</li><li>Round $M$ to fit the precision.</li></ul><p><strong>Note on Mathematical Properties:</strong></p><ul><li>Has <strong>Commutative</strong>;</li><li>No <strong>Associative</strong>, may cause overflow;</li><li>Has <strong>1 is multiplicative identity</strong>;</li><li>No <strong>Distributive</strong>.</li></ul><hr><h3 id="2-4-2-Floating-Point-Addition"><a href="#2-4-2-Floating-Point-Addition" class="headerlink" title="2.4.2 Floating Point Addition"></a>2.4.2 Floating Point Addition</h3><p>E.g.</p><script type="math/tex; mode=display">(-1)^{s_1} M_12^{E_1}+(-1)^{s_2} M_22^{E_2}\\E_1\gt E_2</script><p><strong>Result:</strong><br>$(-1)^{s} M2^{E}$</p><ul><li>First need to get them lined up:<ul><li>increase $E_2$ to equal to $E_1$,</li><li>shift $M_2$ right $E_1-E_2$</li></ul></li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/7.png" width="40%" height="40%"></center><ul><li>$s$ and $M$ depends on the result;</li><li>$E=E_1$</li></ul><p><strong>Fix</strong>:</p><ul><li>if $M\ge2$, overflow, then <strong>Postnormalize</strong>, shift M right, increment E;</li><li>if $M\lt1$, then <strong>Postnormalize</strong>, shift M left, decrement E;</li><li>if $E$ out of range, then the result is <strong>overflow</strong>;</li><li>Round $M$ to fit the precision.</li></ul><p><strong>Note on Mathematical Properties:</strong></p><ul><li>Has <strong>Commutative</strong>;</li><li>No <strong>Associative</strong>, may cause overflow;</li><li>Has <strong>0 is multiplicative identity</strong>;</li><li>Almost <strong>Additive Inverse</strong>(except $\pm \infin$ and $NaN$).</li></ul><hr><h3 id="2-4-3-Float-Point-Comparison"><a href="#2-4-3-Float-Point-Comparison" class="headerlink" title="2.4.3 Float Point Comparison"></a>2.4.3 Float Point Comparison</h3><ul><li>Floating Point 0 = Integer 0</li><li>Must first compare <strong>sign bits</strong>;</li><li>Must consider $−0$ = $0$;</li></ul><hr><h1 id="3-Machine-language"><a href="#3-Machine-language" class="headerlink" title="3 Machine language"></a>3 Machine language</h1><h2 id="3-1-History-of-Intel-processors-and-architectures"><a href="#3-1-History-of-Intel-processors-and-architectures" class="headerlink" title="3.1 History of Intel processors and architectures"></a>3.1 History of Intel processors and architectures</h2><ul><li>Complex instruction set computer (CISC)<br>A single instruction <strong>consists of several lower-level operations</strong>;<ul><li>Data transfer from memory, computation, saving result into register;</li><li>Different memory addressing modes can be used. </li></ul></li></ul><hr><h2 id="3-2-C-assembly-machine-code"><a href="#3-2-C-assembly-machine-code" class="headerlink" title="3.2 C assembly machine code"></a>3.2 C assembly machine code</h2><ul><li><p><strong>Architecture</strong>:</p><ul><li>The parts of a processor design that one needs to understand or write assembly/machine code;</li><li>Specification of the instruction set and registers</li></ul></li><li><p><strong>ISA</strong>:<br>Instruction Set Architecture;</p></li><li><p><strong>Microarchitecture</strong>:<br>Implementation of the architecture</p></li><li><p><strong>Machine Code</strong>:<br>The byte-level programs that a processor executes </p></li><li><p><strong>Assembly Code</strong>:<br>A text representation of <strong>machine code</strong>, more <strong>readable</strong> for human. </p></li><li><p><strong>Turning C into Object Code</strong>:</p></li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/9.png" width="70%" height="70%"></center><ul><li><strong>Size of C Data Types in x86-64</strong>:<center><img src="/2022/04/30/introduction-to-computer-systems-course-note/10.png" width="70%" height="70%"></center></li></ul><hr><h2 id="3-3-Registers-operands-move"><a href="#3-3-Registers-operands-move" class="headerlink" title="3.3 Registers, operands, move"></a>3.3 Registers, operands, move</h2><h3 id="3-3-1-x86-64-Integer-Registers"><a href="#3-3-1-x86-64-Integer-Registers" class="headerlink" title="3.3.1 x86-64 Integer Registers"></a>3.3.1 x86-64 Integer Registers</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/11.png" width="100%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Integer Registers (CS: APP)</div></center><p>x86-64 CPU has a set of 16 64-bit <em>general-purpose register</em>, storing integer data and pointers(addresses):</p><ul><li>Start from <strong>8086</strong>, 8 <strong>16-bit</strong> register (in <font color="#f00"><b>RED</b></font> box): <code>%ax</code>to<code>%bp</code>;</li><li>Then to <strong>IA32</strong>, extended to 8 <strong>32-bit</strong> register (in <font color="#00f"><b>BLUE</b></font> box) :<code>%eax</code>to<code>%ebp</code>; </li><li>Finally to <strong>x86-64</strong>, extended to 8 <strong>64-bit</strong> register (in <strong>BLACK</strong> box): <code>%rax</code>to<code>%rbp</code>, as well as additional new 8 <strong>64-bit</strong> register (in DOT LINE box) :<code>%r8</code>to<code>%r15</code>; </li></ul><p>Different registers have different functions:</p><ul><li><code>%rsp</code> has a <strong>specific</strong> function: <strong>stack pointer</strong>, indicate the end position of run-time stack;</li><li>Other 15 registers have more flexible functions.</li></ul><p>Instructions can operate on <strong>different data size</strong> in <strong>low-order</strong> of the 16 registers:</p><ul><li><strong>8-bit</strong> instruction: can access <strong>least significant 1 byte</strong>;</li><li><strong>16-bit</strong> instruction: can access <strong>least significant 2 byte</strong>;</li><li><strong>32-bit</strong> instruction: can access <strong>least significant 4 byte</strong>;</li><li><strong>64-bit</strong> instruction: can access <strong>entire register</strong>;</li></ul><hr><h3 id="3-3-2-Operand-Types"><a href="#3-3-2-Operand-Types" class="headerlink" title="3.3.2 Operand Types"></a>3.3.2 Operand Types</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/12.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Operand Types (CS: APP)</div></center><p>Three Types:</p><ul><li><strong>Immediate</strong>: <ul><li>constant <strong>value</strong>, started with <code>$</code>, followed by a integer in standard C notation;</li></ul></li><li><strong>Register</strong>: <ul><li><strong>contents of a register</strong>, each bit length of instruction has its specific among of bits (e.g., 8-byte register:64 bits);</li><li>Notation $r_a$ indicates the <strong>register $a$</strong> and <strong>its value in reference $R[r_a]$</strong> indexed by the register identifiers in an array $R$;</li></ul></li><li><strong>Memory</strong>:<ul><li>Access memory location based on the computed address - <strong><em>effective address</em></strong>;</li><li>$M_b[Addr]$: reference to the $b$-byte value in memory <strong><em>starting</em></strong> at address $Addr$;</li><li>$Imm(r_b,r_i,s)$: the most general form:<ul><li>$Imm$: <strong>immediate offset</strong>;</li><li>$r_b$: <strong>base register</strong>, 64-bit (like the start of array);</li><li>$r_i$: <strong>index register</strong>, 64-bit (the index of the array);</li><li>$s$: <strong>scale factor</strong>, must be <strong>1,2,4, or 8</strong> (fix to the data length);</li><li><strong><em>effective address</em></strong> $=Imm+R[r_b]+R[r_i]\cdot s$;</li><li>The value is $M[Imm+R[r_b]+R[r_i]\cdot s]$;</li></ul></li><li>These complex addressing modes useful in <strong>Array and structure elements referencing</strong>.</li><li><strong>Simple Memory Addressing Modes</strong>:<ul><li><strong>Normal</strong>: $(R)\to Mem[Reg[R]]$, Register $R$ specifies memory address, <strong>Pointer</strong> dereferencing in C;<br><code>movq (%rcx),%rax</code></li><li><strong>Displacement</strong>: $D(R)\to Mem[Reg[R]+D]$, Register $R$ specifies start of memory region;<br><code>movq 8(%rbp),%rdx</code></li></ul></li></ul></li></ul><hr><h3 id="3-3-3-Moving-Data"><a href="#3-3-3-Moving-Data" class="headerlink" title="3.3.3 Moving Data"></a>3.3.3 Moving Data</h3><blockquote><p>Copy data from a <strong>source</strong> location to a <strong>destination</strong> location, <strong>without transformation</strong>. </p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/13.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Moving Data (CS: APP)</div></center><p>Source(S):</p><ul><li>value of <strong>immediate</strong>;</li><li>value in <strong>register</strong>;</li><li>value in <strong>memory</strong>.</li></ul><p>Destination(D):</p><ul><li><strong>register</strong>;</li><li><strong>memory address</strong>.</li></ul><blockquote><p>Copy from a memory to another memory:<br><strong>Can not directly copy</strong>, first load the memory value to a <strong>register</strong>, then write the register value to the destination memory.</p></blockquote><p>For register operand:</p><ul><li>The size of the <strong>register</strong> must match the <strong>last</strong> character of the instruction(<code>b</code>,<code>w</code>,<code>l</code>,<code>q</code>);</li><li>The <code>MOV</code> instruction will only update the specific byte indicated by the destination operand,<br>Except the <code>movl</code> instruction with the register destination, it will set high-order 4-byte to 0. (For the convention in x86-64 from 64-bit to 32-bit to adopt)</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/14.png" width="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">movq Operand Combinations</div></center><hr><h2 id="3-4-Arithmetic-amp-logical-operations"><a href="#3-4-Arithmetic-amp-logical-operations" class="headerlink" title="3.4 Arithmetic &amp; logical operations"></a>3.4 Arithmetic &amp; logical operations</h2><h3 id="3-4-1-Two-Operand-Instructions"><a href="#3-4-1-Two-Operand-Instructions" class="headerlink" title="3.4.1 Two Operand Instructions"></a>3.4.1 Two Operand Instructions</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/15.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Two Operand Instructions (CS: APP)</div></center><ul><li>S: <strong>immediate value</strong>, <strong>register</strong>, <strong>memory location</strong>;</li><li>D: <strong>register</strong>, <strong>memory location</strong>;</li><li>S, D can NOT both be memory;</li><li>Source operand first, Destination second;</li><li><code>Fun S, D</code> —&gt; <code>D = D fun S</code></li><li><code>subq %rax, %rdx</code>: <code>%rdx = %rdx - %rax</code> (Subtract <code>%rax</code> from <code>%rax</code>)</li></ul><hr><p><strong>For Shift Instructions</strong>:</p><p>Source and Destination can be <strong>register</strong> or <strong>memory location</strong>. </p><p>Shift amount (2 ways):</p><ul><li>immediate value: <code>k</code></li><li>single-byte register <code>%cl</code>:<ul><li>based data: <strong>w</strong>-bit (i.e. 8,16,32,64);</li><li>shift amount: value of low-order <strong>m</strong>-bit of <code>%cl</code>, $2^m=w,m=\log_2w$;<ul><li>e.g. 8-bit: lower 3-bit value of <code>%cl</code>;</li><li>64-bit: lower 6-bit value of <code>%cl</code>;</li></ul></li><li>Example: <code>%cl</code> = 0xFF = 1111 1111:<ul><li><code>salb</code>: 8-bit, shift lower 3-bit value = 111 = 7;</li><li><code>salw</code>: 16-bit, shift lower 4-bit value = 1111 = 15;</li></ul></li></ul></li></ul><p>Left Shift:</p><ul><li><code>SAL</code>: <strong>arithmetic</strong> left shift;</li><li><code>SHL</code>: <strong>logical</strong> left shift;</li><li>Same effect, fill right with zero;</li></ul><p>Right Shift:</p><ul><li><code>SAR</code>: <strong>arithmetic</strong> right shift, fill copy of the <strong>sign bits</strong>;</li><li><code>SHR</code>: <strong>logical</strong> right shift, fill left with <strong>zeros</strong>;</li></ul><hr><h3 id="3-4-2-One-Operand-Instructions"><a href="#3-4-2-One-Operand-Instructions" class="headerlink" title="3.4.2 One Operand Instructions"></a>3.4.2 One Operand Instructions</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/16.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Two Operand Instructions (CS: APP)</div></center><p>Unary Instructions:</p><ul><li>Operand can be <strong>register</strong> or <strong>memory location</strong>. </li></ul><hr><h3 id="3-4-3-Address-Computation-Instruction"><a href="#3-4-3-Address-Computation-Instruction" class="headerlink" title="3.4.3 Address Computation Instruction"></a>3.4.3 Address Computation Instruction</h3><p><code>leap</code> <strong>Instructions</strong>:</p><ul><li><strong><em>load effective address</em></strong> instruction;</li><li>read memory address to a register;</li><li><strong>NO access to the memory, just load the address</strong>;</li><li>$\&amp;S$: C address operator, like a pointer;</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/17.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of leap Instructions (CS: APP)</div></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/18.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of leap Instructions (CS: APP)</div></center><hr><p><strong>Important Usage</strong>:</p><ul><li>Computing addresses without a memory reference;</li><li><strong>Computing arithmetic expressions of the form $x + k\times y,k=1,2,4,8$</strong>:</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/19.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Computing arithmetic expressions (CS: APP)</div></center><hr><h2 id="3-5-Conditional-Codes"><a href="#3-5-Conditional-Codes" class="headerlink" title="3.5 Conditional Codes"></a>3.5 Conditional Codes</h2><blockquote><p>Condition Codes(CC): Describe <strong>attributes</strong> of the <strong>most recent</strong> arithmetic or logic operation. </p></blockquote><ul><li><code>CF</code>: <strong>Carry Flag</strong>, the <strong>carry out</strong> of the MSB, to detect <strong>overflow for unsigned operations</strong>;</li><li><code>ZF</code>: <strong>Zero Flag</strong>, Yielding <strong>zero</strong>;</li><li><code>SF</code>: <strong>Sign Flag</strong>, Yielding a <strong>negative value</strong>;</li><li><code>OF</code>: <strong>Overflow Flag</strong>, <strong>overflow due to two’s complement</strong>, negative or positive. </li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/20.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (CS: APP)</div></center><p>In above <strong>Integer arithmetic operations</strong>:</p><ul><li>For <code>leaq</code>: do not update to CC, only compute the address;</li><li>For others: causes the CC to be set,<ul><li>For <strong>logical operations</strong> (e.g. <code>XOR</code>), <code>CF</code> and <code>OF</code> set to <strong>0</strong>;</li><li>For <strong>shift operations</strong>,<code>CF</code> set to the <strong>last bit shifted out</strong>; <code>OF</code> set to <strong>0</strong>;</li><li>For <code>INC</code> and <code>DEC</code>: <code>OF</code> and <code>ZF</code> will be set, NO change to <code>CF</code>. </li></ul></li></ul><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/21.png" width="70%"></center><hr><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/22.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Comparison and test instructions (CS: APP)</div></center><blockquote><p><code>CMP</code> and <code>TEST</code> set CC <strong>without changing any other registers</strong>:</p></blockquote><p><code>CMP</code>:</p><ul><li>Set CC based on the <strong>difference</strong>;</li><li>Same as <code>SUB</code>, without changing the destination;</li><li><code>CMP S1, S2</code>: <strong><code>S2-S1</code></strong>, in <strong>reverse</strong> order;</li><li><code>ZF</code>: <strong>0</strong> means two operands are <strong>equal</strong>;</li><li>Other flags: the ordering relation between them;</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/23.png" width="70%"></center><hr><p><code>TEST</code>:</p><ul><li>Same as <code>AND</code>, without changing the destination;</li><li>Two <strong>same operands</strong>: to detect whether it is <strong>negative, zero or positive</strong>;</li><li><strong>Marked operand</strong>: to detect some <strong>specific</strong> bits.</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/24.png" width="70%"></center><hr><h3 id="3-5-1-Reading-Conditional-Codes"><a href="#3-5-1-Reading-Conditional-Codes" class="headerlink" title="3.5.1 Reading Conditional Codes"></a>3.5.1 Reading Conditional Codes</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/25.png" width="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">The SET instructions (CS: APP)</div></center><p>Using the CC:</p><ul><li>Set <strong>single bit</strong> to 0 or 1 based on the combinations of the CC;</li><li>Conditionally jump;</li><li>Conditionally transfer data. </li></ul><p>For the first case, the SET instructions:</p><ul><li><strong>Destination</strong>: low-order <strong>single-byte</strong> register, or single-byte memory location;<ul><li>Will <strong>not alter the remaining bytes</strong>, need to <strong>clear upper bits</strong> to 0, using e.g. <code>movzbl</code>. </li></ul></li></ul><p><strong>[Example]</strong><br>For <code>a &lt; b</code> expression in C:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/26.png" width="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of the SET instructions (CS: APP)</div></center><hr><h2 id="3-6-Conditional-Branches"><a href="#3-6-Conditional-Branches" class="headerlink" title="3.6 Conditional Branches"></a>3.6 Conditional Branches</h2><p><strong>Jumping</strong>:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/27.png" width="70%"></center><p><strong>Goto</strong> Code:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/28.png" width="70%"></center><p><strong>General Conditional Expression</strong>:<br><code>val = Test? Then_Expr : Else_Expr;</code></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/29.png" width="60%"></center><hr><p><strong>Conditional Move</strong> Branches:</p><blockquote><p>All <code>Then_Expr</code> and <code>Else_Expr</code> will be executed, not required jump to save time. </p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/30.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/31.png" width="60%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/32.png" width="70%"></center><hr><p><strong>Bad Cases</strong> for Conditional Move:</p><ul><li><p>Expensive Computations</p><ul><li><code>val = Test(x) ? Hard1(x) : Hard2(x);</code></li><li>Both function need to be executed;</li><li>Only use it when computations are very simple;</li></ul></li><li><p>Risky Computation</p><ul><li><code>val = p ? *p : 0;</code></li><li>Both value get computed;</li><li>May be <code>*0</code>, null pointer, error!</li><li>May have undesirable effect. </li></ul></li><li><p>With side effects</p><ul><li><code>val = x &gt; 0 ? x*=7 : x+= 3;</code></li><li>Both value get computed;</li><li>Same variable got change;</li><li>MUST be side-effect free!</li></ul></li></ul><hr><h2 id="3-6-Loops"><a href="#3-6-Loops" class="headerlink" title="3.6 Loops"></a>3.6 Loops</h2><h3 id="3-6-1-Do-while-Loop"><a href="#3-6-1-Do-while-Loop" class="headerlink" title="3.6.1 Do-while Loop"></a>3.6.1 Do-while Loop</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/33.png" width="70%"></center><hr><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/34.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/35.png" width="70%"></center><hr><h3 id="3-6-2-While-Loop"><a href="#3-6-2-While-Loop" class="headerlink" title="3.6.2 While Loop"></a>3.6.2 While Loop</h3><ul><li><strong>Jump-to-middle</strong> Translation</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/36.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/37.png" width="70%"></center><p><strong>Jump to the test at very beginning, then jump to the middle for body.</strong></p><hr><ul><li><strong>Do-while</strong> translation</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/38.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/39.png" width="70%"></center><hr><h3 id="3-6-3-For-Loop"><a href="#3-6-3-For-Loop" class="headerlink" title="3.6.3 For Loop"></a>3.6.3 For Loop</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/40.png" width="70%"></center><p>For-while conversion:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/41.png" width="70%"></center><p>For to Do-while conversion:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/42.png" width="70%"></center><hr><h2 id="3-7-Switch-Statement"><a href="#3-7-Switch-Statement" class="headerlink" title="3.7 Switch Statement"></a>3.7 Switch Statement</h2><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/43.png" width="70%"></center><ul><li><strong>Check the range of</strong> <code>x</code>:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/44.png" width="70%"></center><ul><li>Take the jump table as a <strong>Array</strong>, using indirect jump to assess memory jump target:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/45.png" width="70%"></center><ul><li><code>jmp</code>: unconditionally jump, <strong>direct</strong> and <strong>indirect</strong> jump:<ul><li><strong>direct</strong> jump: jump target encoded in the instruction, giving the <strong>target label</strong>, e.g.<ul><li><code>jmp .L1</code>;</li></ul></li><li><strong>indirect</strong> jump: jump target read from <strong>register or memory address</strong>, using <code>*</code> following by an operand specifier, e.g.,<ul><li><code>jmp *%rax</code>: <strong>register</strong> jump target;</li><li><code>jmp *(%rax)</code>: <strong>memory</strong> location target;</li></ul></li></ul></li></ul><hr><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/46.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/47.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/48.png" width="70%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/49.png" width="70%"></center><hr><h1 id="4-Processor-Architecture"><a href="#4-Processor-Architecture" class="headerlink" title="4 Processor Architecture"></a>4 Processor Architecture</h1><h2 id="4-1-Instruction-Set-Architecture"><a href="#4-1-Instruction-Set-Architecture" class="headerlink" title="4.1 Instruction Set Architecture"></a>4.1 Instruction Set Architecture</h2><p><strong>Y86-64 programmer-visible state</strong></p><blockquote><p>The programmer can <strong>access and modify</strong> these processor state.<br>Similar to x86-64, but <strong>more simpler and less compact</strong>.<br><!-- more --></p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/51.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 programmer-visible state(CS: APP)</div></center><blockquote><p>Comparing with the <strong>register</strong> part of x86-64:</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/52.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Integer registers(CS: APP)</div></center><hr><p><strong>Y86-64 Program Registers</strong></p><ul><li><strong>15</strong> Program Resister;</li><li>No <code>%r15</code>, to simplify the encoding;</li><li><strong>64-bit</strong> word, <strong>8 words</strong>;</li><li><code>%rsp</code> for Stack Pointer, NO fixed meaning or value for others.</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/53.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 Program Registers(CS: APP)</div></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/86.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 program register identifiers(CS: APP)</div></center><hr><p><strong>Condition Codes</strong></p><ul><li><strong>CC</strong>: Condition Code;</li><li>3 <strong>single-bit</strong> codes;</li><li><strong>ZF</strong>, <strong>SF</strong>, <strong>OF</strong>;</li><li><strong>ZF</strong>: Zero Flag. The most recent operation yielded <strong>zero</strong>.</li><li><strong>SF</strong>: Sign Flag. The most recent operation yielded a <strong>negative value</strong>.</li><li><strong>OF</strong>: Overflow Flag. The most recent operation caused a <strong>two’s-complement overflow</strong>—either negative or positive.</li></ul><hr><p><strong>Program Counter</strong></p><ul><li><strong>PC</strong>: Program Counter;</li><li>Store the address of currently executing instruction.</li></ul><hr><p><strong>Memory</strong></p><ul><li>Virtual memory;</li><li>In the Operand forms, only represented in <strong>base</strong> and <strong>displacement</strong>, NO index and scale in x86-64.</li></ul><hr><p><strong>Program State</strong></p><ul><li><strong>Stat</strong>: Program State;</li><li>The overall state of program execution;</li><li><strong>Normal operation</strong> or <strong>exception</strong>.</li></ul><hr><p><strong>Y86-64 Instructions</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/50.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 Instructions Set(CS: APP)</div></center><ul><li>A <strong>subset</strong> of x86-64 instruction set;</li><li><strong>8-byte</strong> integer operations;</li><li><strong>fewer</strong> address modes;</li><li><strong>smaller</strong> set of operations;</li><li>Each instruction set including:<ul><li>1-byte <strong><em>instruction specifier</em></strong> (e.g., <code>0|0</code> for <code>halt</code>), including(<code>op|fn</code>):<ul><li>4-bit <strong>operation code(<code>op</code>)</strong> and, </li><li>4-bit <strong>function code(<code>fn</code>)</strong> to specify a particular function ;</li></ul></li><li>(possibly) 1-byte <strong><em>register specifier</em></strong> (e.g., <code>rA|rB</code>, <code>F|rB</code>);</li><li>(possibly) 8-byte <strong><em>constant word</em></strong> (e.g., <code>V</code>, <code>D</code>, <code>Dest</code>);</li></ul></li><li>4 types of instruction: <strong>1-byte, 2-byte, 9-byte, and 10-byte instruction</strong>;<ul><li>1-byte: <code>halt</code>, <code>nop</code>, <code>ret</code> (only <strong><em>instruction specifier</em></strong>);</li><li>2-byte: <code>rrmovq rA, rB</code>, <code>OPq rA, rB</code>, <code>cmovXX rA, rB</code>, <code>pushq rA</code>, <code>popq rA</code> (only <strong><em>instruction specifier</em></strong> + <strong><em>register specifier</em></strong>);</li><li>9-byte: <code>jXX Dest</code>, <code>call Dest</code> (only <strong><em>instruction specifier</em></strong> + <strong><em>constant word</em></strong>);</li><li>10-byte: <code>irmovq V, D(rB)</code>, <code>rmmovq rA, D(rB)</code>, <code>mrmovq D(rB), rA</code> (<strong><em>instruction specifier</em></strong> + <strong><em>register specifier</em></strong> + <strong><em>constant word</em></strong>);</li></ul></li><li>Encoded in <strong>hexadecimal</strong> value.</li></ul><hr><p><strong><code>movq</code> Instructions</strong>:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/55.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 movq instructions(CS: APP)</div></center><ul><li>subset of x86-64 movq instruction set;</li><li>Indicating the movement: <strong>source</strong> $\to$ <strong>destination</strong>;<ul><li><strong>Source</strong>: <em>first character</em> - immediate(<code>i</code>), register(<code>r</code>), memory(<code>m</code>);</li><li><strong>Destination</strong>: <em>second character</em> - register(<code>r</code>), memory(<code>m</code>);</li></ul></li><li>NO <strong>memory(<code>m</code>)</strong> location $\rightarrow$ another <strong>memory(<code>m</code>)</strong> location;</li><li>NO <strong>immediate(<code>i</code>)</strong> data $\rightarrow$ <strong>memory(<code>m</code>)</strong>;</li></ul><blockquote><p>The movement is from the <strong>first argument</strong> to the <strong>second argument</strong>, usually <code>rA(V)</code> $\to$ <code>rB</code>,<br>except <code>mrmovq D(rB), rA</code>, which is <code>rB</code> $\to$ <code>rA</code></p></blockquote><ul><li><p>The <strong>immediate value(<code>V</code>)</strong> and <strong>displacement(<code>D</code>)</strong> is <strong>8-byte</strong> constant word.</p></li><li><p>memory reference: only <strong>base</strong> and <strong>displacement</strong>(e.g., <code>D(rB)</code>, <code>rB</code> for <strong>base</strong>, <code>D</code> for <strong>displacement</strong>), NO second index register or scale;</p></li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/56.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Operand forms(CS: APP) (Y86-64's in red box)</div></center><hr><p><strong><code>OPq</code> Integer Operation Instructions</strong>:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/58.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 OPq instructions(CS: APP)</div></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/57.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Integer arithmetic operations(CS: APP) (Y86-64's in red box)</div></center><ul><li>subset of x86-64 Integer arithmetic operations;</li><li>2-byte instruction;</li><li>4 instructions: <code>addq</code>, <code>subq</code>, <code>andq</code>, <code>xorq</code>;</li><li><strong>Only operate on register data</strong>, NOT on memory data;</li><li>Sets 3 conditional code <code>ZF</code>, <code>SF</code>, and <code>OF</code>.</li><li>Function code for <code>fn</code>:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/59.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function codes for Y86-64 instruction set(CS: APP)(Operation part)</div></center><hr><h2 id="4-2-Logic-Design"><a href="#4-2-Logic-Design" class="headerlink" title="4.2 Logic Design"></a>4.2 Logic Design</h2><h3 id="4-2-1-Logic-Gates"><a href="#4-2-1-Logic-Gates" class="headerlink" title="4.2.1 Logic Gates"></a>4.2.1 Logic Gates</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/60.png" width="80%" height="80%"></center><ul><li>With some delay</li></ul><hr><h3 id="4-2-2-Bit-Equality"><a href="#4-2-2-Bit-Equality" class="headerlink" title="4.2.2 Bit Equality"></a>4.2.2 Bit Equality</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/61.png" width="80%" height="80%"></center><ul><li><code>bool eq = (a&amp;&amp;b)||(!a&amp;&amp;!b)</code></li><li>Generate 1 if a and b are equal;</li></ul><p><strong>Word Equality (64-bit)</strong>:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/62.png" width="80%" height="80%"></center><hr><h3 id="4-2-3-Word-Multiplexor"><a href="#4-2-3-Word-Multiplexor" class="headerlink" title="4.2.3 Word Multiplexor"></a>4.2.3 Word Multiplexor</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/63.png" width="80%" height="80%"></center><ul><li>Select input word <code>A</code> or <code>B</code> depending on control signal <code>s</code>;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs hcl">int Out = [<br>  s : A;<br>  1 : B;<br>]<br></code></pre></td></tr></table></figure><hr><h3 id="4-2-4-Arithmetic-Logic-Unit"><a href="#4-2-4-Arithmetic-Logic-Unit" class="headerlink" title="4.2.4 Arithmetic Logic Unit"></a>4.2.4 Arithmetic Logic Unit</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/64.png" width="80%" height="80%"></center><hr><h2 id="4-3-SEQ-Stages"><a href="#4-3-SEQ-Stages" class="headerlink" title="4.3 SEQ Stages"></a>4.3 SEQ Stages</h2><p>3 Important Components: <strong>Combinational Logic</strong>, <strong>Storage Elements</strong> and  <strong>Clock</strong>. </p><p>6 stages: Fetch, Decode, Execute, Memory, Write Back, and PC Update.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/65.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Abstract view of SEQ - a sequential implementation(CS: APP)</div></center><h3 id="4-3-1-Fetch"><a href="#4-3-1-Fetch" class="headerlink" title="4.3.1 Fetch"></a>4.3.1 Fetch</h3><ul><li>According to the <strong>PC</strong> as the <strong>RAM address</strong>, read <strong>instruction byte</strong> from memory;</li><li>Read <strong>first two 4-bit(1 Byte) instruction specifier byte</strong>, including the <code>icode</code> and <code>ifun</code>;</li><li>Read the <strong>register specifier byte</strong> - <code>rA</code> and <code>rB</code>;</li><li>Read 8-byte constant word - <code>valC</code>;</li><li>Compute the next instruction address following the current one, <code>valP = PC + len(fetched instruction)</code></li></ul><hr><h3 id="4-3-2-Decode"><a href="#4-3-2-Decode" class="headerlink" title="4.3.2 Decode"></a>4.3.2 Decode</h3><p>Read register value from Register File.</p><ul><li>Read from <code>rA</code>, <code>rB</code>;</li><li>Assign value to <code>valA</code> and <code>valB</code>;</li><li>OR read from <strong>stack pointer</strong> <code>%rsp</code>(e.g., <code>pushq</code>, <code>popq</code>, <code>call</code>, <code>ret</code>).</li></ul><hr><h3 id="4-3-3-Execute"><a href="#4-3-3-Execute" class="headerlink" title="4.3.3 Execute"></a>4.3.3 Execute</h3><ul><li>The ALU(Arithmetic/Logic Unit):<ul><li>Do the <strong>operation</strong> based on the <code>ifun</code>, or</li><li>Compute the <strong>effective memory address</strong>(e.g., base address <code>ADD</code> displacement), or</li><li>Increase or decrease the <strong>stack pointer</strong>.</li></ul></li><li>Assign the result value to <code>valE</code>;</li><li>Set the <code>CC</code> (Condition Code);</li></ul><blockquote><p>For <code>cmovXX</code>(conditional move) and <code>jXX</code>(jump) instruction:<br>This stage will evaluate the <code>CC</code> with <code>ifun</code>(<strong>move condition OR jump condition</strong>);<br>if condition holds, do the move or jump.</p></blockquote><hr><h3 id="4-3-4-Memory"><a href="#4-3-4-Memory" class="headerlink" title="4.3.4 Memory"></a>4.3.4 Memory</h3><ul><li>8-byte;</li><li>Write data into memory, usually write into $M_8[valE]$;</li><li>Read data from memory, store in <code>valM</code>.</li></ul><hr><h3 id="4-3-5-Write-Back"><a href="#4-3-5-Write-Back" class="headerlink" title="4.3.5 Write Back"></a>4.3.5 Write Back</h3><ul><li>Write the data back to <strong>register</strong> from the <strong>Decode Stage</strong> (e.g., <code>rA</code>, <code>rB</code>, <code>%rsp</code>)</li></ul><hr><h3 id="4-3-6-PC-Update"><a href="#4-3-6-PC-Update" class="headerlink" title="4.3.6 PC Update"></a>4.3.6 PC Update</h3><ul><li>Set <code>PC</code> (Program Counter) to the address of <code>next instruction</code>;</li><li>In Fetch Stage, <code>valP = PC + len(fetched instruction)</code> does not update the value of <code>PC</code>, but in this Stage, assign valP to <code>PC</code> to truly update <code>PC</code>, <code>PC = valP</code>;</li><li>Based on execute result, set <code>PC</code> to <code>valC</code> or <code>valP</code>(e.g., in <code>jXX</code> or <code>cmovXX</code>).</li></ul><hr><p><strong>Executing Arith. / Logical Instruction:</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/66.png" width="80%" height="80%"></center><hr><p><strong>Executing Move Instruction: rmmovq:</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/67.png" width="80%" height="80%"></center><hr><p><strong>Executing Jumps:</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/68.png" width="80%" height="80%"></center><hr><h2 id="4-4-Pipelining"><a href="#4-4-Pipelining" class="headerlink" title="4.4 Pipelining"></a>4.4 Pipelining</h2><p>Unpipelined:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/69.png" width="70%" height="70%"></center><p>Pipelined:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/70.png" width="80%" height="80%"></center><ul><li>Divide combinational logic into parts;</li><li>Begin new instruction as soon as previous one completes one stage;</li><li>Overall latency increases. </li></ul><hr><p><strong>Limitation of the Pipelining</strong>:</p><ul><li>Nonuniform Partitioning:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/71.png" width="80%" height="80%"></center><p>The clock operation rate is limited by the delay of the <strong>slowest (longest)</strong> stage;<br>May cause the waste of the CPU resource.</p><ul><li>Diminishing Returns of Deep Pipelining:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/77.png" width="80%" height="80%"></center><p>Cut the time required by each computation block by two, but we do <strong>not get a doubling of the throughput</strong>, bue to the delay of the pipeline registers.</p><hr><h3 id="4-4-1-Pipeline-Stages"><a href="#4-4-1-Pipeline-Stages" class="headerlink" title="4.4.1 Pipeline Stages"></a>4.4.1 Pipeline Stages</h3><p>Shift the <code>PC</code> computation from the end of the clock to the beginning, to get the value of the <strong><em>current</em></strong> <code>PC</code> of the instruction. </p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/72.png" width="80%" height="80%"></center><p>Pipeline Register:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/73.png" width="80%" height="80%"></center><hr><h3 id="4-4-2-PC-Prediction"><a href="#4-4-2-PC-Prediction" class="headerlink" title="4.4.2 PC Prediction"></a>4.4.2 PC Prediction</h3><ul><li>Start fetching new instruction after current one has completed fetch stage</li><li>Guess the next PC:<ul><li>Unconditional Jump: <code>valC</code>(the destination);</li><li>Non-jump instruction: <code>valP</code>(the next instruction);</li><li>Conditional Jump: <code>valC</code>(predict the branch will <strong>always taken</strong>). </li></ul></li></ul><hr><h3 id="4-4-3-Data-Hazard-in-Pipeline"><a href="#4-4-3-Data-Hazard-in-Pipeline" class="headerlink" title="4.4.3 Data Hazard in Pipeline"></a>4.4.3 Data Hazard in Pipeline</h3><p>Data Dependencies: Some instruction depends on result from <strong>previous</strong> ones. </p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/74.png" width="80%" height="80%"></center><blockquote><p>Values in <code>%rdx</code> and <code>%rax</code> have not been updated yet! </p></blockquote><hr><p>Solution: <strong>Stalling</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/75.png" width="80%" height="80%"></center><hr><h3 id="4-4-4-Branch-Misprediction"><a href="#4-4-4-Branch-Misprediction" class="headerlink" title="4.4.4 Branch Misprediction"></a>4.4.4 Branch Misprediction</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/76.png" width="80%" height="80%"></center><ul><li>Predict the branch is taken (Target);<ul><li>Fetch 2 instructions at target.</li></ul></li><li>Once reach the execute stage and find the branch is <strong>NOT</strong> taken:<ul><li>Cancel the <strong>misfetced</strong> instructions by <strong>inserting bubbles</strong>;</li><li>No side effect but waste of some clock cycles. </li></ul></li></ul><hr><h1 id="5-Memory-Hierarchy"><a href="#5-Memory-Hierarchy" class="headerlink" title="5 Memory Hierarchy"></a>5 Memory Hierarchy</h1><h2 id="5-1-Access-Latency"><a href="#5-1-Access-Latency" class="headerlink" title="5.1 Access Latency"></a>5.1 Access Latency</h2><ul><li>CPU one instruction execution time: <strong>1 cycle</strong> (1GHz CPU, 1 cycle = 10-9s);</li><li>Fetch one word from main memory: <strong>10 ~ 100 cycles</strong>;</li><li>Fetch a block of data from dicks: <strong>10,000 ~ 1,000,000 cycles</strong>. </li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/78.png" width="80%" height="80%"></center><hr><h2 id="5-2-Locality"><a href="#5-2-Locality" class="headerlink" title="5.2 Locality"></a>5.2 Locality</h2><p><strong>Principle</strong> of locality: </p><ul><li>Programs tend to use data and instructions with addresses <strong>near or equal</strong> to those they <strong>have used recently</strong>;</li></ul><p><strong>Temporal</strong> locality (Time respective):</p><ul><li><strong>Recently</strong> referenced items (data, instructions) are likely to be referenced again in the near future;</li></ul><p><strong>Spatial</strong> locality (Space respective):</p><ul><li>items (data, instructions) with <strong>nearby</strong> addresses tend to be referenced close together in time</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/79.png" width="80%" height="80%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/80.png" width="80%" height="80%"></center><p><strong>Locality measurement:</strong></p><blockquote><p><strong>Stride</strong>(Space): The <strong>distance</strong> of two <strong>adjacent data accesses</strong> in memory location, in the unit of 1 data element;</p></blockquote><ul><li><p><strong>Stride-1</strong> reference pattern: access the data one by one according to their memory addresses, such as the <strong>good locality</strong> example;</p></li><li><p><strong>Stride-k</strong> reference pattern: for example, the <strong>bad locality</strong> example generally has a stride-4 reference pattern.</p></li></ul><p>The <strong>smaller</strong> the stride, the <strong>better</strong> the locality. </p><hr><h2 id="5-3-Caching"><a href="#5-3-Caching" class="headerlink" title="5.3 Caching"></a>5.3 Caching</h2><blockquote><p>Adding a small but fast <strong>memory</strong> inside the <strong>CPU</strong></p></blockquote><p>Most programs runs iteration, and access same data frequently, so use cache to store the recently used data, saving time when access the same block of data, rather then still access from main memory. And cache is much closer to CPU than memory, have faster speed.</p><p><strong>Hit</strong>: the needed data have already been fetched inside the cache before;</p><p><strong>Miss</strong>: the needed data is NOT in the cache now, need to be accessed from the main memory;</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/81.png" width="80%" height="80%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/82.png" width="80%" height="80%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/83.png" width="80%" height="80%"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/84.png" width="80%" height="80%"></center><hr><p><strong>Hints to software developers</strong>:</p><ul><li>Caching leverages locality, good locality make good use of cache;</li><li>Focus your attention on <strong>inner</strong> loops;</li><li><strong>Spatial</strong> locality: reducing by reading data <strong>sequentially</strong> with stride-1 with <strong>same order stored in the memory</strong>;</li><li><strong>Temporal</strong> locality: reducing by using data as <strong>often</strong> as possible once it has been read from memory recently.</li></ul><hr><h2 id="5-4-Memory-Hierarchy-amp-Caching"><a href="#5-4-Memory-Hierarchy-amp-Caching" class="headerlink" title="5.4 Memory Hierarchy &amp; Caching"></a>5.4 Memory Hierarchy &amp; Caching</h2><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/85.png" width="70%" height="70%"></center><ul><li>Level <code>K</code> can be the cache of the Level <code>K+1</code>, storing the subset data of higher one.</li><li><strong>Memory system</strong> working at a <strong>high speed</strong> at the <strong>highest level</strong> with <strong>less capacity</strong>, but have the <strong>storage space</strong> of the <strong>lowest level</strong> with low speed but <strong>large capacity</strong>.</li></ul><hr><h2 id="5-5-Cache-Management"><a href="#5-5-Cache-Management" class="headerlink" title="5.5 Cache Management"></a>5.5 Cache Management</h2><ul><li>Cache block size:<ul><li>Bigger size has bigger spatial locality;</li><li>But too big may cause many data unused and cause waste of space and time;</li></ul></li><li><p>Replacement policy:</p><ul><li>The <strong>new coming data</strong> is going to replace which data in the cache;</li><li>Intuition: keep the data with <strong>more usage frequency</strong> in the cache, replace the less used one.</li><li><strong>FIFO</strong>: if the cache is full, and a new cache block will be loaded into the cache, the cache block that are installed earliest in absolute time will be evicted；</li><li><strong>LRU</strong>: if the cache is full, and a new cache block will be loaded into the cache, the least recently accesses block will be evicted。</li></ul></li><li><p>Set-associative design of cache:</p><ul><li>When the cache is large, take too long time to find;</li><li>Partition the cache into <strong>groups</strong>, <strong>map</strong> different data into different groups. </li></ul></li></ul><hr><h1 id="6-Concurrency"><a href="#6-Concurrency" class="headerlink" title="6 Concurrency"></a>6 Concurrency</h1><p>Concept of <strong>concurrency</strong>:</p><blockquote><p>There are more than one programs, before one running program finishes, another program has stared execution;<br>The operating system offers the capability to shift between programs. </p></blockquote><p><strong>Processes</strong>:</p><blockquote><p>An <strong>instance</strong> of a running <strong>program</strong>;<br>can create multiple processes of a “program”.</p></blockquote><p>Process <strong>abstractions</strong>:</p><blockquote><ol><li>Logical control flow:<br>Exclusive use of the <strong>CPU</strong>, e.g. <strong>Registers</strong>;<br>Provided by kernel mechanism called <strong><em>context switching</em></strong>.</li><li>Private address space:<br>Exclusive use of main <strong>memory</strong>;<br>Provided by kernel mechanism called <strong><em>virtual memory</em></strong>. </li></ol></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/87.png" width="10%" height="10%"></center><p><strong>Workflow of switching</strong>:</p><blockquote><ol><li>Start P1;</li><li>Save the context of P1 (Register) to P1’s memory region;</li><li>Load the context of P2;</li><li>Start execute P2;<br>…</li></ol></blockquote><p><strong>Context Switching</strong>:</p><ul><li><strong>kernel</strong>:</li></ul><blockquote><p>A shared chunk of memory-resident OS code manages Processes.</p></blockquote><p>Control flow passes from one process to another via a <strong>context switch</strong>:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/88.png" width="70%" height="70%"></center><hr><h2 id="6-1-Write-Concurrent-Program"><a href="#6-1-Write-Concurrent-Program" class="headerlink" title="6.1 Write Concurrent Program"></a>6.1 Write Concurrent Program</h2><p>Process in three <strong>states</strong>:</p><ul><li>Running: Process is either <strong>executing</strong>, or <strong>waiting to be executed</strong>;</li><li>Stopped: Process execution is <strong>suspended</strong> and will not be scheduled until further notice;</li><li>Terminated: Process is <strong>stopped permanently</strong>.</li></ul><hr><p><strong>Creating Processes</strong>:</p><p><code>fork()</code>: </p><ul><li>Parent process <strong>creates</strong> a new running child process;</li><li><strong>Returns</strong> 0 choose to run the child process, child’s PID to parent process;<ul><li><strong>After return, the process will run the code after the <code>fork()</code> line</strong>;</li><li>Child get an <strong>identical</strong> (but separate) copy of the parent’s child;</li><li>Child has a different PID than the parent.</li></ul></li><li>Called once but returns twice.</li></ul><hr><p><strong>Terminating Processes</strong>:</p><p>Process becomes terminated for one of three reasons:</p><ul><li>Receiving a signal whose default action is to terminate</li><li>Returning from the <code>main</code> routine</li><li>Calling the <code>exit</code> function </li></ul><p><code>exit(int status)</code>:</p><ul><li>Terminates with an exit status of status;</li><li>Convention: normal return status is 0, nonzero on error;</li><li>called  once but never returns.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;     <br>  <span class="hljs-type">pid_t</span> pid;     <br>  <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><br>  pid = Fork(); <br>  <span class="hljs-comment">/* Execute code after the Fork() line after return */</span><br>  <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* Child */</span>         <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child : x=%d\n&quot;</span>, ++x);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-comment">/* Parent */</span>     <br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: x=%d\n&quot;</span>, --x);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">parent:  x=<span class="hljs-number">0</span> <br>child : x=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>Can’t predict execution order of parent and child.</li></ul><hr><p><strong>Synchronizing parent with child</strong>:</p><p><code>int  wait(int  *child_status)</code>:</p><ul><li><strong>Suspend</strong> current process until one of its children <strong>terminates</strong>;</li><li>Return value is the <code>pid</code> of the <strong>child process that terminates</strong>;</li><li><code>child_status</code>: If <code>child_status != NULL</code>, the integer it points to will be set to a value that indicates the reason why the child terminates;</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/89.png" width="70%" height="70%"></center><hr><h1 id="7-Virtual-Memory"><a href="#7-Virtual-Memory" class="headerlink" title="7 Virtual Memory"></a>7 Virtual Memory</h1><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/90.png" width="70%" height="70%" alt="physical addressing"></center><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/91.png" width="70%" height="70%" alt="virtual addressing"></center><hr><h2 id="7-1-Address-Spaces"><a href="#7-1-Address-Spaces" class="headerlink" title="7.1 Address Spaces"></a>7.1 Address Spaces</h2><p><strong>Linear address space</strong>: <strong>consecutive non-negative</strong> integer addresses:</p><script type="math/tex; mode=display">\{0,1,2,3,...\}</script><p><strong>Virtual address space</strong>: use $n$-bit integers as virtual addresses, total $N = 2^n$ virtual addresses:</p><script type="math/tex; mode=display">\{0,1,2,3,...,N-1\}</script><p><strong>Physical address space</strong>: use $m$-bit integers as physical addresses, total $M = 2^m$ physical addresses:</p><script type="math/tex; mode=display">\{0,1,2,3,...,M-1\}</script><p>In general, $N$ is larger than $M$</p><hr><h2 id="7-2-Tool-for-Caching"><a href="#7-2-Tool-for-Caching" class="headerlink" title="7.2 Tool for Caching"></a>7.2 Tool for Caching</h2><blockquote><p>Virtual Memory is an array of $N$ consecutive bytes stored on <strong>disk</strong>.</p></blockquote><p><code>SRAM</code> cache: the L1, L2, and L3 cache memories between the <strong>CPU</strong> and main memory;<br><code>DRAM</code> cache: the VM system’s cache that caches virtual pages in <strong>physical memory</strong>.<br><code>pages</code>: cache block;</p><h3 id="Three-stages-of-a-Virtual-page"><a href="#Three-stages-of-a-Virtual-page" class="headerlink" title="Three stages of a Virtual page:"></a>Three stages of a Virtual page:</h3><ul><li><strong>Unallocated</strong>: Pages that have <strong>not yet been allocated (or created) by the VM</strong> system. Unallocated blocks do not have any data associated with them, and thus do not occupy any space on disk;</li><li><strong>Cached</strong>: Allocated pages that are currently <strong>cached in physical memory</strong>;</li><li><strong>Uncached</strong>: Allocated pages that are <strong>not cached in physical memory</strong>.</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/92.png" width="70%" height="70%" alt="using main memory as a cache"></center><hr><h3 id="DRAM-Cache-Organization"><a href="#DRAM-Cache-Organization" class="headerlink" title="DRAM Cache Organization"></a>DRAM Cache Organization</h3><p><strong>Large</strong> page (block) size: typically 4 KB to 4 MB.</p><ul><li>To get more hit.</li></ul><p>Fully associative:</p><ul><li>Any virtual page (VP) can be placed in any physical page (PP);</li><li>Size of VP = size of PP.</li></ul><p>Sophisticated replacement algorithms for DRAM cache.</p><p>Write-back</p><ul><li>Writes are not immediately performed in the disk;</li><li>Write to the disk when a page is evicted from DRAM cache.</li></ul><hr><h3 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h3><p>An Enabling Data Structure.</p><blockquote><p>An array of page table entries (PTEs) that <strong>maps virtual pages to physical pages</strong>.</p></blockquote><ul><li>Store in the  main memory, each process has a page table stored in the mei memory.</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/93.png" width="70%" height="70%" alt="Page table"></center><p><strong>valid bit</strong>: indicates whether the virtual page is currently <strong>cached in DRAM</strong>.<br><strong>address field</strong>: </p><ul><li>if valid bit is <strong>1</strong>, is the start of the corresponding <strong>physical page</strong> in DRAM where the virtual page is c<strong>ached</strong>;</li><li>if valid bit is <strong>0</strong>: <ul><li><code>null</code> address indicates that the virtual page has <strong>not yet been allocated</strong>;</li><li>or the address points to the start of the virtual page <strong>on disk</strong>.</li></ul></li></ul><hr><h3 id="Page-Hit"><a href="#Page-Hit" class="headerlink" title="Page Hit"></a>Page Hit</h3><blockquote><p>reference to VM word that is in physical memory</p></blockquote><p>Third data is hit, just read from the PM.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/94.png" width="70%" height="70%" alt="Page Hit"></center><hr><h3 id="Page-Fault"><a href="#Page-Fault" class="headerlink" title="Page Fault"></a>Page Fault</h3><blockquote><p>reference to VM word that is not in physical memory</p></blockquote><p>Fourth data is missed (fault):</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/95.png" width="70%" height="70%" alt="Page Fault"></center><ol><li>Page miss causes page fault (an exception);</li><li><strong>Page fault handler</strong> selects a <strong>victim</strong> to be evicted (here <code>VP4</code>);</li><li>Read VP3 from Virtual Memory to PM and cache it in DRAM;</li><li>Restart, hit!</li></ol><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/96.png" width="70%" height="70%" alt="After Page Fault"></center><hr><h3 id="Allocating-Pages"><a href="#Allocating-Pages" class="headerlink" title="Allocating Pages"></a>Allocating Pages</h3><blockquote><p>Allocating a new page (VP 5) of virtual memory.</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/97.png" width="70%" height="70%" alt="Allocating Pages"></center><hr><h3 id="Locality"><a href="#Locality" class="headerlink" title="Locality"></a>Locality</h3><ul><li>Virtual memory works <strong>efficiently</strong> because of <strong>locality</strong>;</li><li>working set: At any point in time, programs tend to access a set of active virtual pages;</li><li>If (working set size &lt; main memory size):<ul><li><strong>Good</strong> performance for one process after compulsory misses;</li></ul></li><li>If ( SUM(working set sizes) &gt; main memory size):<ul><li>Thrashing: Performance meltdown where pages are swapped (copied) in and out continuously.</li></ul></li></ul><hr><h2 id="7-3-Too-for-Memory-Management"><a href="#7-3-Too-for-Memory-Management" class="headerlink" title="7.3 Too for Memory Management"></a>7.3 Too for Memory Management</h2><blockquote><p>Each process has its <strong>own</strong> virtual address space.</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/98.png" width="70%" height="70%" alt="Memory Management"></center><p><strong>Simplifying memory allocation</strong>:</p><ul><li>Each virtual page can be mapped to any physical page;</li><li>A virtual page can be stored in <strong>different</strong> physical pages at <strong>different</strong> times.</li></ul><p><strong>Sharing code and data among processes</strong>:</p><ul><li>Map virtual pages to the same physical page (<code>PP 7</code>).</li></ul><hr><h2 id="7-4-Tool-for-Memory-Protection"><a href="#7-4-Tool-for-Memory-Protection" class="headerlink" title="7.4 Tool for Memory Protection"></a>7.4 Tool for Memory Protection</h2><blockquote><p>Extend page table entries (PTEs) with permission bits.</p></blockquote><ul><li>Memory management unit (MMU) checks these bits on each access</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/99.png" width="70%" height="70%" alt="Memory Protection"></center><p><code>SUP</code>: <strong>Super user</strong> or <strong>Supervisor</strong>;</p><ul><li>whether processes must be running in kernel (supervisor) mode to access the page. </li><li>1: Processes running in kernel mode can access any page, </li><li>0: Processes running in user mode are only allowed to access pages.</li></ul><p><code>READ</code>: Read;<br><code>WRITE</code>: Write;<br><code>EXEC</code>: Execute.</p><hr><h2 id="7-5-VM-Address-Translation"><a href="#7-5-VM-Address-Translation" class="headerlink" title="7.5 VM Address Translation"></a>7.5 VM Address Translation</h2><script type="math/tex; mode=display">MAP: V \to P \cup \{\empty\}</script><p>$MAP(a)=a^\prime$: Hit, data at virtual address $a$ is at physical address $a\prime<br>$ in P </p><p>$MAP(a)=\empty$: Fault, data at virtual address $a$ is not in physical memory</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/100.png" width="70%" height="70%" alt="Summary of Address Translation Symbols"></center><hr><h3 id="Address-Translation-With-a-Page-Table"><a href="#Address-Translation-With-a-Page-Table" class="headerlink" title="Address Translation With a Page Table"></a>Address Translation With a Page Table</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/101.png" width="70%" height="70%" alt="Address Translation With a Page Table"></center><p>The <code>VPN</code> is like a <strong>index</strong> to the Page Table</p><hr><p>Hit:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/102.png" width="70%" height="70%" alt="Address Translation With Hit"></center><p>1.Processor sends virtual address to MMU<br>2-3. MMU fetches PTE from page table in memory<br>4.MMU sends physical address to cache/memory<br>5.Cache/memory sends data word to processor</p><hr><p>Fault:</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/103.png" width="70%" height="70%" alt="Address Translation With fault"></center><p>1.Processor sends virtual address to MMU<br>2-3. MMU fetches PTE from page table in memory<br>4.Valid bit is zero, so MMU triggers page fault exception<br>5.Handler identifies victim (and, if dirty, pages it out to disk)<br>6.Handler pages in new page and updates PTE in memory<br>7.Handler returns to original process, restarting faulting instruction</p><hr><h2 id="7-6-Integrating-VM-and-Cache"><a href="#7-6-Integrating-VM-and-Cache" class="headerlink" title="7.6 Integrating VM and Cache"></a>7.6 Integrating VM and Cache</h2><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/104.png" width="70%" height="70%" alt="Integrating VM and Cache"></center><p>PTE data is same as other data cached in L1 cache, can be hit and miss.</p><hr><h2 id="7-7-Speeding-up-Translation-with-a-TLB"><a href="#7-7-Speeding-up-Translation-with-a-TLB" class="headerlink" title="7.7 Speeding up Translation with a TLB"></a>7.7 Speeding up Translation with a TLB</h2><p>Dut to the PT data will be easily evicted, and has a small delay, we can use a TLB to speed up.</p><p>Translation Lookaside Buffer (TLB):</p><ul><li>Small set-associative hardware cache in MMU;</li><li>Maps virtual page numbers to  physical page numbers</li><li>Contains <strong>complete</strong> page table entries for small number of pages</li></ul><h3 id="Accessing-the-TLB"><a href="#Accessing-the-TLB" class="headerlink" title="Accessing the TLB"></a>Accessing the TLB</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/105.png" width="70%" height="70%" alt="Accessing the TLB"></center><hr><h3 id="TLB-Hit"><a href="#TLB-Hit" class="headerlink" title="TLB Hit"></a>TLB Hit</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/106.png" width="70%" height="70%" alt="TLB Hit"></center><p>1.The CPU generates a virtual address.<br>2-3.The MMU fetches the appropriate PTE from the TLB;<br>4.The MMU translates the virtual address to a physical address and sends it to the cache/main memory;<br>5.The cache/main memory returns the requested data word to the CPU.</p><hr><h3 id="TLB-Miss"><a href="#TLB-Miss" class="headerlink" title="TLB Miss"></a>TLB Miss</h3><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/107.png" width="70%" height="70%" alt="TLB Miss"></center><p>First the MMU must fetch the PTE from the L1 <strong>cache</strong>,<br>then the newly fetched PTE is <strong>stored in the TLB</strong>.</p><hr><h1 id="8-System-Level-I-O"><a href="#8-System-Level-I-O" class="headerlink" title="8 System-Level I/O"></a>8 System-Level I/O</h1><h2 id="8-1-I-O-Bus"><a href="#8-1-I-O-Bus" class="headerlink" title="8.1 I/O Bus"></a>8.1 I/O Bus</h2><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/112.png" width="70%" height="70%" alt="I/O Bus"></center><p>The purpose of the <strong>I/O bridge</strong> are</p><ul><li>Manage and coordinate different types of I/O devices and the main memory;</li><li>To separate the signals within the CPU, ensure they will not interrupt each other.</li></ul><hr><h2 id="8-2-How-I-O-devices-interact-with-CPU"><a href="#8-2-How-I-O-devices-interact-with-CPU" class="headerlink" title="8.2 How I/O devices interact with CPU"></a>8.2 How I/O devices interact with CPU</h2><blockquote><p>CPU is too fast, I/O devices are too slow.</p></blockquote><p><strong>Design principle</strong>: should not let CPU wait for I/O devices</p><ul><li>Interrupt-based:</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/113.png" width="70%" height="70%" alt="Interrupt-based"></center><ul><li><strong>DMA</strong> – Direct Memory Access, dedicated hardware helping CPU to move data between I/O devices and main memory</li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/114.png" width="70%" height="70%" alt="DMA"></center><hr><p>1.CPU sends signal about the address in Disk, and the destination memory address.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/115.png" width="70%" height="70%" alt="Read a fire 1"></center><p>2.Disk sends data to main memory.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/116.png" width="70%" height="70%" alt="Read a fire 2"></center><p>3.Disk sends interrupt to CPU to indicate thr transfer is complete.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/117.png" width="70%" height="70%" alt="Read a fire 3"></center><hr><h2 id="8-3-Unix-I-O-Overview"><a href="#8-3-Unix-I-O-Overview" class="headerlink" title="8.3 Unix I/O Overview"></a>8.3 Unix I/O Overview</h2><ul><li>A file (in Unix/Linux) is a sequence of <code>m</code> bytes;</li><li>All I/O devices are represented as files.</li></ul><h3 id="Regular-Files"><a href="#Regular-Files" class="headerlink" title="Regular Files"></a>Regular Files</h3><blockquote><p>Used to store data</p><ul><li><strong>Text files</strong>: with only ASCII or Unicode characters;<ul><li>sequence of chars terminated by newline char (‘<code>\n</code>’)</li><li>Newline is <code>0xa</code>, same as ASCII <strong>line feed</strong> character (LF)</li><li>End of line (EOL) indicators<ul><li><strong>Linux and Mac OS</strong>: ‘<code>\n</code>’ (0xa), line feed (LF) </li><li><strong>Windows &amp; Internet protocols</strong>: ‘<code>\r\n</code>’ (0xd 0xa), Carriage return (CR) followed by line feed (LF)</li></ul></li></ul></li></ul></blockquote><ul><li><strong>Binary files</strong>: are everything else, e.g., object files, JPEG images</li></ul><hr><h3 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h3><ul><li><p>Directory consists of an array of links, Each link maps a filename to a file</p></li><li><p><code>.</code> (dot) is a link to <strong>itself</strong></p></li><li><code>..</code> (dot dot) is a link to the <strong>parent directory</strong> in the directory hierarchy</li><li><code>mkdir</code>: create empty directory</li><li><code>ls</code>: view directory contents</li><li><code>rmdir</code>: delete empty directory</li></ul><p><strong>Directory Hierarchy</strong>:</p><blockquote><p>All files are organized as a hierarchy anchored by root directory named <code>/</code> (slash)</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/118.png" width="120%" height="120%" alt="Directory Hierarchy"></center><ul><li><code>cd</code>: Modified current working directory (for Change Directory).</li></ul><p><strong>Pathnames</strong>:</p><ul><li><strong>Absolute pathname</strong> starts with ‘/’ and denotes path from root<ul><li><code>/home/droh/hello.c</code></li></ul></li><li><strong>Relative pathname</strong> denotes path from current working directory<ul><li><code>../droh/hello.c</code></li></ul></li></ul><hr><h1 id="9-Network-Programming"><a href="#9-Network-Programming" class="headerlink" title="9 Network Programming"></a>9 Network Programming</h1><h2 id="9-1-Client-Server-Transaction"><a href="#9-1-Client-Server-Transaction" class="headerlink" title="9.1 Client-Server Transaction"></a>9.1 Client-Server Transaction</h2><p>Server: </p><ul><li>process multiple client processes</li><li>manages some resource and provides service to clients</li><li>activated by request from client</li></ul><p>Clients and servers are processes running on the <strong>same or different hosts</strong>.</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/119.png" width="120%" height="120%" alt="Client-Server Transaction"></center><hr><h2 id="9-2-Computer-Networks"><a href="#9-2-Computer-Networks" class="headerlink" title="9.2 Computer Networks"></a>9.2 Computer Networks</h2><blockquote><p>A network is a hierarchical system of boxes and wires organized by geographical proximity</p><p><strong>SAN</strong> (System Area Network) spans <strong>cluster or machine room</strong><br><strong>LAN</strong> (Local Area Network)  spans <strong>a building or campus</strong><br><strong>WAN</strong> (Wide Area Network) spans <strong>country or world</strong></p></blockquote><p>An <strong>internetwork (internet)</strong> is an interconnected set of<br>networks</p><blockquote><p>The Global IP <strong>Internet</strong> (uppercase “I”) is the most famous example of an <strong>internet</strong> (lowercase “i”)</p></blockquote><hr><h2 id="9-3-LAN-amp-internet"><a href="#9-3-LAN-amp-internet" class="headerlink" title="9.3 LAN &amp; internet"></a>9.3 LAN &amp; internet</h2><p><strong>LAN</strong>: A collection of hosts attached to a single wire</p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/120.png" width="50%" height="50%" alt="LAN"></center><p><strong>internet</strong>: multiple <strong>LANs</strong> connected by <strong>routers</strong></p><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/121.png" width="80%" height="80%" alt="internet"></center><hr><h2 id="9-4-Logical-Structure-of-an-internet"><a href="#9-4-Logical-Structure-of-an-internet" class="headerlink" title="9.4 Logical Structure of an internet"></a>9.4 Logical Structure of an internet</h2><p><strong>Ad hoc</strong> interconnection of networks</p><blockquote><p>No particular topology;<br>Different packets may take different routes</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/122.png" width="80%" height="80%" alt="Logical Structure of an internet"></center><h2 id="9-5-IP-address"><a href="#9-5-IP-address" class="headerlink" title="9.5 IP address"></a>9.5 IP address</h2><blockquote><p>To locate a computer in the network</p></blockquote><ul><li><p>MAC address<br>Each <strong>network interface</strong> has a <strong>unique</strong> MAC address;<br>hardcoded when the interface hardware is produced, can not be changed, like our ID card.</p></li><li><p>IP address<br>Each computer is assigned an IP address, configurable, can be changed, like home address</p></li></ul><blockquote><p>The MAC address is bind with an IP address when your computer is connected to<br>some network, IP address can be different when you connect to different network.</p></blockquote><p><code>IPv4</code>: IP address is a 32-bit integer<br><code>IPv6</code>: IP address is a 128-bit integer</p><hr><h2 id="9-6-Domain"><a href="#9-6-Domain" class="headerlink" title="9.6 Domain"></a>9.6 Domain</h2><p>Human-friendly structured string of IP addresses;</p><ul><li>apollo.comp.polyu.edu.hk $\to$ 158.132.xxx.xxx</li></ul><blockquote><p>Mapping between domain names and IP addresses are stored on domain name servers, mapping service is provided by these servers.</p></blockquote><hr><h2 id="9-7-Port-number"><a href="#9-7-Port-number" class="headerlink" title="9.7 Port number"></a>9.7 Port number</h2><blockquote><p>a port number is used to <strong>uniquely</strong> identify a <strong>process</strong> on the computer;</p></blockquote><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/123.png" width="80%" height="80%" alt="Port number"></center><hr><h2 id="9-8-Send-Bits-Across-Incompatible-LANs-and-WANs"><a href="#9-8-Send-Bits-Across-Incompatible-LANs-and-WANs" class="headerlink" title="9.8 Send Bits Across Incompatible LANs and WANs"></a>9.8 Send Bits Across Incompatible LANs and WANs</h2><ul><li><p>Solution: an internet <strong>protocol</strong> running on hosts and routers</p><blockquote><p>Protocol is a set of rules that governs how hosts and routers should<br>cooperate when they transfer data from network to network</p></blockquote></li><li><p>delivery mechanism<br>defines a <strong>standard</strong> transfer unit (packet)<br>Packet consists of <code>header</code> and <code>payload</code></p><ul><li><code>Header</code>: contains <strong>info</strong> such as packet size, source and destination addresses </li><li><code>Payload</code>: contains <strong>data</strong> bits sent from source host</li></ul></li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/124.png" width="50%" height="50%" alt="Packet"></center><ul><li>Headers<ul><li>Pre-defined data structure containing important information for the data to be transmitted in the network, such as IP addresses, packet length, etc.</li></ul></li><li>Payload<ul><li>The data, usually a specified number of bytes</li><li>To transmit large data, trunk them into smaller packets</li></ul></li></ul><center><img src="/2022/04/30/introduction-to-computer-systems-course-note/125.png" width="80%" height="80%" alt="Packet"></center><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>B. Randal, D. R. O’Hallaron, <em>Computer systems : a programmer’s perspective</em>, Third edition. Boston: Pearson, 2016.<br>Slides of COMP1411 Introduction to Computer Systems, The Hong Kong Polytechnic University.</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer System</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Data Analytics Course Note</title>
    <link href="/2022/04/30/introduction-to-data-analytics-course-note/"/>
    <url>/2022/04/30/introduction-to-data-analytics-course-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p>Course note of <strong>COMP1433 Introduction to Data Analytics</strong>, The Hong Kong Polytechnic University, 2022.</p><p>Mainly focus on</p><p>Mathematical tools for data analytics</p><ul><li>Probability and Statistics;</li><li>Calculus (differentiation and integration);</li><li>Linear Algebra (vector and matrix basics);</li></ul><p>Programming with R language</p><ul><li>Basics;</li><li>Data Input and Manipulation;</li><li>Statistics;</li><li>Data Analytics.</li></ul><span id="more"></span><hr><h1 id="1-An-Introduction"><a href="#1-An-Introduction" class="headerlink" title="1 An Introduction"></a>1 An Introduction</h1><h2 id="1-1-Probability-amp-Statistics"><a href="#1-1-Probability-amp-Statistics" class="headerlink" title="1.1 Probability &amp; Statistics"></a>1.1 Probability &amp; Statistics</h2><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/1-1.png" alt="Probability &amp; Statistics"></p><hr><h2 id="1-2-Calculus-Preliminary"><a href="#1-2-Calculus-Preliminary" class="headerlink" title="1.2 Calculus Preliminary"></a>1.2 Calculus Preliminary</h2><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/1-2.png" alt="Calculus Preliminary"></p><hr><h2 id="1-3-Derivatives-of-Common-Functions"><a href="#1-3-Derivatives-of-Common-Functions" class="headerlink" title="1.3 Derivatives of Common Functions"></a>1.3 Derivatives of Common Functions</h2><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/1-3.png" alt="Derivatives of Common Functions"></p><hr><h2 id="1-4-Matrix-Product"><a href="#1-4-Matrix-Product" class="headerlink" title="1.4 Matrix Product"></a>1.4 Matrix Product</h2><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/1-4.png" alt="Matrix Product"></p><hr><h1 id="2-Probability"><a href="#2-Probability" class="headerlink" title="2 Probability"></a>2 Probability</h1><h2 id="2-1-Sample-Space"><a href="#2-1-Sample-Space" class="headerlink" title="2.1 Sample Space"></a>2.1 Sample Space</h2><ul><li><strong>The set of all possible outcomes of an experiment.</strong></li></ul><hr><h2 id="2-2-Event"><a href="#2-2-Event" class="headerlink" title="2.2 Event"></a>2.2 Event</h2><ul><li><strong>Subsets of the sample space.</strong></li></ul><hr><h2 id="2-3-Frequency"><a href="#2-3-Frequency" class="headerlink" title="2.3 Frequency"></a>2.3 Frequency</h2><blockquote><p>Run a random experiment $n$ times, during which an event $A$ occurs $m$ times:</p></blockquote><p>frequency of $A$’s occurrence is <script type="math/tex">f_A=\frac{m}{n}</script></p><hr><h2 id="2-4-Probability"><a href="#2-4-Probability" class="headerlink" title="2.4 Probability"></a>2.4 Probability</h2><blockquote><p>a numerical description of <strong>how likely</strong> an event is to occur and or how likely that a proposition is true.</p></blockquote><p>The probability of $A$ occurs:</p><script type="math/tex; mode=display">\lim_{n\to +\infin}f_A \equiv P(A)=p</script><blockquote><ul><li>$0\le P(E)\le 1$ for each even $E$;</li><li>$P(S)=1$;</li></ul><p>If the events, A and B, are <strong>disjoint events</strong>(mutually exclusive), the probability that <strong><em>either event occurs</em></strong> is</p><script type="math/tex; mode=display">P(A\cup B) = P(A)+P(B) \\ =P(A)+P(B)-P(A \cap B)\; \mathrm where\; P(A \cap B)=0</script></blockquote><hr><h2 id="2-5-Conditional-Probability"><a href="#2-5-Conditional-Probability" class="headerlink" title="2.5 Conditional Probability"></a>2.5 Conditional Probability</h2><blockquote><p>The probability of an event $A$ given that <strong><em>an event $B$ has occurred</em></strong>, is called the conditional probability of $A$ given $B$ and is denoted by the symbol $P(A|B)$ and read as ‘the probability of $A$ given that $B$ has already occurred.</p><p>If $A$ and $B$ are two events with $P(A)\neq 0$ and $P(B)\neq 0$,then</p></blockquote><script type="math/tex; mode=display">P(A|B)=\frac{P(A,B)}{P(B)}\;\; and\;\;P(B|A)=\frac{P(B,A)}{P(A)}</script><p>The probability that <strong><em>both of the two events $A$ and $B$ occur</em></strong> is</p><script type="math/tex; mode=display">P(A\cap B) = P(A)\cdot P(B|A)= P(B)\cdot P(A|B)</script><hr><h2 id="2-6-Law-of-Total-Probability"><a href="#2-6-Law-of-Total-Probability" class="headerlink" title="2.6 Law of Total Probability"></a>2.6 Law of Total Probability</h2><blockquote><p>Assume that $B_1,B_2,…,B_n$ are <strong><em>collectively exhaustive</em></strong> events where $P(B_i)\gt 0$, for $i=1,2,…,n$ and $B_i$ and $B_j$ are <strong><em>mutually exclusive</em></strong> events for $i\neq j$.<br>Then for any event $A$:</p></blockquote><script type="math/tex; mode=display">P(A)=P(B_1, A)+P(B_2, A)+...+P(B_n, A)</script><script type="math/tex; mode=display">=P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+...+P(B_n)P(A|B_n)</script><hr><h2 id="2-7-Bayes’-Formula"><a href="#2-7-Bayes’-Formula" class="headerlink" title="2.7 Bayes’ Formula"></a>2.7 Bayes’ Formula</h2><blockquote><p><strong>Inverts the conditioning</strong></p></blockquote><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-1.png" alt></p><blockquote><p>Suppose that $B_1,B_2,…,B_n$ are n <strong><em>exhaustive</em></strong> events and <strong><em>exhaustive</em></strong> events, then:</p></blockquote><script type="math/tex; mode=display">P(B_k|A)=\frac{P(B_k \cap A)}{P(A)}</script><script type="math/tex; mode=display">=\frac{P(B_k)P(A|B_k)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+...+P(B_n)P(A|B_n)}</script><p>$\because P(B_k\cap A) = P(B_k)\cdot P(A|B_k) $<br>$ \text{ :based on the Conditional Probability}$ </p><p>$\text{,and }P(A)=P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+…+P(B_n)P(A|B_n) $<br>$\text{based on the Law of Total probability}$</p><hr><h2 id="2-8-Independent-Events"><a href="#2-8-Independent-Events" class="headerlink" title="2.8 Independent Events"></a>2.8 Independent Events</h2><blockquote><p><strong>knowing $F$ occurred doesn’t change the probability of $E$:</strong></p></blockquote><script type="math/tex; mode=display">P(E,F)=P(E)P(F)</script><p>In this case:</p><script type="math/tex; mode=display">\because P(E, F)=P(E)\cdot P(F)\\ \therefore P(E|F)=\frac{P(E, F)}{P(F)}=P(E)</script><hr><h2 id="2-9-Text-Classification"><a href="#2-9-Text-Classification" class="headerlink" title="2.9 Text Classification"></a>2.9 Text Classification</h2><ul><li>Learn: <strong>text map to labels</strong>.</li></ul><hr><h2 id="2-10-Naive-Bayes-classifier"><a href="#2-10-Naive-Bayes-classifier" class="headerlink" title="2.10 Naïve Bayes classifier"></a>2.10 Naïve Bayes classifier</h2><blockquote><p><a href="https://youtu.be/O2L2Uv9pdDA">Naive Bayes, Clearly Explained!!! - YouTube</a></p></blockquote><p><strong>Bayes’ Rule Applied to Documents and Classes (Multinomial Naive Bayes)</strong></p><ul><li>A <strong>generative</strong> and <strong>linear</strong> classifier.</li><li>Naive Bayes classifier has many <strong>assumptions including ignoring the words order and words are independent with each other</strong>, which makes it does <strong>not exhibit high accuracy</strong>.</li></ul><blockquote><p>$d$: document;<br>$c$: class;<br>To get the maximum value of $P(c|d),c \in C$, which means given the document $d$, find its class with the maximum probability.</p></blockquote><p>The goal: to get the maximum value of </p><script type="math/tex; mode=display">P(c|d)=\frac{P(d|c)P(c)}{P(d)}</script><p>which is</p><script type="math/tex; mode=display">c_{MAP}=\argmax_{c\in C}P(c|d)</script><p>$MAP$ is maximum a posteriori = most likely class,</p><script type="math/tex; mode=display">=\argmax_{c\in C}\frac{P(d|c)P(c)}{P(d)}</script><p>Bayes’ Formula,</p><script type="math/tex; mode=display">=\argmax_{c\in C}P(d|c)P(c)</script><p>where $P(d)$ is not related to $c$,</p><script type="math/tex; mode=display">=\argmax_{c\in C}P(x_1,x_2,...,x_n|c)P(c)</script><p>where $d$ is represented with $x_1,x_2,…,x_n$, e.g. words in an email,<br>and $P(c)$ is the frequency of occurrence of this class, by count the relative frequencies, e.g. the frequencies of normal emails and spam emails,</p><p>Based on:</p><p><strong>Bag of Words assumption</strong>: Assume position doesn’t matter;<br><strong>Conditional Independence</strong>: Assume $P(x_j|c_j)$ are independent;</p><p>then,</p><script type="math/tex; mode=display">P(x_1,x_2,...,x_n|c)=P(x_1|c) \cdot P(x_2|c) \cdot ... \cdot P(x_n|c)=\prod_{x\in X}P(x|c)</script><script type="math/tex; mode=display">X=\{x_1,x_2,...,x_n\}</script><p>therefore</p><script type="math/tex; mode=display">c_{NB}=\argmax_{c\in C}P(c_j)\prod_{x\in X}P(x|c),X=\{x_1,x_2,...,x_n\}</script><p>then for all words:</p><script type="math/tex; mode=display">c_{NB}=\argmax_{c_j\in C}P(c_j)\prod_{i\in positions}P(x_i|c_j) \tag{1}</script><p>$positions$ = all word positions in the test document</p><p>for $(1)$,</p><p>Multiplying floating point numbers may cause underflow loss,<br>then based on,</p><script type="math/tex; mode=display">\log(ab)=\log(a)+\log(b)</script><p>then for $(1)$,</p><script type="math/tex; mode=display">c_{NB}=\argmax_{c_j\in C}P(c_j)\prod_{i\in positions}P(x_i|c_j)\tag{1}</script><script type="math/tex; mode=display">=\argmax_{c_j\in C}\Biggl[\log{P(c_j)}+\sum_{i\in positions}\log{P(x_i|c_j)}\Biggl] \tag{2}</script><ul><li>For the <strong>maximum likelihood estimates</strong> $P(c_j)$:</li></ul><script type="math/tex; mode=display">P(c_j)=\frac{doccount(C=c_j)}{N_{doc}}</script><blockquote><p>Get the <strong>frequencies</strong> of the class appear in the dataset.</p></blockquote><ul><li>For the <strong>Parameter estimation</strong> $P(w_i|c_j)$:</li></ul><script type="math/tex; mode=display">P(w_i|c_j)= \frac{count(w_i,c_j)}{\sum_{w \in V} count(w,c_j)}</script><p>($V$ is the vocabulary maintaining all the words used for classification in dataset we trained)</p><blockquote><p>Get the frequencies of the word $w_i$ appears within all word in the dataset with class $c_j$.</p></blockquote><hr><p><strong><em>Problem</em></strong>:</p><blockquote><p>No training of some words will lead the result to 0 directly, which is improper.</p></blockquote><p><strong><em>Solution</em></strong>:</p><blockquote><p>Laplace (add-1) Smoothing for Naive Bayes</p></blockquote><script type="math/tex; mode=display">P(w_i|c_j)= \frac{count(w_i,c_j)+1}{\sum_{w \in V} (count(w,c_j)+1)}=\frac{count(w_i,c_j)+1}{\biggl(\sum_{w \in V} count(w,c_j)\biggr)+|V|}</script><hr><p><strong><em>Problem</em></strong>:</p><blockquote><p>For the Unknown word.</p></blockquote><p><strong><em>Solution</em></strong>:</p><blockquote><p>Ignore them, remove them from the test document</p></blockquote><hr><p><strong><em>Problem</em></strong>:</p><blockquote><p>Deal with the stopwords(e.g., <code>the</code>, <code>a</code>)</p></blockquote><p><strong><em>Solution</em></strong>:</p><blockquote><p>Sort the whole vocabulary by <strong>frequency</strong> in the training, call the <strong>top 10 or 50</strong> words the stopwords list, and <strong>remove</strong> them from the dataset.<br>It’s more common to <strong>ignore stopwords lists</strong> and <strong>only use all the words</strong>.</p></blockquote><hr><h2 id="2-11-Tutorial-Exercises-Discrete-Random-Variables"><a href="#2-11-Tutorial-Exercises-Discrete-Random-Variables" class="headerlink" title="2.11 Tutorial: Exercises - Discrete Random Variables"></a>2.11 Tutorial: Exercises - Discrete Random Variables</h2><p><strong>[Example]</strong></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-2.png" alt></p><hr><p><strong>[Solution]</strong></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-3.png" alt></p><blockquote><p><strong>PMF: Probability Mass Function</strong></p></blockquote><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-4.png" alt></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-5.png" alt></p><blockquote><p><strong>CDF: Cumulative Distribution Function</strong></p></blockquote><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-6.png" alt></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-7.png" alt></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-8.png" alt></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-9.png" alt></p><p><img src="/2022/04/30/introduction-to-data-analytics-course-note/2-10.png" alt></p><hr><h1 id="3-Statistics-Basics-for-Data-Analytics"><a href="#3-Statistics-Basics-for-Data-Analytics" class="headerlink" title="3 Statistics Basics for Data Analytics"></a>3 Statistics Basics for Data Analytics</h1><h2 id="3-1-Expectation-of-Random-Variables"><a href="#3-1-Expectation-of-Random-Variables" class="headerlink" title="3.1 Expectation of Random Variables"></a>3.1 Expectation of Random Variables</h2><p>Mean of $X$</p><script type="math/tex; mode=display">E[X]=\sum_kx_kP(X=x_k)=\sum_kp_X(x_k)</script><blockquote><p>the weighted average sum of $X$</p></blockquote><ul><li>$E[aX]=aE[X]$</li><li>$E[aX+b]=aE[X]+bs$</li></ul><p>For the <strong>probability density function</strong>(PDF) $f(x)=P(X=x)$:</p><script type="math/tex; mode=display">E[X]=\int_a^bxf(x)dx</script><hr><h2 id="3-2-Variance-and-Standard-Deviation-of-Radom-Variables"><a href="#3-2-Variance-and-Standard-Deviation-of-Radom-Variables" class="headerlink" title="3.2 Variance and Standard Deviation of Radom Variables"></a>3.2 Variance and Standard Deviation of Radom Variables</h2><p>$\mu = E[X]$</p><p>the <strong>Variance</strong>:</p><script type="math/tex; mode=display">Var(X)=E[(X-\mu)^2]=\sum_k(x_k-\mu)^2p_X(x_k)\\Var(X)=E[X^2]-\mu^2</script><blockquote><p>The weighted square distance from the mean.</p></blockquote><p>the <strong>Standard Deviation</strong>:</p><script type="math/tex; mode=display">\sigma(X)=\sqrt{Var(X)}</script><blockquote><p>The weighted distance from the mean. </p></blockquote><p>For the <strong>probability density function</strong>(PDF) $f(x)=P(X=x)$:</p><script type="math/tex; mode=display">Var(X)=E[(X-\mu)^2]=\int_a^b(x-\mu)^2f(x)dx</script><script type="math/tex; mode=display">Var(X)=E[X^2]-\mu^2=\int_a^bx^2f(x)dx-\biggl(\int_a^bxf(x)dx\biggr)^2</script><hr><script type="math/tex; mode=display">E(aX)=aE(X)</script><script type="math/tex; mode=display">E(aX+b)=aE(X)+b</script><script type="math/tex; mode=display">E(X+Y)=E(X)+E(Y)</script><script type="math/tex; mode=display">E(XY)=E(X)\times E(Y)</script><script type="math/tex; mode=display">Var(X+Y)=Var(X)+Var(Y)</script><hr><h2 id="3-3-Sample-Statistics"><a href="#3-3-Sample-Statistics" class="headerlink" title="3.3 Sample Statistics"></a>3.3 Sample Statistics</h2><ul><li><p>Assumptions:</p><ul><li>The population is <strong>infinite</strong> (or very <strong>large</strong>).</li><li>The observations are <strong>independent</strong>.</li></ul></li><li><p>Statistic itself is a random variable</p></li></ul><hr><h3 id="3-3-1-Sample-Mean"><a href="#3-3-1-Sample-Mean" class="headerlink" title="3.3.1 Sample Mean"></a>3.3.1 Sample Mean</h3><script type="math/tex; mode=display">\bar{X}=\frac{1}{n}(X_1+X_2+...+X_n)</script><hr><h3 id="3-3-2-Sample-Variance-and-Standard-Deviation"><a href="#3-3-2-Sample-Variance-and-Standard-Deviation" class="headerlink" title="3.3.2 Sample Variance and Standard Deviation"></a>3.3.2 Sample Variance and Standard Deviation</h3><p><strong>Sample Variance</strong>:</p><script type="math/tex; mode=display">S=\frac{1}{n-1}\sum^n_{k=1}(X_k-\bar{X})^2</script><p><strong>Standard Deviation</strong>:</p><script type="math/tex; mode=display">S=\sqrt{\frac{1}{n-1}\sum^n_{k=1}(X_k-\bar{X})^2}</script><hr><h3 id="3-3-3-Other-of-Sample-Statistics"><a href="#3-3-3-Other-of-Sample-Statistics" class="headerlink" title="3.3.3 Other of Sample Statistics"></a>3.3.3 Other of Sample Statistics</h3><ul><li><strong>order statistic</strong>:  observation are <strong>ordered</strong> in size;</li><li><strong>sample median</strong>:<ul><li>$n$ is <strong>odd</strong>: <strong>mid-value</strong> of the order statistic;</li><li>$n$ is <strong>even</strong>:  <strong>average</strong> of the <strong>two middle values</strong>;</li></ul></li><li><strong>sample range</strong>: Max - Min</li></ul><hr><h3 id="3-3-4-Expected-Value-and-Variance-of-Sample-Mean"><a href="#3-3-4-Expected-Value-and-Variance-of-Sample-Mean" class="headerlink" title="3.3.4 Expected Value and Variance of Sample Mean"></a>3.3.4 Expected Value and Variance of Sample Mean</h3><p><strong>Sample Mean</strong>:</p><script type="math/tex; mode=display">\bar{X}=\frac{1}{n}(X_1+X_2+...+X_n)</script><p>It is also a <strong>Radom Variable</strong>.</p><p>The <strong>Expected value of Sample Mean</strong>: </p><script type="math/tex; mode=display">\mu_{\bar{X}}=E[\bar{X}]=E\biggl[\frac{1}{n}(X_1+X_2+...+X_n)\biggr]=\mu</script><p>The <strong>Variance of Sample Mean:</strong></p><script type="math/tex; mode=display">\sigma_{\bar{X}}^2=Var[\bar{X}]=\frac{\sigma^2}{n}</script><p>($n\to +\infin \implies \sigma_{\bar{X}}^2 \to 0$)</p><p><strong>[Proof]</strong></p><p>Set:</p><script type="math/tex; mode=display">S=x_1+x_2+...+x_n\\n\bar{X}=S</script><p>Then:</p><script type="math/tex; mode=display">Var[\bar{X}]=E[\bar{X}^2]-\mu^2\\=\frac{1}{n^2}E[S^2]-\mu^2\\=\frac{1}{n^2}E[(x_1+x_2+...+x_n)^2]-\mu^2\\=\frac{1}{n^2}E\biggl[\sum_{i=1}^nx_i^2+\sum_{i\ne j}x_ix_j\biggr]-\mu^2\\=\frac{1}{n^2}\biggl[nE[x_i^2]+n(n-1)E(x_ix_j)\biggr]-\mu^2\\=\frac{1}{n^2}\biggl[n(\sigma^2+\mu^2)+n(n-1)\mu^2\biggr]-\mu^2\\=\frac{\sigma^2}{n}</script><hr><h3 id="3-3-5-Markov-Inequality-and-Chebyshev’s-Inequality"><a href="#3-3-5-Markov-Inequality-and-Chebyshev’s-Inequality" class="headerlink" title="3.3.5 Markov Inequality and Chebyshev’s Inequality"></a>3.3.5 Markov Inequality and Chebyshev’s Inequality</h3><p><strong>Markov Inequality</strong>:</p><p>$X\ge 0,\epsilon \gt 0$</p><script type="math/tex; mode=display">P(X\ge \epsilon)\le \frac{E[X]}{\epsilon}</script><p><strong>[Proof]</strong></p><script type="math/tex; mode=display">E[X]=\sum_{x\ge 0}xp(x)\ge \sum_{x\ge \epsilon}xp(x)\ge \epsilon \sum_{x\ge \epsilon}p(x)=\epsilon P(X\ge \epsilon)</script><p><strong>Chebyshev’s Inequality</strong>:</p><script type="math/tex; mode=display">P(|X-\mu |\ge \epsilon)\le \frac{\sigma^2}{\epsilon^2}</script><p><strong>[Proof]</strong></p><p>$P(|X-\mu |\ge \epsilon)=P((X-\mu )^2\ge \epsilon^2)\le \frac{E[(X-\mu )^2]}{\epsilon^2}=\frac{\sigma^2}{\epsilon^2}$</p><hr><h3 id="3-3-6-Law-of-Large-Number"><a href="#3-3-6-Law-of-Large-Number" class="headerlink" title="3.3.6 Law of Large Number"></a>3.3.6 Law of Large Number</h3><p>According to the <strong>Chebyshev’s Inequality</strong>:</p><script type="math/tex; mode=display">P(|X-\mu |\ge \epsilon)\le \frac{\sigma^2}{\epsilon^2}</script><p>then, for any random variables: </p><script type="math/tex; mode=display">P(|X-\mu |\ge \epsilon)\ge 1-\frac{\sigma_{\bar{X}}^2}{\epsilon^2}=1-\frac{\sigma^2}{n\epsilon^2}</script><p>for $n\to +\infin,\; P(|X-\mu |\ge \epsilon)=1,\; \forall \epsilon \gt 0$</p><blockquote><p>Means the sample mean approximates the population mean for <strong>very large $n$</strong>.</p></blockquote><hr><h3 id="3-3-7-General-and-Standard-Normal"><a href="#3-3-7-General-and-Standard-Normal" class="headerlink" title="3.3.7 General and Standard Normal"></a>3.3.7 General and Standard Normal</h3><script type="math/tex; mode=display">f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{1}{2\sigma^2}(x-\mu )^2}</script><p>$X$ is general normal, $X\sim N(\mu ,\sigma^2)$</p><p>Properties:</p><ul><li>$E[X]=\mu$</li><li>$Var(X)=\mu^2$</li><li>$\frac{X-\mu}{\sigma}\sim N(0,1)$</li></ul><hr><p>when $\mu =0,\sigma=1$:</p><script type="math/tex; mode=display">f(x) = \frac{1}{\sqrt{2\pi}}e^{-\frac{1}{2\sigma^2}x^2}</script><p>$X$ is standard normal, $X\sim N(0,1)$</p><hr><h3 id="3-3-8-Central-Limit-Theorem"><a href="#3-3-8-Central-Limit-Theorem" class="headerlink" title="3.3.8 Central Limit Theorem"></a>3.3.8 Central Limit Theorem</h3><p><strong>Sample Mean</strong>:</p><script type="math/tex; mode=display">\bar{X}=\frac{1}{n}(X_1+X_2+...+X_n)</script><p>The <strong>Expected value of Sample Mean</strong>: </p><script type="math/tex; mode=display">\mu_{\bar{X}}=E[\bar{X}]=E\biggl[\frac{1}{n}(X_1+X_2+...+X_n)\biggr]=\mu</script><p>The <strong>Variance of Sample Mean:</strong></p><script type="math/tex; mode=display">\sigma_{\bar{X}}^2=Var[\bar{X}]=\frac{\sigma^2}{n}</script><ul><li><p>$\bar{X}$ is approximately <strong>general normal</strong> (or satisfies normal distribution) for very large $n$.</p></li><li><p>$\frac{X-\mu_{\bar{X}}}{\sigma}=\frac{X-\mu}{\frac{\sigma}{\sqrt{n}}}$ is approximately <strong>normal normal</strong> for very large $n$.</p></li></ul><hr><h3 id="3-3-9-Confidence-Interval-Estimate"><a href="#3-3-9-Confidence-Interval-Estimate" class="headerlink" title="3.3.9 Confidence Interval Estimate"></a>3.3.9 Confidence Interval Estimate</h3><p>For the continuous random variable $X$, $\forall x \in \Bbb{R}$</p><script type="math/tex; mode=display">f(x) = \frac{1}{\sqrt{2\pi}}e^{-\frac{1}{2\sigma^2}x^2}</script><p>So $X\sim N(0,1)$</p><p>For thr cumulative distribution function:</p><script type="math/tex; mode=display">F(x)=P(X\le x)=\Phi(x)</script><p>or,</p><script type="math/tex; mode=display">F(x)=P(|X|\le x)=P(-x\le X \le x)=1-2\Phi(-x),(x\gt 0)</script><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/1.png" width="40%" height="40%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/2.png" width="40%" height="40%"></center><hr><p>Then for $\frac{X-\mu}{\frac{\sigma}{\sqrt{n}}}$ is approximately standard normal for very large $n$.</p><script type="math/tex; mode=display">P\biggl(|\frac{X-\mu}{\frac{\sigma}{\sqrt{n}}}|\le z\biggr)\\=P(|X-\mu|\le \frac{\sigma z}{\sqrt{n}})\\=P(\mu \in [\bar{X}-\frac{\sigma z}{\sqrt{n}},\bar{X}+\frac{\sigma z}{\sqrt{n}}])\\\approxeq 1-2\Phi(-z)</script><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/3.png" width="60%" height="60%"></center><hr><h3 id="3-3-10-Hypothesis-Testing"><a href="#3-3-10-Hypothesis-Testing" class="headerlink" title="3.3.10 Hypothesis Testing"></a>3.3.10 Hypothesis Testing</h3><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/4.png" width="60%" height="60%"></center><p><strong>[Example]</strong></p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/5.png" width="60%" height="60%"></center><p>For hypothesis $H$, p-value = $p$;</p><p>We <strong>accept</strong> $H$ at the level of significance $A$, where $p\gt A$;<br>We <strong>reject</strong> $H$ at  the level of significance $R$, where $p\lt R$;</p><hr><h2 id="3-4-Naive-Bayes-classifier-Cont"><a href="#3-4-Naive-Bayes-classifier-Cont" class="headerlink" title="3.4 Naïve Bayes classifier (Cont.)"></a>3.4 Naïve Bayes classifier (Cont.)</h2><p>See in <a href="#210-naïve-bayes-classifier">2.10</a></p><hr><h2 id="3-5-Tutorial-–-Statistic-Basics"><a href="#3-5-Tutorial-–-Statistic-Basics" class="headerlink" title="3.5 Tutorial – Statistic Basics"></a>3.5 Tutorial – Statistic Basics</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/6.png" width="60%" height="60%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/7.png" width="60%" height="60%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/8.png" width="60%" height="60%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/9.png" width="60%" height="60%"></center><hr><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/10.png" width="60%" height="60%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/11.png" width="60%" height="60%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/12.png" width="60%" height="60%"></center><hr><h1 id="4-Linear-Algebra-Basics"><a href="#4-Linear-Algebra-Basics" class="headerlink" title="4 Linear Algebra Basics"></a>4 Linear Algebra Basics</h1><h2 id="4-1-Vectors"><a href="#4-1-Vectors" class="headerlink" title="4.1 Vectors"></a>4.1 Vectors</h2><blockquote><p>An order list of numbers:</p></blockquote><script type="math/tex; mode=display">\begin{pmatrix}  -1 & 0 & 3.6 & 7.2\end{pmatrix}or\begin{pmatrix}  -1 \\ 0 \\ 3.6 \\ 7.2\end{pmatrix}</script><p><strong>Dimension</strong>: count of entires;<br><strong>n-vector</strong>: Vector of dimension $n$;<br><strong>Scalars</strong>: numbers in the vector.</p><h3 id="4-1-1-Vectors-Addition"><a href="#4-1-1-Vectors-Addition" class="headerlink" title="4.1.1 Vectors Addition"></a>4.1.1 Vectors Addition</h3><blockquote><p>Adding the <strong>corresponding</strong> elements, to form another vector of the <strong>same size</strong>. </p></blockquote><script type="math/tex; mode=display">\begin{pmatrix}  1 \\ 2 \\ 3 \\ 4\end{pmatrix}+\begin{pmatrix}  5 \\ 6 \\ 7 \\ 8\end{pmatrix}=\begin{pmatrix}  6 \\ 8 \\ 10 \\ 12\end{pmatrix}</script><p><strong>Properties</strong>:<br>$a,b,c$ are same size vectors;</p><script type="math/tex; mode=display">a+b=b+a\;\text{ (Communicative)}</script><script type="math/tex; mode=display">(a+b)+c=a+(b+c)\;\text{ (Associative)}</script><script type="math/tex; mode=display">a+0=0+a</script><script type="math/tex; mode=display">a-a=0\;\\\text{(0 is a zero vector with all entries as 0)}</script><hr><h3 id="4-1-2-Scalar-Vector-Multiplication"><a href="#4-1-2-Scalar-Vector-Multiplication" class="headerlink" title="4.1.2 Scalar-Vector Multiplication"></a>4.1.2 Scalar-Vector Multiplication</h3><p>Scalar: $\beta$;<br>n-vector: $a$;</p><script type="math/tex; mode=display">\beta a=(\beta a_1,\beta a_2,\cdots ,\beta a_n)</script><p><strong>Properties</strong>:</p><script type="math/tex; mode=display">(\beta \gamma)a= \beta (\gamma a)\;\text{(Associative)}</script><script type="math/tex; mode=display">(\beta + \gamma)a=\beta a + \gamma a\;\text{(Left Distributive)}</script><script type="math/tex; mode=display">\beta (a + b)=\beta a + \beta b\;\text{(Right Distributive)}</script><hr><h3 id="4-1-3-Inner-Product"><a href="#4-1-3-Inner-Product" class="headerlink" title="4.1.3 Inner Product"></a>4.1.3 Inner Product</h3><blockquote><p>dot product</p></blockquote><p>n-vector $a$ and $b$:</p><script type="math/tex; mode=display">a^Tb=a_1b_1+a_2b_2+\cdots + a_nb_n</script><p><strong>Properties</strong>:</p><script type="math/tex; mode=display">a^Tb = b^Ta</script><script type="math/tex; mode=display">(\gamma a)^Tb=\gamma (a^Tb)</script><script type="math/tex; mode=display">(a+b)^T c=a^Tc + b^Tc</script><script type="math/tex; mode=display">(a+b)^T(c+d)=a^Tc + b^Tc+a^Td+b^Td</script><hr><h3 id="4-1-4-Vector-Norm"><a href="#4-1-4-Vector-Norm" class="headerlink" title="4.1.4 Vector Norm"></a>4.1.4 Vector Norm</h3><blockquote><p>Euclidean Norm of <strong>n-vector</strong>:</p></blockquote><script type="math/tex; mode=display">\lVert x \rVert=\sqrt{x_1^2+x_2^2+\cdots + x_n^2}=\sqrt{x^Tx}</script><p><strong>Properties</strong>:</p><ul><li>Homogeneity:<script type="math/tex; mode=display">\lVert \beta x \rVert = |\beta| \lVert x \rVert</script></li><li>Triangle Inequality:<script type="math/tex; mode=display">\lVert x+y \rVert\le \lVert x \rVert+\lVert y \rVert</script></li><li>Non-negativity:<script type="math/tex; mode=display">\lVert x \rVert\ge 0</script></li><li>Definiteness:<script type="math/tex; mode=display">\lVert x \rVert=0\iff x=0</script></li></ul><hr><h3 id="4-1-5-Vector-Distance"><a href="#4-1-5-Vector-Distance" class="headerlink" title="4.1.5 Vector Distance"></a>4.1.5 Vector Distance</h3><blockquote><p>Euclidean Distance of two n-vector:</p></blockquote><script type="math/tex; mode=display">\lVert x-y \rVert=\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+\cdots + (x_n-y_n)^2}</script><hr><h3 id="4-1-6-Vector-Angle"><a href="#4-1-6-Vector-Angle" class="headerlink" title="4.1.6 Vector Angle"></a>4.1.6 Vector Angle</h3><blockquote><p>Angle $\theta$ between two non-zero vector $a$ and $b$:</p></blockquote><script type="math/tex; mode=display">\cos \theta = \frac{a^Tb}{\lVert a \rVert\cdot \lVert b \rVert}</script><script type="math/tex; mode=display">\iff a^Tb=\cos \theta \cdot {\lVert a \rVert\cdot \lVert b \rVert}</script><p><strong>Properties</strong>:</p><ul><li>$\theta = \frac{\pi}{2}$: $a\bot b$;</li><li>$\theta = 0$: $a$ and $b$ are aligned, $a^Tb={\lVert a \rVert\cdot \lVert b \rVert}$;</li><li>$\theta = \pi$: $a$ and $b$ are anti-aligned, $a^Tb=-{\lVert a \rVert\cdot \lVert b \rVert}$;</li><li>$\theta \in (0,\frac{\pi}{2})$: $a$ and $b$ make a acute angle, $a^Tb\gt 0$;</li><li>$\theta \in (\frac{\pi}{2},\pi)$: $a$ and $b$ make a obtuse angle, $a^Tb\lt 0$. </li></ul><p>Proof:</p><script type="math/tex; mode=display">LHS=\cos \theta=\cos (\alpha-\beta)</script><script type="math/tex; mode=display">= \cos \alpha \cos \beta + \sin \alpha\sin \beta</script><script type="math/tex; mode=display">= \frac{a_xb_x}{\lVert a \rVert\cdot \lVert b \rVert}+\frac{a_yb_y}{\lVert a \rVert\cdot \lVert b \rVert}</script><script type="math/tex; mode=display">= \frac{a_xb_x+a_yb_y}{\lVert a \rVert\cdot \lVert b \rVert}</script><script type="math/tex; mode=display">= \frac{a^Tb}{\lVert a \rVert\cdot \lVert b \rVert}=RHS</script><hr><h2 id="4-2-Clustering"><a href="#4-2-Clustering" class="headerlink" title="4.2 Clustering"></a>4.2 Clustering</h2><p>$N$ n-vector, $x_1,x_2,\cdots, x_n$:<br>Cluster them into $k$ clusters(groups),</p><blockquote><p>Goal is to make vectors in the same cluster to be <strong>close</strong> to each other. </p></blockquote><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/13.png" width="60%" height="60%"></center><hr><h3 id="4-2-1-Clustering-Objective"><a href="#4-2-1-Clustering-Objective" class="headerlink" title="4.2.1 Clustering Objective"></a>4.2.1 Clustering Objective</h3><p><strong>Group Assignment</strong>:<br>$c<em>i$: the index of a group;<br>Assigned to vector $x_i,\; x_i\in G</em>{c_i}$. </p><p><strong>Group Representatives</strong>:<br>n-vectors $z_1,z_2,\cdots,z_k$</p><p><strong>Clustering Objective</strong>:</p><script type="math/tex; mode=display">J^{cluster}=\frac{1}{N}\sum^N_{i=1}\lVert x_i-z_{c_i}\rVert^2</script><blockquote><p>Smaller, the better</p></blockquote><hr><h3 id="4-2-2-K-means-Clustering-Algorithm"><a href="#4-2-2-K-means-Clustering-Algorithm" class="headerlink" title="4.2.2 K-means Clustering Algorithm"></a>4.2.2 K-means Clustering Algorithm</h3><blockquote><p>Repeatedly alternate between updating the <strong>group assignments</strong>, and then updating the <strong>representatives</strong>, then $J^{cluster}$ goes down. </p></blockquote><p>Algorithm:<br><strong>Given</strong> $x_1,x_2,\cdots , x_N$ N vectors, and initially $z_1,z_2,\cdots , z_k$ k representatives which is <strong>randomly</strong> selected at begin;<br><strong>Repeat</strong>:</p><ul><li><strong>Update group assignments</strong>: assign $i$ to $G<em>j$, $i= argmin</em>{j’}\lVert x<em>i-z</em>{j’}\rVert$, let $x_i$ assigned to the group associated with the <strong>nearest</strong> representative;</li><li><strong>Update representatives</strong>: $z<em>j=\frac{1}{|G_j|}\sum</em>{i\in G_j}x_i$, to be the <strong>mean</strong> of the vectors in group $j$. </li></ul><p><strong>Until</strong> group representative stop change. </p><p><a href="https://youtu.be/4b5d3muPQmA">StatQuest: K-means clustering</a></p><hr><h2 id="4-3-Matrices"><a href="#4-3-Matrices" class="headerlink" title="4.3 Matrices"></a>4.3 Matrices</h2><blockquote><p>Rectangular array of numbers:</p></blockquote><script type="math/tex; mode=display">\begin{pmatrix}  1 & 3 & 5\\2& 4& 6\end{pmatrix}</script><p>A $2\times 3$ matrix, $M_{2,3}$</p><ul><li>size: (row dimension)×(column dimension), e.g., $2\times 3$;</li><li>entries: the elements;</li><li>$M_{i,j}$: entry at $i^{th}$ row and $j^{th}$ column;</li><li>equal: have <strong>same size</strong> and all <strong>corresponding</strong> entries are <strong>equal</strong>;</li></ul><p><strong>column vector</strong>: $n\times 1$ Matrix;</p><p><strong>row vector</strong>: $1\times n$ Matrix;</p><p><strong>number</strong>: $1\times 1$ Matrix;</p><hr><h3 id="4-3-1-Transpose-of-Matrices"><a href="#4-3-1-Transpose-of-Matrices" class="headerlink" title="4.3.1 Transpose of Matrices"></a>4.3.1 Transpose of Matrices</h3><blockquote><p>$A^T$: Transpose of Matrices</p></blockquote><script type="math/tex; mode=display">(A^T)_{i,j} = A_{j,i}</script><script type="math/tex; mode=display">\begin{pmatrix}  1 & 3 & 5\\2& 4& 6\end{pmatrix}^T=\begin{pmatrix}  1&2\\3&4\\5&6\end{pmatrix}</script><hr><h3 id="4-3-2-Addition-Subtraction-and-Scalar-Multiplication-of-Matrices"><a href="#4-3-2-Addition-Subtraction-and-Scalar-Multiplication-of-Matrices" class="headerlink" title="4.3.2 Addition, Subtraction, and Scalar Multiplication of Matrices"></a>4.3.2 Addition, Subtraction, and Scalar Multiplication of Matrices</h3><ul><li>Add: <strong>Same size matrix</strong></li></ul><script type="math/tex; mode=display">(A+B)_{i,j}=A_{i,j}+B_{i,j}</script><ul><li>Subtract: <strong>Same size matrix</strong></li></ul><script type="math/tex; mode=display">(A-B)_{i,j}=A_{i,j}-B_{i,j}</script><ul><li>Scalar multiplication:</li></ul><script type="math/tex; mode=display">(\alpha A)_{i,j} = \alpha A_{i,j}</script><p><strong>Properties:</strong></p><script type="math/tex; mode=display">A+B= B+A</script><script type="math/tex; mode=display">\alpha(A+B) = \alpha A + \alpha B</script><script type="math/tex; mode=display">(A+B)^T=A^T+B^T</script><hr><h3 id="4-3-3-Matrix–Vector-Product"><a href="#4-3-3-Matrix–Vector-Product" class="headerlink" title="4.3.3 Matrix–Vector Product"></a>4.3.3 Matrix–Vector Product</h3><blockquote><p>matrix $A$ of $m\times n$, n-vector $x$, $y=Ax$:</p></blockquote><script type="math/tex; mode=display">y_i=A_{i,1}x_1+A_{i,2}x_2+\cdots, A_{i,n}x_n</script><script type="math/tex; mode=display">\begin{pmatrix}  1 & 3 & 5\\2& 4& 6\end{pmatrix}\begin{pmatrix}  0\\1\\2\end{pmatrix}=\begin{pmatrix}  13\\16\end{pmatrix}</script><hr><h3 id="4-3-4-Matrix-Multiplication"><a href="#4-3-4-Matrix-Multiplication" class="headerlink" title="4.3.4 Matrix Multiplication"></a>4.3.4 Matrix Multiplication</h3><blockquote><p>matrix $A$ of $m\times p$, $B$ of $p\times n$, $C=AB$:</p></blockquote><script type="math/tex; mode=display">C_{i,j}=\sum_{k=1}^pA_{i,k}B_{k,j}</script><script type="math/tex; mode=display">\begin{pmatrix}  1 & 3 & 5\\2& 4& 6\end{pmatrix}\begin{pmatrix}  0 & 0\\1&1\\2&1\end{pmatrix}=\begin{pmatrix}  13& 8\\16&10\end{pmatrix}</script><hr><h1 id="5-Calculus-Basics"><a href="#5-Calculus-Basics" class="headerlink" title="5 Calculus Basics"></a>5 Calculus Basics</h1><h2 id="5-1-Functions"><a href="#5-1-Functions" class="headerlink" title="5.1 Functions"></a>5.1 Functions</h2><script type="math/tex; mode=display">y = f(x)</script><blockquote><p>$y$ is a function of $x$, the value of x corresponds to <strong>one and only one</strong> value of $y$. </p></blockquote><p>$x$: independent variable;<br>$y$: dependent variable. </p><hr><h3 id="5-1-1-Optimization-of-a-Function"><a href="#5-1-1-Optimization-of-a-Function" class="headerlink" title="5.1.1 Optimization of a Function"></a>5.1.1 Optimization of a Function</h3><p><strong>Optimization</strong>: Find a set of variables $x_1,x_2,\cdots,x_n$ that <strong>maximize or minimize</strong> $f(x_1,x_2,\cdots,x_n)$. </p><hr><h2 id="5-2-Derivatives"><a href="#5-2-Derivatives" class="headerlink" title="5.2 Derivatives"></a>5.2 Derivatives</h2><p><strong>Derivative</strong> of $f(x)$: </p><ul><li>The <strong>slope of tangent line</strong> (instantaneous rate of change) at $(x,f(x))$;</li></ul><p><strong>Differentiation</strong>: </p><ul><li>the <strong>process</strong> of calculating <strong>derivative</strong> of $f(x)$;</li></ul><script type="math/tex; mode=display">\frac{dy}{dx}=f^\prime(x)=\lim_{\Delta x \to 0}\frac{f(x+\Delta x)-f(x)}{\Delta x}</script><hr><h3 id="5-2-1-Useful-Derivative-Rules"><a href="#5-2-1-Useful-Derivative-Rules" class="headerlink" title="5.2.1 Useful Derivative Rules"></a>5.2.1 Useful Derivative Rules</h3><p><strong>Power Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d(x^p)}{dx}=px^{p-1}</script></li></ul><p><strong>Exponential Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d(b^x)}{dx}=b^x lnb</script></li><li><script type="math/tex; mode=display">\frac{d(e^x)}{dx}=e^x</script></li></ul><p><strong>Logarithm Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d(log_bx)}{dx}=\frac{1}{x lnb}</script></li><li><script type="math/tex; mode=display">\frac{d(lnx)}{dx}=\frac{1}{x}</script></li></ul><p><strong>Derivatives for constants</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{dC}{dx}=0</script></li></ul><hr><h3 id="5-2-2-Properties-of-Derivatives"><a href="#5-2-2-Properties-of-Derivatives" class="headerlink" title="5.2.2 Properties of Derivatives"></a>5.2.2 Properties of Derivatives</h3><p><strong>Constant</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d[cf(x)]}{dx}=c\frac{d[f(x)]}{dx}</script></li></ul><p><strong>Sum and Difference Rules</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d[f(x)\pm g(x)]}{dx}=\frac{d[f(x)]}{dx}\pm \frac{d[g(x)]}{dx}</script></li></ul><p><strong>Product Rule</strong>:</p><ul><li><script type="math/tex; mode=display">[f(x)g(x)]^\prime =f^\prime(x)g(x)+f(x)g^\prime(x)</script></li></ul><p><strong>Quotient Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\biggl[\frac{f(x)}{g(x)}\biggr]^\prime=\frac{f^\prime(x)g(x)-f(x)g^\prime(x)}{[g(x)]^2},g(x)\ne 0</script></li></ul><p><strong>Chain Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\big[f\big(g(x)\big)\big]^\prime=f^\prime\big(g(x)\big)\cdot g^\prime (x)</script></li></ul><hr><h3 id="5-2-3-Partial-Derivatives"><a href="#5-2-3-Partial-Derivatives" class="headerlink" title="5.2.3 Partial Derivatives"></a>5.2.3 Partial Derivatives</h3><ul><li>For a function with several variables;</li><li>Derivative with respect to <strong>one of those variables</strong>;</li><li>with others as <strong>constants</strong>;</li><li>Denoted as $\frac{\delta f}{\delta x}$ or $\frac{df}{dx}$. </li></ul><hr><h3 id="5-2-4-Gradient"><a href="#5-2-4-Gradient" class="headerlink" title="5.2.4 Gradient"></a>5.2.4 Gradient</h3><ul><li>For $f(x_1,x_2,\cdots,x_n)$,</li><li>Gradient is the vector holding all partial derivatives:</li><li>$\nabla f = (\frac{\delta f}{\delta x_1},\frac{\delta f}{\delta x_2},\cdots, \frac{\delta f}{\delta x_n})$;</li><li>It points the direction of the <strong>greatest rate of change</strong>. </li></ul><hr><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/14.png" width="70%" height="70%"></center><script type="math/tex; mode=display">w=w_0-\eta \frac{dl(w)}{dw}</script><ul><li>Moving in the <strong>opposite</strong> direction of the <strong>gradient</strong> of the loss function. </li><li>$\eta$: the moving step length, to avoid pass the goal. </li></ul><hr><h3 id="5-2-5-The-Training-of-Machine-Learning"><a href="#5-2-5-The-Training-of-Machine-Learning" class="headerlink" title="5.2.5 The Training of Machine Learning"></a>5.2.5 The Training of Machine Learning</h3><p><strong>Generative Classifier</strong>:</p><ul><li>Calculus the probability of each object;</li><li>Run model for each one;</li><li>e.g. Naïve Bayes classifier. </li></ul><p><strong>Discriminative Classifier</strong>:</p><ul><li>Distinguish one from another;</li></ul><p><strong>Input</strong>: $x_1,x_2,\cdots,x_n$, the <strong>feature</strong> representation;<br><strong>Output</strong>: $\hat{y}$, the <strong>prediction</strong>, via $p(y|x)$ function.<br><strong>The object function to learn</strong>: <strong>cross-entropy loss</strong>, using gradient descent tor optimizing. </p><p><strong>Linear Regression</strong>:</p><ul><li>Input: <strong>feature</strong> $x_1,x_2,\cdots,x_n$, and <strong>weight</strong> over feature $\theta_1,\theta_2,\cdots,\theta_n$;</li><li>Output: $\hat{y}=h_\theta(x)=f(\theta^Tx)$, where $f(a)=a$, which is <strong>linear</strong>.</li></ul><hr><p>In order to get from numbers to 0-to-1, need to use <strong>sigmoid</strong> or <strong>logistic</strong> <strong>function</strong>:</p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/15.png" width="70%" height="70%"></center><p><strong>Sigmoid or Logistic Regression</strong>:</p><ul><li>Input: <strong>feature</strong> $x_1,x_2,\cdots,x_n$, and <strong>weight</strong> over feature $\theta_1,\theta_2,\cdots,\theta_n$;</li><li>Output: $\hat{y}=h_\theta(x)=f(\theta^Tx)$, where $f(a)=\frac{1}{1+exp(-a)}$, which is <strong>sigmoid</strong> or <strong>logistic</strong>.</li><li>Only fix to binary classification, not 3 or 4…</li></ul><p>A recipe:</p><ol><li><strong>Training Data</strong>: ${x<em>i,y_i}</em>{i=1}^N$, where $x$ is the feature and $y$ is the label. </li><li><strong>Decision function</strong>: $\hat{y}=f_\theta (x_i)$, where $f$ is the sigmoid function;</li><li><strong>Loss function</strong>: $l(\hat{y},y_i)\in \Bbb{R}$;</li><li><strong>The Goal</strong>: $\theta^*=argmin<em>\theta \sum^N</em>{i=1}l(f_\theta (x_i),y_i)$;</li><li>Training with <strong>SGD</strong>, small steps opposite the gradient: <script type="math/tex">\theta^{(t+1)}=\theta^{(t)}-\eta_t \nabla l(f_\theta(x_i),y_i)</script></li></ol><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/16.png" width="70%" height="70%"></center><hr><h2 id="5-3-Integrals"><a href="#5-3-Integrals" class="headerlink" title="5.3 Integrals"></a>5.3 Integrals</h2><p><strong>Definite Integrals</strong>: </p><script type="math/tex; mode=display">F(x)=\int^x_af(t)dt</script><ul><li>$f(x)$: integrand;</li><li>$F(x)$: antiderivative of $f(x)$. </li></ul><p><strong>Indefinite integrals</strong>:</p><script type="math/tex; mode=display">\int f(x)dx= F(x)+C</script><hr><h3 id="5-3-1-Properties-of-Integrals"><a href="#5-3-1-Properties-of-Integrals" class="headerlink" title="5.3.1 Properties of Integrals"></a>5.3.1 Properties of Integrals</h3><p><strong>Sum and Difference Rules</strong>:</p><script type="math/tex; mode=display">\int[f(x)\pm g(x)]dx=\int f(x)dx \pm \int g(x)dx</script><p><strong>Power Rule</strong>:</p><script type="math/tex; mode=display">\int u^pdu=\begin{cases}  \frac{u^{p+1}}{p+1}+C,&p\ne-1\\  ln|u|+C,&p=-1\end{cases}</script><p><strong>Exponential Rule</strong>:</p><script type="math/tex; mode=display">\int e^udu=e^u+C</script><p><strong>Chain Rule</strong>:</p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/17.png" width="70%" height="70%"></center><hr><h1 id="6-Programming-with-R"><a href="#6-Programming-with-R" class="headerlink" title="6 Programming with R"></a>6 Programming with R</h1><h2 id="6-1-R-Basic"><a href="#6-1-R-Basic" class="headerlink" title="6.1 R Basic"></a>6.1 R Basic</h2><ul><li>Created objects are held in memory;</li><li>The workspace (the collection of objects you currently have) is not saved on disk unless you tell R to do so;</li><li>Save: <code>save.image()</code>;</li><li>Check the current working directory: <code>getwd()</code>;</li><li>Save to a specific file and location: <code>save.image(&quot;path&quot;)</code></li><li>List the objects in the current workspace: <code>ls()</code>, <code>ls(pattern=&quot;x&quot;)</code>;</li><li>Remove onr or more objects: <code>remove(x,x2)</code>;</li><li>Quit R: <code>q()</code>;</li><li>Load the workspace: <code>load(&quot;path&quot;)</code>;</li><li>Help:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">help.start<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>  <span class="hljs-comment"># general help </span><br>help<span class="hljs-punctuation">(</span>foo<span class="hljs-punctuation">)</span>  <span class="hljs-comment"># help about function foo </span><br><span class="hljs-operator">?</span>foo <span class="hljs-comment"># same thing</span><br>apropos<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># list all function containing string foo </span><br>example<span class="hljs-punctuation">(</span>foo<span class="hljs-punctuation">)</span>  <span class="hljs-comment"># show an example of function foo</span><br></code></pre></td></tr></table></figure><ul><li><p>Assignment operators:</p><ul><li><code>&lt;-</code>: An arrow formed by a smaller than character and a hyphen without a space;</li><li><code>=</code>: equal character;</li></ul></li><li><p>Naming rules:</p><ul><li><strong>CANNOT</strong> contain ‘strange’ symbols like <code>!, +, -, #</code>;</li><li>A dot <code>.</code> and an underscore <code>_</code> are <strong>allowed</strong>, also a name <strong>starting</strong> with a dot;</li><li>CAN contain a number but <strong>CANNOT start with a number</strong>;</li><li><strong>Case sensitive</strong>, <code>X</code> and <code>x</code> are two different objects, as well as <code>temp</code> and <code>temP</code>.</li></ul></li><li><p>Check packages currently attached in the system: <code>search()</code>;</p></li><li>Check available library can be used in the system: <code>library()</code>;</li></ul><hr><h2 id="6-2-R-Data-types"><a href="#6-2-R-Data-types" class="headerlink" title="6.2 R Data types"></a>6.2 R Data types</h2><h3 id="6-2-1-Vectors"><a href="#6-2-1-Vectors" class="headerlink" title="6.2.1 Vectors"></a>6.2.1 Vectors</h3><p><strong>Vector</strong> is the core element of R, it includes scalars, characters, logical values, <strong>but not mixed</strong>. </p><p>Using <code>c(...)</code> to initialize:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>Concatenate two vector into a new vector:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> vc <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> vc<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>Starts at index 1 instead of 0!</strong></p></blockquote><p>ELements referencing: </p><ol><li><p><code>v[x]</code></p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br>numeric<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[n:m]</code><br><strong>inclusively</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><blockquote><p>Accessing from 1 to n+1:<code>v[1:(n+1)]</code>, instead of<code>v[1:n+1]</code>;</p></blockquote></li><li><p><code>v[c(a,b,c,...)]</code><br>Accessing via <strong>data vector</strong>;</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[-x]</code><br>Ignore some elements;</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[x&lt;y]</code><br>Accessing via boolean expression, <code>TRUE</code> for selected, <code>FALSE</code> for ignore;</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span>v<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span>v <span class="hljs-operator">%%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure></li><li><p><code>names()</code><br> Give names to some elements, and accessing via names;</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> value <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>value<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> value<br>  one   two three <br>    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span> <br><span class="hljs-operator">&gt;</span> value<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">]</span><br>one <br>  <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> value<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>  one three <br>    <span class="hljs-number">1</span>     <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="6-2-2-Matrices"><a href="#6-2-2-Matrices" class="headerlink" title="6.2.2 Matrices"></a>6.2.2 Matrices</h3><p>两种方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> mymatrix <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span> nrow<span class="hljs-operator">=</span>r<span class="hljs-punctuation">,</span> ncol<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">,</span> byrow<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-built_in">dimnames</span><span class="hljs-operator">=</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>char_vector_rownames<span class="hljs-punctuation">,</span> char_vector_colnames<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span>  <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><ul><li>Based on vector <code>v</code>, create a <code>r*c</code> matrix</li><li>Created <strong>column by column</strong></li><li><code>byrow=FALSE</code>: fill the matrices by columns (default)</li><li><code>dimnames</code>: provides optional labels for the columns and rows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> m <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> m<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br><br><span class="hljs-operator">&gt;</span> zerom <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> zerom<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><br><span class="hljs-operator">&gt;</span> nam <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> nam<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span><br></code></pre></td></tr></table></figure><p><code>byrow=TRUE</code>: fill the matrices by row: </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rowm <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>byrow<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> rowm<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>Convert vector directly into matrix:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><hr><p><strong>[Example]</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># generates 5 x 4 numeric matrix</span><br>y<span class="hljs-operator">&lt;-</span>matrix<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span> nrow<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span>ncol<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span> <br><span class="hljs-comment"># another examples</span><br>cells <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">26</span><span class="hljs-punctuation">,</span><span class="hljs-number">24</span><span class="hljs-punctuation">,</span><span class="hljs-number">68</span><span class="hljs-punctuation">)</span><br>rnames <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;R1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;R2&quot;</span><span class="hljs-punctuation">)</span><br>cnames <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;C1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;C2&quot;</span><span class="hljs-punctuation">)</span><br>mymatrix <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>cells<span class="hljs-punctuation">,</span> nrow<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> ncol<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    byrow<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">dimnames</span><span class="hljs-operator">=</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>rnames<span class="hljs-punctuation">,</span> cnames<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">#Identify rows, columns or elements using subscripts. </span><br>y<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># 4th column of matrix</span><br>y<span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># 3rd row of matrix</span><br>y<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># rows 2,3,4 of columns 1,2,3</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-2-3-Dataframes"><a href="#6-2-3-Dataframes" class="headerlink" title="6.2.3 Dataframes"></a>6.2.3 Dataframes</h3><blockquote><p>A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.). </p></blockquote><p>Creation form <strong>Column</strong> Data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>v3<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span> <br>e <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span> <br>f <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span> <br>mydata <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span>e<span class="hljs-punctuation">,</span>f<span class="hljs-punctuation">)</span> <br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ID&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Color&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Passed&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment">#variable names</span><br></code></pre></td></tr></table></figure><p>Identify the elements of a Dataframe:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">mydata<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># columns 1,2 of dataframe </span><br>mydata<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ID&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Passed&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># columns ID and Passed from dataframe </span><br>mydata<span class="hljs-operator">$</span>ID <span class="hljs-comment">#variables ID in the dataframe</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-2-4-Lists"><a href="#6-2-4-Lists" class="headerlink" title="6.2.4 Lists"></a>6.2.4 Lists</h3><blockquote><p>A list is an <strong>ordered collection of objects</strong> (components). It allows you to gather a variety of (even unrelated) objects under one name. </p></blockquote><p><strong>List Creation</strong>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>List containing</strong>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>list1<span class="hljs-punctuation">,</span>list2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><strong>List Position Indexing</strong>:</p><p>Identify elements of a list:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[[</span>n<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return an element</span><br></code></pre></td></tr></table></figure><p>or </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return a list of elements</span><br></code></pre></td></tr></table></figure><blockquote><p>  <code>l[n]</code><br>    Special case, return a <strong>list</strong> of <strong>only one</strong> element. </p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return an element</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return a List</span><br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return a List</span><br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-3-Data-Input-and-Processing"><a href="#6-3-Data-Input-and-Processing" class="headerlink" title="6.3 Data Input and Processing"></a>6.3 Data Input and Processing</h2><p><strong>Import Data</strong>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">mydata <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;c:/mydata.csv&quot;</span><span class="hljs-punctuation">,</span> header<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-punctuation">,</span> row.names<span class="hljs-operator">=</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><strong>Export Data</strong>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">write.table<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;c:/mydata.txt&quot;</span><span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;\t&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Viewing data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># list objects in the working environment</span><br>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># list the variables in mydata</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># list the structure of mydata</span><br>str<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># dimensions of an object</span><br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>object<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># class of an object (numeric, matrix, dataframe, etc)</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>object<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># print mydata</span><br>mydata <br><br><span class="hljs-comment"># print first 10 rows of mydata</span><br>head<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">,</span> n<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <br><br><span class="hljs-comment"># print last 5 rows of mydata</span><br>tail<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">,</span> n<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="6-3-1-Missing-Data"><a href="#6-3-1-Missing-Data" class="headerlink" title="6.3.1 Missing Data"></a>6.3.1 Missing Data</h3><p><code>NA</code>: not available;<br><code>NaN</code>: Not a NUmber(dividing by zero);</p><ul><li><code>is.na(x)</code>: returns TRUE of x is missing</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">y <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span> <span class="hljs-comment"># returns a vector (F F F T)</span><br></code></pre></td></tr></table></figure><ul><li><code>na.rm=TRUE</code>: remove missing data</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <br>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-comment"># returns NA</span><br>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> na.rm<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># returns 2</span><br></code></pre></td></tr></table></figure><ul><li><code>complete.cases()</code>: returns a logical vector indicating which cases are complete.</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># list rows of data that have missing values </span><br>mydata<span class="hljs-punctuation">[</span><span class="hljs-operator">!</span>complete.cases<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ul><li><code>na.omit()</code>: returns the object with list-wise deletion of missing values.</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># create new dataset without missing data</span><br>newdata <span class="hljs-operator">&lt;-</span> na.omit<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-4-New-Variable"><a href="#6-4-New-Variable" class="headerlink" title="6.4 New Variable"></a>6.4 New Variable</h2><blockquote><p>Use the assignment operator <code>&lt;-</code> or <code>=</code> to create new variables.</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">mydata<span class="hljs-operator">$</span><span class="hljs-built_in">sum</span> <span class="hljs-operator">&lt;-</span> mydata<span class="hljs-operator">$</span>x1 <span class="hljs-operator">+</span> mydata<span class="hljs-operator">$</span>x2 <br>mydata<span class="hljs-operator">$</span>mean <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span>mydata<span class="hljs-operator">$</span>x1 <span class="hljs-operator">+</span> mydata<span class="hljs-operator">$</span>x2<span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>or using <code>attach</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">attach<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span> <br>mydata<span class="hljs-operator">$</span><span class="hljs-built_in">sum</span> <span class="hljs-operator">&lt;-</span> x1 <span class="hljs-operator">+</span> x2 <br>mydata<span class="hljs-operator">$</span>mean <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span>x1 <span class="hljs-operator">+</span> x2<span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-number">2</span> <br>detach<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>or,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">mydata <span class="hljs-operator">&lt;-</span> transform<span class="hljs-punctuation">(</span>mydata<span class="hljs-punctuation">,</span> <span class="hljs-built_in">sum</span> <span class="hljs-operator">=</span> x1 <span class="hljs-operator">+</span> x2<span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span>x1 <span class="hljs-operator">+</span> x2<span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-5-Arithmetic-Operators"><a href="#6-5-Arithmetic-Operators" class="headerlink" title="6.5 Arithmetic Operators"></a>6.5 Arithmetic Operators</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/18.png" width="70%" height="70%"></center><hr><h2 id="6-6-Logical-Operators"><a href="#6-6-Logical-Operators" class="headerlink" title="6.6 Logical Operators"></a>6.6 Logical Operators</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/19.png" width="70%" height="70%"></center><hr><h2 id="6-7-Control-Structure"><a href="#6-7-Control-Structure" class="headerlink" title="6.7 Control Structure"></a>6.7 Control Structure</h2><ul><li>if-else:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>cond<span class="hljs-punctuation">)</span> expr <br><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>cond<span class="hljs-punctuation">)</span> expr1 <span class="hljs-keyword">else</span> expr2 <br></code></pre></td></tr></table></figure><ul><li>for:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>var <span class="hljs-keyword">in</span> seq<span class="hljs-punctuation">)</span> expr<br></code></pre></td></tr></table></figure><ul><li>while:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">while</span> <span class="hljs-punctuation">(</span>cond<span class="hljs-punctuation">)</span> expr<br></code></pre></td></tr></table></figure><ul><li>switch:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>expr<span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><ul><li>ifelse:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">ifelse<span class="hljs-punctuation">(</span>test<span class="hljs-punctuation">,</span>yes<span class="hljs-punctuation">,</span>no<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-8-Numeric-Functions"><a href="#6-8-Numeric-Functions" class="headerlink" title="6.8 Numeric Functions"></a>6.8 Numeric Functions</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/20.png" width="70%" height="70%"></center><hr><h2 id="6-9-Character-Functions"><a href="#6-9-Character-Functions" class="headerlink" title="6.9 Character Functions"></a>6.9 Character Functions</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/21.png" width="70%" height="70%"></center><hr><h2 id="6-10-Probability-Functions"><a href="#6-10-Probability-Functions" class="headerlink" title="6.10 Probability Functions"></a>6.10 Probability Functions</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/22.png" width="70%" height="70%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/23.png" width="70%" height="70%"></center><hr><h2 id="6-11-Statistical-Functions"><a href="#6-11-Statistical-Functions" class="headerlink" title="6.11 Statistical Functions"></a>6.11 Statistical Functions</h2><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/24.png" width="70%" height="70%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/25.png" width="70%" height="70%"></center><hr><h2 id="6-12-Barplot"><a href="#6-12-Barplot" class="headerlink" title="6.12 Barplot"></a>6.12 Barplot</h2><p>Using <code>ggplot2</code> library</p><p>Install:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ggplot2&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> library<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ggplot2&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><p>Barplot mainly use for <strong>category</strong>, on <strong>discrete</strong> data.</p><p>Example:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> y<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;c&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> r <span class="hljs-operator">=</span> data.frame<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chartTest <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span>geom_bar<span class="hljs-punctuation">(</span>fill<span class="hljs-operator">=</span><span class="hljs-string">&quot;grey&quot;</span><span class="hljs-punctuation">,</span>stat<span class="hljs-operator">=</span><span class="hljs-string">&quot;identity&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chartTest<br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/26.png" width="70%" height="70%"></center><ul><li><code>ggtitle</code>: chart title;</li><li><code>xlab</code>,<code>ylab</code>: Label for x-axis/y-axis;</li><li><code>Identity</code>: Make the heights of the bars to represent values in the data.</li><li><code>fill</code>: fill with colors or fill with some properties;</li><li><code>position</code>: <code>=&quot;dodge&quot;</code> To create <strong>interleaved</strong> bars;</li></ul><hr><h2 id="6-13-Histograms"><a href="#6-13-Histograms" class="headerlink" title="6.13 Histograms"></a>6.13 Histograms</h2><p>Mainly use for the frequency distribution of a quantitative variable, on <strong>continuous</strong> variable.</p><p>Example:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> chart1 <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>chic<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>temp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span>geom_histogram<span class="hljs-punctuation">(</span>binwidth <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chart1<br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/27.png" width="70%" height="70%"></center><hr><h2 id="6-14-Scatter-Plot"><a href="#6-14-Scatter-Plot" class="headerlink" title="6.14 Scatter Plot"></a>6.14 Scatter Plot</h2><p>Mainly for the relations between data. </p><p>Example</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> chart2 <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>chic<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>time<span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span>temp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span>geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chart2<br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/28.png" width="70%" height="70%"></center><ul><li>Set the <code>color</code>:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> chart2 <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>chic<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>time<span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span>temp<span class="hljs-punctuation">,</span>color<span class="hljs-operator">=</span>season<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span>geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chart2<br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/29.png" width="70%" height="70%"></center><ul><li>Set the <code>shape</code>:</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> chart2 <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>chic<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>time<span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span>temp<span class="hljs-punctuation">,</span>shape<span class="hljs-operator">=</span>season<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span>geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> chart2<br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/30.png" width="70%" height="70%"></center><hr><h1 id="7-Data-Analytics-with-R"><a href="#7-Data-Analytics-with-R" class="headerlink" title="7 Data Analytics with R"></a>7 Data Analytics with R</h1><h2 id="7-1-Simulations"><a href="#7-1-Simulations" class="headerlink" title="7.1 Simulations"></a>7.1 Simulations</h2><blockquote><p>A simulation is an approximate imitation of the operation of a process or system.</p></blockquote><hr><h3 id="7-1-1-Generate-Random-Numbers"><a href="#7-1-1-Generate-Random-Numbers" class="headerlink" title="7.1.1 Generate Random Numbers"></a>7.1.1 Generate Random Numbers</h3><ul><li><code>rnorm</code>($\text{amount},\mu,\sigma$): generate <strong>random Normal variates</strong> with a given <strong>mean</strong> and <strong>standard deviation</strong>;<ul><li>generated <strong>continuously</strong> variables;</li></ul></li><li><code>dnorm</code>:  evaluate the <strong>Normal probability density</strong> (with a given mean/SD) at a point (or vector of points);</li><li><code>pnorm</code>: evaluate the <strong>cumulative distribution function</strong> for a Normal distribution. </li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># N(0,1)</span><br><span class="hljs-operator">&gt;</span> x<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><span class="hljs-number">0.1842525</span> <span class="hljs-operator">-</span><span class="hljs-number">1.3713305</span> <span class="hljs-operator">-</span><span class="hljs-number">0.5991677</span>  <span class="hljs-number">0.2945451</span>  <span class="hljs-number">0.3897943</span> <span class="hljs-operator">-</span><span class="hljs-number">1.2080762</span> <span class="hljs-operator">-</span><span class="hljs-number">0.3636760</span> <span class="hljs-operator">-</span><span class="hljs-number">1.6266727</span> <span class="hljs-operator">-</span><span class="hljs-number">0.2564784</span>  <span class="hljs-number">1.1017795</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># N(20,2^2)</span><br><span class="hljs-operator">&gt;</span> x<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21.51156</span> <span class="hljs-number">19.52353</span> <span class="hljs-number">21.97489</span> <span class="hljs-number">21.48278</span> <span class="hljs-number">20.17869</span> <span class="hljs-number">18.09011</span> <span class="hljs-number">19.60970</span> <span class="hljs-number">21.85104</span> <span class="hljs-number">20.96596</span> <span class="hljs-number">18.80738</span><br><span class="hljs-operator">&gt;</span> summary<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>   Min. <span class="hljs-number">1</span>st Qu.  Median    Mean <span class="hljs-number">3</span>rd Qu.    Max. <br>  <span class="hljs-number">18.09</span>   <span class="hljs-number">19.55</span>   <span class="hljs-number">20.57</span>   <span class="hljs-number">20.40</span>   <span class="hljs-number">21.50</span>   <span class="hljs-number">21.97</span> <br></code></pre></td></tr></table></figure><hr><h3 id="7-1-2-Number-Seed"><a href="#7-1-2-Number-Seed" class="headerlink" title="7.1.2 Number Seed"></a>7.1.2 Number Seed</h3><blockquote><p>A random seed is a number used to <strong>initialize</strong> a <strong>pseudorandom</strong> number generator (a starting point). </p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">set.seed<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># with seed of 1</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><span class="hljs-number">0.6264538</span>  <span class="hljs-number">0.1836433</span> <span class="hljs-operator">-</span><span class="hljs-number">0.8356286</span>  <span class="hljs-number">1.5952808</span>  <span class="hljs-number">0.3295078</span><br><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># without seed of 1</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><span class="hljs-number">0.8204684</span>  <span class="hljs-number">0.4874291</span>  <span class="hljs-number">0.7383247</span>  <span class="hljs-number">0.5757814</span> <span class="hljs-operator">-</span><span class="hljs-number">0.3053884</span><br><span class="hljs-operator">&gt;</span> set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># with seed of 1, the same result with the first one</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><span class="hljs-number">0.6264538</span>  <span class="hljs-number">0.1836433</span> <span class="hljs-operator">-</span><span class="hljs-number">0.8356286</span>  <span class="hljs-number">1.5952808</span>  <span class="hljs-number">0.3295078</span><br></code></pre></td></tr></table></figure><hr><h3 id="7-1-3-Simulating-a-Linear-Model"><a href="#7-1-3-Simulating-a-Linear-Model" class="headerlink" title="7.1.3 Simulating a Linear Model"></a>7.1.3 Simulating a Linear Model</h3><script type="math/tex; mode=display">y=\beta_0+\beta_1x+\epsilon(\beta_0=0.5,\beta_1=2)</script><script type="math/tex; mode=display">\epsilon\sim N(0,2^2), x\sim N(0,1^2)</script><script type="math/tex; mode=display">\Downarrow</script><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> e <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> y <span class="hljs-operator">&lt;-</span> 0.5 <span class="hljs-operator">+</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> x <span class="hljs-operator">+</span> e<br><span class="hljs-operator">&gt;</span> summary<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><br>   Min. <span class="hljs-number">1</span>st Qu.  Median    Mean <span class="hljs-number">3</span>rd Qu.    Max. <br><span class="hljs-operator">-</span><span class="hljs-number">6.4084</span> <span class="hljs-operator">-</span><span class="hljs-number">1.5402</span>  <span class="hljs-number">0.6789</span>  <span class="hljs-number">0.6893</span>  <span class="hljs-number">2.9303</span>  <span class="hljs-number">6.5052</span> <br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/31.png" width="70%" height="70%"></center><hr><h3 id="7-1-4-Random-Sampling"><a href="#7-1-4-Random-Sampling" class="headerlink" title="7.1.4 Random Sampling"></a>7.1.4 Random Sampling</h3><blockquote><p>The <code>sample()</code> function draws randomly from a specified set of (scalar) objects allowing you to sample from arbitrary distributions of numbers.</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Sample Numbers</span><br><span class="hljs-operator">&gt;</span> set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br><br><span class="hljs-comment"># Sample Letters</span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-built_in">letters</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;r&quot;</span> <span class="hljs-string">&quot;s&quot;</span> <span class="hljs-string">&quot;a&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;w&quot;</span><br><br><span class="hljs-comment"># Do a random permutation</span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span>  <span class="hljs-number">6</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5</span>  <span class="hljs-number">8</span>  <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">5</span> <span class="hljs-number">10</span>  <span class="hljs-number">2</span>  <span class="hljs-number">8</span>  <span class="hljs-number">6</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">9</span>  <span class="hljs-number">7</span><br><br><span class="hljs-comment"># Sample with Replacement </span><br><span class="hljs-operator">&gt;</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> replace <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>  <span class="hljs-number">6</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span> <span class="hljs-number">10</span>  <span class="hljs-number">9</span>  <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><strong>To sample a data frame:</strong></p><blockquote><p>sample the <strong>indices</strong> into an object rather than the elements of the object itself.</p></blockquote><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/32.png" width="70%" height="70%"></center><hr><h2 id="7-2-Monte-Carlo-Simulation"><a href="#7-2-Monte-Carlo-Simulation" class="headerlink" title="7.2 Monte Carlo Simulation"></a>7.2 Monte Carlo Simulation</h2><blockquote><p>A method of estimating the value of an unknown quantity using the principles of <strong>inferential statistics</strong> </p><p>Inferential statistics: </p><blockquote><p>Population: a set of examples </p><p>Sample: a proper subset of a population </p><p>Key fact: a <strong>random</strong> sample <strong>tends to exhibit</strong> the same properties as the population from which it is drawn</p></blockquote></blockquote><p><strong>Confidence</strong> in our estimate depends upon two things</p><ul><li>Size of sample;</li><li>Variance of sample.</li></ul><p><strong>Monte Carlo Principal</strong>:</p><ul><li><p>In repeated independent tests with the same actual probability 𝑝 of a particular outcome in each test,the chance that the fraction of times that outcome occurs differs from p converges to zero as the number of trials goes to infinity </p></li><li><p>Intuition: if deviations from expected behaviour occur, these deviations are likely to be evened out by opposite deviations in the future.</p></li><li></li><li><p>Monte Carlo simulation is based on <strong>the law of large numbers</strong>.</p></li><li><p>The confidence of the estimation largely depends on the variance of samples.</p></li><li><p>The training method of Naïve Bayes can be seen as the Monte Carlo simulation. </p></li><li><p>Larger sample size may be helpful to draw unbiased results.</p></li><li><p>It is <strong>NOT</strong> a very effective method possibly allow 100% accuracy.</p></li></ul><hr><h3 id="Poisson-distribution"><a href="#Poisson-distribution" class="headerlink" title="Poisson distribution"></a>Poisson distribution</h3><p>is often used to model rare events that are extremely unlikely to occur within a very short period of time or simultaneously (e.g. within 0.0001s).</p><blockquote><p>describes the probability of a given number of <strong>events occurring in a fixed interval of time and/or space</strong>.</p></blockquote><h3 id="Exponential-Distribution"><a href="#Exponential-Distribution" class="headerlink" title="Exponential Distribution"></a>Exponential Distribution</h3><blockquote><p>used to model the <strong>time that elapses before an event occurs</strong>, e.g., the time between two events. </p></blockquote><p><strong>Exponential Distribution VS. Poisson Distribution</strong><br>The inter-arrival times of events in a Poisson process with rate $\lambda$ is exponential and mean $\frac{1}{\lambda}$.</p><hr><h2 id="7-3-Regression-and-Time-series-Analysis"><a href="#7-3-Regression-and-Time-series-Analysis" class="headerlink" title="7.3 Regression and Time-series Analysis"></a>7.3 Regression and Time-series Analysis</h2><h3 id="7-3-1-Linear-Regression"><a href="#7-3-1-Linear-Regression" class="headerlink" title="7.3.1 Linear Regression"></a>7.3.1 Linear Regression</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>Having <strong>bivariate</strong> data $(x_i,y_i)$,</p><p><strong>Goal</strong>: find a model of the relationship between $x$ and $y$, and build a function $y=f(x)$ fitting the data.</p><p><strong>Assumptions</strong>: $x_i$ is not random, and $y_i$ is function of $x_i$ plus some random noise.</p><p>$x$: the <strong>independent</strong> or <strong>predictor</strong> variable;<br>$y$: the <strong>dependent</strong> or <strong>response</strong> variable.</p><hr><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p><strong>Goal</strong>: find line $y=\beta_1x+\beta_0$ fitting the data.</p><p><strong>Assumptions</strong>:  Each $y_i$ is <strong>predicted</strong> by $x_i$ up to some error $\epsilon_i$: </p><script type="math/tex; mode=display">y_i=\beta_1x_i+\beta_0+\epsilon_i</script><p>So the error is:</p><script type="math/tex; mode=display">\epsilon_i=y_i-\beta_1x_i-\beta_0</script><p>Our goal is to find the $\beta_1$ and $\beta_0$ that minimize the sum of the squares of the errors which is:</p><script type="math/tex; mode=display">S(\beta_0,\beta_1)=\sum_i \epsilon_i^2=\sum_i(y_i-\beta_1x_i-\beta_0)</script><p>Assume the found $\beta_1$ and $\beta_0$: $\hat{\beta_1}$ and $\hat{\beta_0}$:</p><p><strong>Need to use calculus to find.</strong></p><script type="math/tex; mode=display">\hat{\beta_1} = \frac{S_{xy}}{S_{xx}},\; \hat{\beta_0}=\bar{y}-\beta_1\bar{x}</script><p>where:</p><script type="math/tex; mode=display">\bar{x}=\frac{1}{n}\sum_ix_i,\; \bar{y}=\frac{1}{n}\sum_iy_i</script><script type="math/tex; mode=display">S_{xx}=\frac{1}{n-1}\sum_i(x_i-\bar{x})^2\; \text{ : Sample Variance}</script><script type="math/tex; mode=display">S_{xy}=\frac{1}{n-1}\sum_i(x_i-\bar{x})(y_i-\bar{y})\; \text{ : Sample Covariance of $x$ and $y$}</script><p>Or <strong>simply</strong>:</p><script type="math/tex; mode=display">S_{xx} = \sum x_i^2-\frac{1}{n}(\sum x_i)^2</script><script type="math/tex; mode=display">S_{xy} = \sum x_iy_i-\frac{1}{n}(\sum x_i)(\sum y_i)</script><hr><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p><strong>Linear Regression</strong> is <strong>not</strong> only fit in the line, can be in parabola.</p><p><strong>Simple Linear Regression</strong> is fit a line to bivariate data.</p><hr><h4 id="Residuals"><a href="#Residuals" class="headerlink" title="Residuals"></a>Residuals</h4><p>The error $\epsilon_i$ is called the <strong>residual</strong>, which is random noise or measurement error.</p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/33.png" width="70%" height="70%"></center><hr><h4 id="Homoscedasticity-and-Heteroscedasticity"><a href="#Homoscedasticity-and-Heteroscedasticity" class="headerlink" title="Homoscedasticity and Heteroscedasticity"></a>Homoscedasticity and Heteroscedasticity</h4><p><strong>Homoscedasticity</strong>: the residuals $\epsilon_i$ have the <strong>same variance</strong> for all $i$, means data points should hover near the regression line <strong>more evenly</strong>.</p><p><strong>Heteroscedasticity</strong>: the residuals $\epsilon_i$ have the <strong>different variance</strong> for all $i$, means data points would not hover near the regression line <strong>more evenly</strong>.</p><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/34.png" width="70%" height="70%"></center><hr><h4 id="Linear-Regression-for-Multivariate"><a href="#Linear-Regression-for-Multivariate" class="headerlink" title="Linear Regression for Multivariate"></a>Linear Regression for Multivariate</h4><p>multivariate data: $(x_1,x_2,…,x_i,y_i)$</p><p>The fit line is $y=\beta_0+\beta_1x_1+\beta_2x_2+…+\beta_ix_i$</p><p>So,</p><script type="math/tex; mode=display">S(\beta_1,\beta_2,...,\beta_i)=\sum_i(\beta_0+\beta_1x_1+\beta_2x_2+...+\beta_ix_i-y_i)^2</script><hr><h3 id="7-3-2-Polynomial-Regression"><a href="#7-3-2-Polynomial-Regression" class="headerlink" title="7.3.2 Polynomial Regression"></a>7.3.2 Polynomial Regression</h3><p>Linear Regression’s <strong>Linear</strong> means the exponent of $\beta_i$ is 1;<br>Polynomial Regression’s <strong>Polynomial</strong> means the exponent of $\beta_i$ can be greater than 1.</p><p>For parabola:</p><p>The fit curve is $y=\beta_0+\beta_1x+\beta_2x^2$</p><p>So, </p><script type="math/tex; mode=display">S(\beta_1,\beta_2,\beta_3)=\sum_i(\beta_0+\beta_1x_1+\beta_2x_2^2-y_i)^2</script><hr><h3 id="7-3-3-Fit-Measurement"><a href="#7-3-3-Fit-Measurement" class="headerlink" title="7.3.3 Fit Measurement"></a>7.3.3 Fit Measurement</h3><p>For </p><script type="math/tex; mode=display">y=(y_1,y_2,...,y_n)</script><script type="math/tex; mode=display">\hat{h}=(\hat{y_1},\hat{y_2},...,\hat{y_n})</script><p>Total Sum of Squares (TSS): </p><script type="math/tex; mode=display">\sum_i(y_i-\bar{y})^2\; \text{ : variance}</script><p>Residual Sum of Squares (RSS):</p><script type="math/tex; mode=display">\sum_i(y_i-\hat{y_i})^2\; \text{ : real - predicted}</script><p>The goodness of fit:</p><script type="math/tex; mode=display">R^2=1-\frac{RSS}{TSS}</script><p>With larger variance, more complicated.</p><hr><p><strong>Overfitting</strong>:</p><p>More complex model, better fitness;<br>Tradeoff between goodness of fit and complexity.</p><hr><h3 id="7-3-4-Time-series-Analysis"><a href="#7-3-4-Time-series-Analysis" class="headerlink" title="7.3.4 Time-series Analysis"></a>7.3.4 Time-series Analysis</h3><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/35.png" width="70%" height="70%"></center><center><img src="/2022/04/30/introduction-to-data-analytics-course-note/36.png" width="70%" height="70%"></center><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Slides of COMP1433 Introduction to Data Analytics, The Hong Kong Polytechnic University.</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Data Analytics</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Calculus for Engineers Course Note</title>
    <link href="/2022/04/28/calculus-for-engineers-course-note/"/>
    <url>/2022/04/28/calculus-for-engineers-course-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p>Course note of <strong>AMA1130 Calculus for Engineers</strong>, The Hong Kong Polytechnic University, 2022.</p><p>Mainly focus on <strong>functions</strong>, <strong>limits</strong>, <strong>continuity</strong>, <strong>differentiation</strong>, and <strong>integration</strong>.</p><span id="more"></span><hr><h1 id="1-Functions"><a href="#1-Functions" class="headerlink" title="1 Functions"></a>1 Functions</h1><h2 id="1-1-Sets"><a href="#1-1-Sets" class="headerlink" title="1.1 Sets"></a>1.1 Sets</h2><blockquote><p>A collection of objects</p></blockquote><ul><li>$\Bbb{N}$: set of <strong>positive integers</strong> ${1,2,3,4,5,…}$;</li><li>$\Bbb{Z}$: set of <strong>integers</strong> ${…,-3.-2.-1,0,1,2,3,…}$;</li><li>$\Bbb{Q}$: set of <strong>rational numbers</strong> ${\frac{integer}{integer}}$, Q for <em>quotient</em>;</li><li>$\Bbb{R}$: set of <strong>real numbers</strong>;</li><li>$\Bbb{C}$: set of <strong>complex numbers</strong>;</li></ul><script type="math/tex; mode=display">\Bbb{N}\subset\Bbb{Z}\subset\Bbb{Q}\subset\Bbb{R}\subset\Bbb{C}</script><hr><h2 id="1-2-Functions"><a href="#1-2-Functions" class="headerlink" title="1.2 Functions"></a>1.2 Functions</h2><h3 id="1-2-1-Definition"><a href="#1-2-1-Definition" class="headerlink" title="1.2.1 Definition"></a>1.2.1 Definition</h3><blockquote><p>Function is a map from a set $A$ to set $B$, $f:A\to B$.<br>For each $x \in A$, there is a <strong>unique</strong> $y \in B$, such that $f(x)=y$</p><script type="math/tex; mode=display">\begin{cases}    f(x_1) = y_1\\    f(x_2) = y_2\end{cases} \implies y_1=y_2\;\text{[uniqueness]}</script></blockquote><p>Notation:</p><script type="math/tex; mode=display">y=f(x)</script><p>$x$: <strong>independent</strong> variable(argument);<br>$y$: <strong>dependent</strong> variable.</p><p>$Dom(f)$: <strong>domain</strong> of the function $f$, the set where $f$ is allowed to take values;<br>$Range(f)$: <strong>range</strong> of the function $f$, the set of all possible values of $f(x)$ with $x$ in the $Dom(f)$.</p><hr><ul><li><p><strong>Sum</strong>: $(f+g)(x)=f(x)+g(x)$</p></li><li><p><strong>Difference</strong>: $(f-g)(x)=f(x)-g(x)$</p></li><li><p><strong>Product</strong>: $(fg)(x)=f(x)g(x)$</p><ul><li>Domains of above 3 functions:</li></ul></li></ul><script type="math/tex; mode=display">Dom(f) \cap Dom(g)</script><ul><li><strong>Quotient</strong>: $(\frac{f}{g})(x)=\frac{f(x)}{g(x)}\text{, when }g(x)\ne 0$</li></ul><ul><li>Domain of this function:</li></ul><script type="math/tex; mode=display">\{x\in Dom(f) \cap Dom(g):g(x)\ne 0\}</script><hr><h3 id="1-2-2-Absolute-Value"><a href="#1-2-2-Absolute-Value" class="headerlink" title="1.2.2 Absolute Value"></a>1.2.2 Absolute Value</h3><script type="math/tex; mode=display">y=f(x)=|x|=\begin{cases}    x,&\text{if\;\;$x\ge 0$,}\\    -x,&\text{if\;\;$x\lt 0$.}\end{cases}</script><p>$Dom(f)=\Bbb{R}$<br>$Range(f)=[0,\infin)$</p><hr><h3 id="1-2-3-Composite-Functions"><a href="#1-2-3-Composite-Functions" class="headerlink" title="1.2.3 Composite Functions"></a>1.2.3 Composite Functions</h3><blockquote><p>Two functions $f:A\to B$ and $g:C\to D$, then $Range(f)\subset C$ (means $\forall x\in X$, $f(x)\in C$).<br>The composite function $g\circ f: A\to D$ is:</p></blockquote><script type="math/tex; mode=display">(g\circ f)(x)=g(f(x))</script><ul><li><strong>Domain of Composite function:</strong></li></ul><p>$Dom(g\circ f) = {x\in Dom(f):f(x)\in Dom(g)} = Dom(f)\cap {x:f(x)\in Dom(g)}$</p><p>$Dom(f\circ g) = {x\in Dom(g):g(x)\in Dom(f)} = Dom(g)\cap {x:g(x)\in Dom(f)}$</p><blockquote><p>Find the $Dom(f\circ g)$:</p><ol><li>Find $Dom(g)$;</li><li>Find $Dom(f)$;</li><li>Find $x$ such that in $Dom(g)$ <strong>and</strong> which $g(x)$ is in $Dom(f)$.</li></ol></blockquote><p><strong>[Example]</strong></p><p><img src="/2022/04/28/calculus-for-engineers-course-note/1.png" alt></p><p><strong>[Solution]</strong></p><p><img src="/2022/04/28/calculus-for-engineers-course-note/2.png" alt></p><hr><h3 id="1-2-4-Inverse-Functions"><a href="#1-2-4-Inverse-Functions" class="headerlink" title="1.2.4 Inverse Functions"></a>1.2.4 Inverse Functions</h3><p>If </p><script type="math/tex; mode=display">(g\circ f)(x)=g(f(x))=x,\; \forall x\in Dom(f)</script><p>, then $g$ is the <strong>inverse function</strong> of $f$, as $f^{-1}$:</p><script type="math/tex; mode=display">(f^{-1}\circ f)(x)=x</script><p>A one-to-one function has a inverse function.</p><hr><h3 id="1-2-5-One-to-one-Functions"><a href="#1-2-5-One-to-one-Functions" class="headerlink" title="1.2.5 One-to-one Functions"></a>1.2.5 One-to-one Functions</h3><blockquote><p>The function <strong>never</strong> takes <strong>one the same value</strong> twice:</p></blockquote><script type="math/tex; mode=display">x_1\ne x_2 \iff f(x_1)\ne f(x_2)</script><h4 id="1-2-5-1-Horizontal-Line-Test"><a href="#1-2-5-1-Horizontal-Line-Test" class="headerlink" title="1.2.5.1 Horizontal Line Test"></a>1.2.5.1 Horizontal Line Test</h4><blockquote><p>A function is one-to-one <strong>if and only if</strong> no horizontal line intersects its graph more than once.</p></blockquote><p><img src="/2022/04/28/calculus-for-engineers-course-note/3.png" alt></p><hr><blockquote><p>$f$ is a one-to-one function with domain $A$ and range $B$, then $f^{-1}$ has domain $B$ and range $A$:</p></blockquote><script type="math/tex; mode=display">f^{-1}(y)=x\iff f(x)=y,\; \forall y \in Bs</script><p><strong>[Example]</strong></p><p>for one-to-one function $f$,<br>$f(1)=2,f(3)=5,f(8)=6$, </p><p>then $f^{-1}(2)=1,f^{-1}(5)=3,f^{-1}(6)=8$</p><blockquote><p>Find the inverse function:</p><ol><li>Write $y=f(x)$;</li><li>Solve above equation for $x$ in terms of $y$;</li><li>The above result is $x=f^{-1}(y)$</li></ol></blockquote><p><strong>[Example]</strong></p><p>Find the inverse function of $f(x)=x^3+2$</p><ol><li>$y=f(x)=x^3+2$;</li><li>$x^3=y-2 \implies x=\sqrt[3]{y-2}$;</li><li>$f^{-1}(y)=x=\sqrt[3]{y-2}$.</li></ol><hr><blockquote><p>Determine whether is a one-to-one function:</p><ul><li>To show it is a one-to-one function:<br>show $x_1\ne x_2 \iff f(x_1)\ne f(x_2)$ or $x_1= x_2 \iff f(x_1)= f(x_2)$</li><li>To show it is NOT a one-to-one function:<br>show $x_1\ne x_2$, but $f(x_1)= f(x_2)$</li></ul></blockquote><p><strong>[Example]</strong></p><p><img src="/2022/04/28/calculus-for-engineers-course-note/4.png" alt></p><hr><h1 id="2-Periodic-Functions-Polynomials-Trigonometric-Functions-Exponential-Functions-Logarithmic-Functions"><a href="#2-Periodic-Functions-Polynomials-Trigonometric-Functions-Exponential-Functions-Logarithmic-Functions" class="headerlink" title="2 Periodic Functions, Polynomials, Trigonometric Functions, Exponential Functions, Logarithmic Functions"></a>2 Periodic Functions, Polynomials, Trigonometric Functions, Exponential Functions, Logarithmic Functions</h1><h2 id="2-1-Periodic-Functions"><a href="#2-1-Periodic-Functions" class="headerlink" title="2.1 Periodic Functions"></a>2.1 Periodic Functions</h2><blockquote><p>A function with a positive constant $T\gt 0$ such that:</p></blockquote><script type="math/tex; mode=display">f(x+T)=f(x),\; \forall x \in Dom(f)</script><p>$T$ is the <strong>period</strong>.</p><hr><h2 id="2-2-Polynomials"><a href="#2-2-Polynomials" class="headerlink" title="2.2 Polynomials"></a>2.2 Polynomials</h2><blockquote><p>A function in thr form:</p></blockquote><script type="math/tex; mode=display">P(x)=a_0+a_1x+a_2x^2+...+a_nx^n</script><ul><li>$a_0,a_1,…,a_n\in \Bbb{R}$ are constant numbers, called the <strong>coefficients</strong>;</li><li>$x\in \Bbb{R}$: independent variable;</li><li><strong>Degree</strong> of $P(x)$: $n$, if $a_n\ne 0$, $deg(P)=n$;</li><li><strong>Zero</strong> of $P(x)$: the <strong>root</strong>(or <strong>solution</strong>) of $P(x)=0$;</li><li>Commonly used polynomials:<ul><li>degree = 0: <strong>constant</strong>;</li><li>degree = 1: <strong>linear</strong>;</li><li>degree = 2: <strong>quadratic</strong>;</li><li>degree = 3: <strong>cubic</strong>.</li></ul></li></ul><blockquote><p>Dividing a polynomial $P(x)$ by $x-a$, the remainder is $P(a)$</p></blockquote><p><strong>[Example]</strong></p><p>$P(x)=x^3-1,\;a=2,\text{then }x-a = x-2$<br>$P(x)=x^3-1=(x-2)(x^2+2x+4)+7=(x-2)(x^2+2x+4)+P(2)$</p><hr><ul><li>Some factorization formulas for polynomials</li></ul><p><img src="/2022/04/28/calculus-for-engineers-course-note/5.png" alt></p><hr><h2 id="2-3-Trigonometric-Functions"><a href="#2-3-Trigonometric-Functions" class="headerlink" title="2.3 Trigonometric Functions"></a>2.3 Trigonometric Functions</h2><h3 id="2-3-1-Degree-and-Radian"><a href="#2-3-1-Degree-and-Radian" class="headerlink" title="2.3.1 Degree and Radian"></a>2.3.1 Degree and Radian</h3><script type="math/tex; mode=display">360\degree=2\pi\;rad</script><script type="math/tex; mode=display">1\degree=\frac{2\pi}{360}rad,\;1\;rad=\Bigl(\frac{360}{3\pi}\Bigr)\degree</script><p><img src="/2022/04/28/calculus-for-engineers-course-note/6.png" alt></p><hr><h3 id="2-3-2-Standard-position-of-angles"><a href="#2-3-2-Standard-position-of-angles" class="headerlink" title="2.3.2 Standard position of angles"></a>2.3.2 Standard position of angles</h3><ul><li><strong>Standard position</strong>: in the xy-plane, its <strong>initial side</strong> on the <strong>positive x-axis</strong>;</li><li><strong>Positive Angle</strong>: rotating the initial side <strong>counterclockwise</strong>;</li><li><strong>Negative Angles</strong>: rotating the initial side <strong>clockwise</strong>.</li></ul><hr><h3 id="2-3-3-Trigonometric-Functions"><a href="#2-3-3-Trigonometric-Functions" class="headerlink" title="2.3.3 Trigonometric Functions"></a>2.3.3 Trigonometric Functions</h3><center><img src="/2022/04/28/calculus-for-engineers-course-note/7.png" width="60%" height="60%"></center><hr><center><img src="/2022/04/28/calculus-for-engineers-course-note/8.png" width="60%" height="60%"></center><ul><li><p><strong>Widely used properties</strong>:</p><ul><li><script type="math/tex; mode=display">\sin (-x)=-\sin x \;\;\; \text{odd}</script></li><li><script type="math/tex; mode=display">\cos (-x)=\cos x \;\;\; \text{evens}</script></li><li><script type="math/tex; mode=display">\tan (-x)=-\tan x \;\;\; \text{odd}</script>-</li><li><script type="math/tex; mode=display">\sin (\pi -x)=\sin x</script></li><li><script type="math/tex; mode=display">\sin (\pi +x)=-\sin x</script></li><li><script type="math/tex; mode=display">\cos (\pi \pm x)=-\cos x</script>-</li><li><script type="math/tex; mode=display">\sin (\frac{\pi}{2} \pm x)=\cos x</script></li><li><script type="math/tex; mode=display">\cos (\frac{\pi}{2} + x)=-\sin x</script></li><li><script type="math/tex; mode=display">\cos (\frac{\pi}{2} - x)=\sin x</script>-</li><li><script type="math/tex; mode=display">\sin (x+2n\pi)=\sin x,\;\;\; n=0,\pm 1,\pm 2,...</script></li><li><script type="math/tex; mode=display">\cos (x+2n\pi)=\cos x,\;\;\; n=0,\pm 1,\pm 2,...</script></li><li><script type="math/tex; mode=display">\tan (x+n\pi)=\tan x,\;\;\; n=0,\pm 1,\pm 2,...</script></li><li></li><li><script type="math/tex; mode=display">\cot x=\frac{\cos x}{\sin x},\;\sec x=\frac{1}{\cos x},\; \csc x=\frac{1}{\sin x}</script></li><li><script type="math/tex; mode=display">\tan^2 x+1=\sec^2x,\;\cot^2 x+1=\csc^2 x</script></li></ul></li><li><p><strong>Compound angle formulas</strong>:</p><ul><li><script type="math/tex; mode=display">\sin (A+B)=\sin A\cos B+\cos A \sin B</script></li><li><script type="math/tex; mode=display">\sin (A-B)=\sin A\cos B-\cos A \sin B</script></li><li></li><li><script type="math/tex; mode=display">\cos (A+B)=\cos A\cos B-\sin A \sin B</script></li><li><script type="math/tex; mode=display">\cos (A-B)=\cos A\cos B+\sin A \sin B</script></li><li></li><li><script type="math/tex; mode=display">\tan(A+B)=\frac{\tan A+\tan B}{1-\tan A \tan B}</script></li><li><script type="math/tex; mode=display">\tan(A-B)=\frac{\tan A-\tan B}{1+\tan A \tan B}</script></li></ul></li><li><p><strong>Double angle formulas</strong>:</p><ul><li><script type="math/tex; mode=display">\sin 2A=2\sin A\cos A</script></li><li><script type="math/tex; mode=display">\cos 2A=\cos^2 A-\sin^2 A</script><ul><li><script type="math/tex; mode=display">=1-2\sin^2 A</script></li><li><script type="math/tex; mode=display">=2\cos^2 A-1</script></li></ul></li><li><script type="math/tex; mode=display">\tan 2A=\frac{2\tan A}{1-\tan^2 A}</script></li><li></li><li><script type="math/tex; mode=display">\cos^2 A=\frac{1+\cos 2A}{2}</script></li><li><script type="math/tex; mode=display">\sin^2 A=\frac{1-\cos 2A}{2}</script></li></ul></li><li><p><strong>Conversion formulas</strong>:</p><ul><li><script type="math/tex; mode=display">\sin(x+y)+\sin(x-y)=2\sin x \cos y</script></li><li><script type="math/tex; mode=display">\sin(x+y)-\sin(x-y)=2\cos x \sin y</script></li><li></li><li><script type="math/tex; mode=display">\cos(x+y)+\cos(x-y)=2\cos x \cos y</script></li><li><script type="math/tex; mode=display">\cos(x+y)-\cos(x-y)=-2\sin x \sin y</script></li><li></li><li><script type="math/tex; mode=display">\sin(A)+\sin(B)=2\sin (\frac{A+B}{2}) \cos (\frac{A-B}{2})</script></li><li><script type="math/tex; mode=display">\sin(A)-\sin(B)=2\cos (\frac{A+B}{2}) \sin (\frac{A-B}{2})</script></li><li><script type="math/tex; mode=display">\cos(A)+\cos(B)=2\cos (\frac{A+B}{2}) \cos (\frac{A-B}{2})</script></li><li><script type="math/tex; mode=display">\cos(A)-\cos(B)=-2\sin (\frac{A+B}{2}) \sin (\frac{A-B}{2})</script></li></ul></li></ul><hr><h2 id="2-4-Inverse-Trigonometric-Functions"><a href="#2-4-Inverse-Trigonometric-Functions" class="headerlink" title="2.4 Inverse Trigonometric Functions"></a>2.4 Inverse Trigonometric Functions</h2><h3 id="2-4-1-Inverse-of-sin"><a href="#2-4-1-Inverse-of-sin" class="headerlink" title="2.4.1 Inverse of $\sin$"></a>2.4.1 Inverse of $\sin$</h3><script type="math/tex; mode=display">x=\sin^{-1}(y) \iff y=\sin x,\;-\frac{\pi}{2}\le x \le \frac{\pi}{2}</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/9.png" width="30%" height="30%"></center><ul><li>$Dom(\sin^{-1})$ = $[-1,1]$</li><li>$Range(\sin^{-1})$ = $[-\frac{\pi}{2},\frac{\pi}{2}]$</li><li></li><li>$\sin^{-1}=\arcsin$</li></ul><ul><li><script type="math/tex; mode=display">\sin^{-1} (\sin x)=x,\;  \forall x \in [-\frac{\pi}{2},\frac{\pi}{2}]</script></li><li><script type="math/tex; mode=display">\sin (\sin^{-1}y)=y,\;  \forall y \in [-1,1]</script></li></ul><hr><h3 id="2-4-2-Inverse-of-cos"><a href="#2-4-2-Inverse-of-cos" class="headerlink" title="2.4.2 Inverse of $\cos$"></a>2.4.2 Inverse of $\cos$</h3><script type="math/tex; mode=display">x=\cos^{-1}(y) \iff y=\cos x,\;0\le x \le \pi</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/10.png" width="30%" height="30%"></center><ul><li>$Dom(\cos^{-1})$ = $[-1,1]$</li><li>$Range(\cos^{-1})$ = $[0,\pi]$</li><li></li><li><p>$\cos^{-1}=\arccos$</p></li><li><script type="math/tex; mode=display">\cos^{-1} (\cos x)=x,\;  \forall x \in [0,\pi]</script></li><li><script type="math/tex; mode=display">\cos (\cos^{-1}y)=y,\;\forall y \in [-1,1]</script></li></ul><hr><h3 id="2-4-3-Inverse-of-tan"><a href="#2-4-3-Inverse-of-tan" class="headerlink" title="2.4.3 Inverse of $\tan$"></a>2.4.3 Inverse of $\tan$</h3><script type="math/tex; mode=display">x=\tan^{-1}(y) \iff y=\tan x,\;-\frac{\pi}{2}\le x \le \frac{\pi}{2}</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/11.png" width="50%" height="50%"></center><ul><li>$Dom(\tan^{-1})$ = $(-\infty,\infty)$</li><li>$Range(\tan^{-1})$ = $-\frac{\pi}{2}\lt x \lt \frac{\pi}{2}$</li><li></li><li><p>$\tan^{-1}=\arctan$</p></li><li><script type="math/tex; mode=display">\tan^{-1} (\tan x)=x,\;  \forall x \in (-\frac{\pi}{2},\frac{\pi}{2})</script></li><li><script type="math/tex; mode=display">\tan (\tan^{-1}y)=y,\;\forall y \in (-\infty,\infty)</script></li></ul><hr><p><strong>Widely used properties</strong>:</p><script type="math/tex; mode=display">\cos(\tan^{-1}b)=\frac{1}{\sqrt{1+b^2}}</script><hr><h2 id="2-5-Exponential-Functions"><a href="#2-5-Exponential-Functions" class="headerlink" title="2.5 Exponential Functions"></a>2.5 Exponential Functions</h2><script type="math/tex; mode=display">y=a^x</script><blockquote><p>a to the power x</p></blockquote><p><strong>base</strong>: $a&gt;0$<br><strong>exponent</strong> (index,power): $x$</p><p><strong>Law of Exponents</strong>:</p><ul><li><script type="math/tex; mode=display">a^ma^n = a^{m+n}</script></li><li><script type="math/tex; mode=display">\frac{a^m}{a^n}=a^{m-n}</script></li><li><script type="math/tex; mode=display">(a^m)^n=a^{mn}</script></li><li><script type="math/tex; mode=display">a^0=1</script></li><li><script type="math/tex; mode=display">a^{-1}=\frac{1}{a}</script></li><li><script type="math/tex; mode=display">a^{-m}=\frac{1}{a^m}</script></li></ul><p><strong>Natural Exponential Function</strong> ($exp$):</p><script type="math/tex; mode=display">\exp (x)=e^x</script><p>$e=2.718281828459$</p><hr><h2 id="2-6-Logarithmic-Functions"><a href="#2-6-Logarithmic-Functions" class="headerlink" title="2.6 Logarithmic Functions"></a>2.6 Logarithmic Functions</h2><script type="math/tex; mode=display">y=\log_a x, x\gt 0</script><blockquote><p>the logarithm of x to the base a</p></blockquote><script type="math/tex; mode=display">\log_aa=1,\; \log_a1=0</script><blockquote><p>Logarithmic Function the <strong>inverse</strong> of Exponential Function:</p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/12.png" width="40%" height="40%"></center><hr><p><strong>Rules of logarithm</strong> ($a,b,x,y\in \Bbb{R^+}$):</p><ul><li><script type="math/tex; mode=display">\log_a(xy)=\log_ax+\log_ay</script></li><li><script type="math/tex; mode=display">\log_a(\frac{x}{y})=\log_ax-\log_ay</script></li><li><script type="math/tex; mode=display">\log_ax=\frac{\log_bx}{\log_ba}</script></li><li><script type="math/tex; mode=display">\log_a1=0</script></li><li><script type="math/tex; mode=display">\log_ax^m=m\log_ax,\;m\in \Bbb{R}</script></li><li><script type="math/tex; mode=display">\log_{a^n}x=\frac{1}{n}\log_ax,\;n\in \Bbb{R}</script></li></ul><p>when the base is $e=2.718281828459$, the Logarithmic Function is $in$ or $log$;</p><script type="math/tex; mode=display">x=\ln y \iff y=e^x</script><hr><h1 id="3-Limits"><a href="#3-Limits" class="headerlink" title="3 Limits"></a>3 Limits</h1><h2 id="3-1-Limits-Definition"><a href="#3-1-Limits-Definition" class="headerlink" title="3.1 Limits Definition"></a>3.1 Limits Definition</h2><script type="math/tex; mode=display">\lim_{x\to a}f(x)=L</script><p>Read as ‘the limit of $f(x)$, as $x$ approaches the point $a$, equals $L$’.</p><blockquote><p>$f(x)$ defined when $x$ around number $a$, which means in a open interval contains $a$ but never consider $x=a$, just near it. Then we can make $f(x)$ very close to $L$ by sending $x$ sufficiently close to $a$, around both sides of $a$.</p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/13.png" width="60%" height="60%"></center><hr><h2 id="3-2-One-Side-Limits"><a href="#3-2-One-Side-Limits" class="headerlink" title="3.2 One-Side Limits"></a>3.2 One-Side Limits</h2><p><strong>left-hand limit</strong>:</p><script type="math/tex; mode=display">\lim_{x\to a^-}f(x)=L</script><p>Read as left-hand limit of $f(x)$ as $x$ approaches $a$ is equal to $L$</p><blockquote><p>we can make $f(x)$ very close to $L$ by sending $x$ sufficiently close to $a$, with $x$ less than $a$, from the left of $a$.</p></blockquote><p><strong>right-hand limit</strong>:</p><script type="math/tex; mode=display">\lim_{x\to a^+}f(x)=L</script><p>Read as right-hand limit of $f(x)$ as $x$ approaches $a$ is equal to $L$</p><blockquote><p>we can make $f(x)$ very close to $L$ by sending $x$ sufficiently close to $a$, with $x$ great than $a$, from the right of $a$.</p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/14.png" width="60%" height="60%"></center><hr><p><strong>Theorem</strong>:</p><script type="math/tex; mode=display">\lim_{x\to a}f(x)=L\iff \lim_{x\to a^-}f(x)=L \;\text{ and }\; \lim_{x\to a^+}f(x)=L</script><hr><h2 id="3-3-Properties-of-Limits"><a href="#3-3-Properties-of-Limits" class="headerlink" title="3.3 Properties of Limits"></a>3.3 Properties of Limits</h2><blockquote><p>$n$: positive integer<br>$k$: constant<br>Assume $\lim<em>{x\to a}f(x)$ and $\lim</em>{x\to a}g(x)$ exits.</p></blockquote><script type="math/tex; mode=display">\lim_{x\to a}k=k</script><script type="math/tex; mode=display">\lim_{x\to a}x=a</script><script type="math/tex; mode=display">\lim_{x\to a}kf(x)=k\lim_{x\to a}f(x)</script><script type="math/tex; mode=display">\lim_{x\to a}[f(x)\pm g(x)]=\lim_{x\to a}f(x)\pm \lim_{x\to a}g(x)</script><script type="math/tex; mode=display">\lim_{x\to a}[\frac{f(x)}{g(x)}]=\frac{\lim_{x\to a}f(x)}{\lim_{x\to a}g(x)}</script><script type="math/tex; mode=display">\lim_{x\to a}[f(x)]^n=[\lim_{x\to a}f(x)]^n</script><script type="math/tex; mode=display">\lim_{x\to a}\sqrt[n]{f(x)}=\sqrt[n]{\lim_{x\to a}f(x)}</script><p>So<br>$\forall n \in \Bbb{Z}^+$</p><script type="math/tex; mode=display">\lim_{x\to a}x^n=a^n</script><script type="math/tex; mode=display">\lim_{x\to a}\sqrt[n]{x}=\sqrt[n]{a}</script><p>and,</p><script type="math/tex; mode=display">\lim_{x\to 0}\frac{\sin x}{x}=1</script><script type="math/tex; mode=display">\lim_{x\to 0}\frac{x}{\sin x}=1</script><script type="math/tex; mode=display">\lim_{x\to 0}\frac{\sin (2x)}{x}=2</script><hr><h2 id="3-4-Composite-functions"><a href="#3-4-Composite-functions" class="headerlink" title="3.4 Composite functions"></a>3.4 Composite functions</h2><script type="math/tex; mode=display">\lim_{x\to a}f(x)=A\text{ and }\lim_{u\to A}f(x)=B</script><script type="math/tex; mode=display">\implies \lim_{x\to a}g(f(x))=B</script><hr><h2 id="3-5-Squeeze-Theorem-Sandwich-Principle"><a href="#3-5-Squeeze-Theorem-Sandwich-Principle" class="headerlink" title="3.5 Squeeze Theorem - Sandwich Principle"></a>3.5 Squeeze Theorem - Sandwich Principle</h2><p>For $f(x)\le g(x)\le h(x)$, for all near $a$, expect possibly at $a$ itself:</p><script type="math/tex; mode=display">\lim_{x\to a}f(x)=\lim_{x\to a}h(x)=L</script><script type="math/tex; mode=display">\implies \lim_{x\to a}g(x)=L</script><blockquote><p>Immediate consequence of the Squeeze Theorem:</p></blockquote><p>If $g(x)$ is bounded near $a$, expect possibly ar $a$ itself, which means $|g(x)|\le K$, $K$ is a constant for an open interval containing $a$:</p><script type="math/tex; mode=display">\lim_{x\to a}f(x)=0\implies\lim_{x\to a}f(x)g(x)=0</script><p>It is also true for ons-side limits. </p><hr><h2 id="3-6-Infinite-limits"><a href="#3-6-Infinite-limits" class="headerlink" title="3.6 Infinite limits"></a>3.6 Infinite limits</h2><script type="math/tex; mode=display">\lim_{x\to a^+}f(x)=\infin</script><blockquote><p>the value of $f(x)$ can be <strong>bigger than any prescribed positive and large number</strong> by taking $x\gt a$ and close enough to $a$, approaches Infinity as x approaches $a$ from the right. </p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/15.png" width="60%" height="60%"></center><script type="math/tex; mode=display">\frac{1}{0^-}=-\infin</script><script type="math/tex; mode=display">\frac{1}{0^+}=\infin</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/16.png" width="70%" height="70%"></center><hr><h2 id="3-7-Limits-at-Infinity"><a href="#3-7-Limits-at-Infinity" class="headerlink" title="3.7 Limits at Infinity"></a>3.7 Limits at Infinity</h2><script type="math/tex; mode=display">\lim_{x\to \infin}\frac{1}{x}=0</script><script type="math/tex; mode=display">\lim_{x\to -\infin}\frac{1}{x}=0</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/17.png" width="70%" height="70%"></center><hr><script type="math/tex; mode=display">\lim_{x\to \infin}\frac{c}{x^r}=0</script><script type="math/tex; mode=display">\lim_{x\to -\infin}\frac{c}{x^r}=0</script><script type="math/tex; mode=display">\forall r\gt 0</script><hr><h3 id="3-7-1-Limits-at-infinity-for-Polynomial"><a href="#3-7-1-Limits-at-infinity-for-Polynomial" class="headerlink" title="3.7.1 Limits at infinity for Polynomial"></a>3.7.1 Limits at infinity for Polynomial</h3><p>For <strong>polynomial</strong>:</p><script type="math/tex; mode=display">P(x)=a_nx^n+a_{n-1}x^{n-1}+\cdots + a_1x+a_0, a_0\ne 0,</script><script type="math/tex; mode=display">\Downarrow</script><script type="math/tex; mode=display">\lim_{x\to \infin}P(x)=\lim_{x\to \infin}a_nx^n,</script><script type="math/tex; mode=display">\lim_{x\to -\infin}P(x)=\lim_{x\to -\infin}a_nx^n</script><hr><h3 id="3-7-2-Limits-at-infinity-for-Rational-functions"><a href="#3-7-2-Limits-at-infinity-for-Rational-functions" class="headerlink" title="3.7.2 Limits at infinity for Rational functions"></a>3.7.2 Limits at infinity for Rational functions</h3><p>For <strong>Rational functions</strong>:</p><script type="math/tex; mode=display">P(x)=a_nx^n+a_{n-1}x^{n-1}+\cdots + a_1x+a_0, a_0\ne 0,</script><script type="math/tex; mode=display">Q(x)=b_mx^m+b_{m-1}x^{m-1}+\cdots + b_1x+b_0, b_0\ne 0,</script><script type="math/tex; mode=display">\Downarrow</script><script type="math/tex; mode=display">\lim_{x\to \infin}\frac{P(x)}{Q(x)}=\lim_{x\to \infin}\frac{a_nx^n}{b_mx^m},</script><script type="math/tex; mode=display">\lim_{x\to -\infin}\frac{P(x)}{Q(x)}=\lim_{x\to -\infin}\frac{a_nx^n}{b_mx^m}</script><hr><center><img src="/2022/04/28/calculus-for-engineers-course-note/18.png" width="70%" height="70%"></center><hr><h2 id="3-8-Continuity-of-functions"><a href="#3-8-Continuity-of-functions" class="headerlink" title="3.8 Continuity of functions"></a>3.8 Continuity of functions</h2><p>$f(x)$ is <strong>continuous</strong> at a point $a$ if</p><script type="math/tex; mode=display">\lim_{x\to a}f(x)=f(a)</script><p>$f(x)$ is <strong>discontinuous</strong> if any of following is true:</p><ol><li>$f(a)$ is not defined;</li><li>$\lim_{x\to a}f(x)$ does not exist;</li><li>$\lim_{x\to a}f(x)\ne f(a)$.</li></ol><hr><p><strong>Properties of continuity</strong>:</p><p>$f(x),g(x)$ are continuous at $a$, $n$ is positive integer, following are also continuous at $a$:</p><p>Scalar multiple:</p><script type="math/tex; mode=display">kf(x)</script><p>Sum &amp; Difference:</p><script type="math/tex; mode=display">f(x)+g(x),f(x)-g(x)</script><p>Product:</p><script type="math/tex; mode=display">f(x)g(x)</script><p>Quotient:</p><script type="math/tex; mode=display">\frac{f(x)}{g(x)},\text{ if }g(a)\ne 0</script><p>Power:</p><script type="math/tex; mode=display">[f(x)]^n</script><p>Root:</p><script type="math/tex; mode=display">\sqrt[n]{f(x)}\text{ assume $f(a)\ge 0$ if $n$ is even}</script><hr><center><img src="/2022/04/28/calculus-for-engineers-course-note/19.png" width="70%" height="70%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/20.png" width="70%" height="70%"></center><hr><h3 id="3-8-1-Continuous-at-the-boundary-points"><a href="#3-8-1-Continuous-at-the-boundary-points" class="headerlink" title="3.8.1 Continuous at the boundary points"></a>3.8.1 Continuous at the boundary points</h3><p>$f(x)$ in a closed interval $[a,b]$:</p><ol><li>$f$ is continuous at the left ending point $a$ if</li></ol><script type="math/tex; mode=display">\lim_{x\to a^+}f(x)=f(a)</script><ol><li>$f$ is continuous at the right ending point $b$ if</li></ol><script type="math/tex; mode=display">\lim_{x\to b^-}f(x)=f(b)</script><hr><h2 id="3-9-Intermediate-Value-theorem-IVT"><a href="#3-9-Intermediate-Value-theorem-IVT" class="headerlink" title="3.9 Intermediate Value theorem (IVT)"></a>3.9 Intermediate Value theorem (IVT)</h2><ol><li>$f$ is continuous function on closed interval $[a,b]$;</li><li>$f(a)\ne f(b)$;</li><li>$N$ is a number between $f(a)$ and $f(b)$;</li></ol><p>then,</p><p>there exits at least one point $c\in(a,b)$ such that $f(c)=N$. </p><center><img src="/2022/04/28/calculus-for-engineers-course-note/21.png" width="50%" height="50%"></center><hr><h1 id="4-Differentiation"><a href="#4-Differentiation" class="headerlink" title="4 Differentiation"></a>4 Differentiation</h1><h2 id="4-1-First-principle-of-differentiation"><a href="#4-1-First-principle-of-differentiation" class="headerlink" title="4.1 First principle of differentiation"></a>4.1 First principle of differentiation</h2><p>If </p><script type="math/tex; mode=display">\lim_{h\to 0}\frac{f(a+h)-f(a)}{h}</script><p>is <strong>exists</strong>, $f$ is differentiable at the point $a\in I$;<br>Then</p><script type="math/tex; mode=display">f^\prime(a):=\lim_{h\to 0}\frac{f(a+h)-f(a)}{h}</script><blockquote><p>the $f(a)$ must be defined. </p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/22.png" width="60%" height="60%"></center><p><strong>Right-hand side derivative:</strong></p><script type="math/tex; mode=display">f^\prime_+(a):=\lim_{h\to 0^+}\frac{f(a+h)-f(a)}{h}</script><p><strong>Left-hand side derivative:</strong></p><script type="math/tex; mode=display">f^\prime_-(a):=\lim_{h\to 0^-}\frac{f(a+h)-f(a)}{h}</script><hr><p>If $f$ is differentiable at $a$, then</p><script type="math/tex; mode=display">\lim_{x\to a^-}f(x)=\lim_{x\to a^+}f(x)=f(a)\text{ :continuous}</script><script type="math/tex; mode=display">f^\prime_+(a)=f^\prime_-(a)\text{ :derivative exists}</script><hr><center><img src="/2022/04/28/calculus-for-engineers-course-note/23.png" width="70%" height="70%"></center><hr><h2 id="4-2-Techniques-of-Differentiation"><a href="#4-2-Techniques-of-Differentiation" class="headerlink" title="4.2 Techniques of Differentiation"></a>4.2 Techniques of Differentiation</h2><p><strong>Constant</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d[cf(x)]}{dx}=c\frac{d[f(x)]}{dx}</script></li></ul><p><strong>Sum and Difference Rules</strong>:</p><ul><li><script type="math/tex; mode=display">\frac{d[f(x)\pm g(x)]}{dx}=\frac{d[f(x)]}{dx}\pm \frac{d[g(x)]}{dx}</script></li></ul><p><strong>Product Rule</strong>:</p><ul><li><script type="math/tex; mode=display">[f(x)g(x)]^\prime =f^\prime(x)g(x)+f(x)g^\prime(x)</script></li></ul><p><strong>Quotient Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\biggl[\frac{f(x)}{g(x)}\biggr]^\prime=\frac{f^\prime(x)g(x)-f(x)g^\prime(x)}{[g(x)]^2},g(x)\ne 0</script></li></ul><p><strong>Chain Rule</strong>:</p><ul><li><script type="math/tex; mode=display">\big[f\big(g(x)\big)\big]^\prime=f^\prime\big(g(x)\big)\cdot g^\prime (x)</script></li><li><script type="math/tex; mode=display">f^\prime(a)=g^\prime(u_0)\times h^\prime(a)=g^\prime(h(a))\times h^\prime(a)</script></li><li>where $u_0=h(a)$</li></ul><hr><h2 id="4-3-Inverse-differentiation"><a href="#4-3-Inverse-differentiation" class="headerlink" title="4.3 Inverse differentiation"></a>4.3 Inverse differentiation</h2><p>$y=f(x)$ differentiable on $(a,b)$, $f^\prime(x_0)$ is nonzero at $x_0\in (a,b)$, and derivative $(f^{-1})^\prime(y_0)$ exits, where $y_0=f(x_0)$, and </p><script type="math/tex; mode=display">(f^{-1})^\prime(y_0)=\frac{1}{f^\prime(x_0)}</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/24.png" width="50%" height="50%"></center><hr><p>Steps for finding $(f^{-1})^\prime(y_0)$</p><ol><li>solve for $x_0$ from $f(x_0)=y_0$;</li><li>Find $f^\prime(x_0)$’;</li><li>find $(f^{-1})^\prime(y_0)=\frac{1}{f^\prime(x_0)}$. </li></ol><p><strong>[Example]</strong></p><center><img src="/2022/04/28/calculus-for-engineers-course-note/25.png" width="60%" height="60%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/26.png" width="60%" height="60%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/27.png" width="60%" height="60%"></center><hr><h2 id="4-4-Implicit-Differentiation"><a href="#4-4-Implicit-Differentiation" class="headerlink" title="4.4 Implicit Differentiation"></a>4.4 Implicit Differentiation</h2><blockquote><p>Can not express $y$ explicitly as a function of $x$. </p></blockquote><p>For $x^2+xy+y^2=9$, differentiate with respect to $x$:</p><script type="math/tex; mode=display">\frac{d(x^2)}{dx}+\frac{d(x\cdot y)}{dx}+\frac{d(y^2)}{dx}=0\text{ (take derivative on both sides)}</script><script type="math/tex; mode=display">\implies 2x+(1\cdot y+x\cdot \frac{dy}{dx})+2y\frac{dy}{dx}=0</script><script type="math/tex; mode=display">\implies (x+2y)\frac{dy}{dx}=-2x-y</script><script type="math/tex; mode=display">\implies \frac{dy}{dx}=\frac{-2x-y}{x+2y}</script><hr><h2 id="4-5-Technique-of-differentiation-of-the-type-y-f-x-g-x"><a href="#4-5-Technique-of-differentiation-of-the-type-y-f-x-g-x" class="headerlink" title="4.5 Technique of differentiation of the type $y = f(x)^{g(x)}$"></a>4.5 Technique of differentiation of the type $y = f(x)^{g(x)}$</h2><p>Find the derivative of the function $y=f(x)=x^x$, for $x&gt;0$. </p><p><strong>M1:</strong></p><script type="math/tex; mode=display">y=x^x</script><script type="math/tex; mode=display">lny=lnx^x=xlnx</script><script type="math/tex; mode=display">\frac{d(lny)}{dx}=\frac{d(lny)}{dy}\frac{dy}{dx}=\frac{1}{y}\frac{dy}{dx}=lnx+1</script><script type="math/tex; mode=display">\frac{dy}{dx}=y(lnx+1)=x^x(lnx+1)</script><p><strong>M2:</strong></p><script type="math/tex; mode=display">\text{Using }x=e^{lnx}</script><script type="math/tex; mode=display">x^x=e^{lnx^x}=e^{xlnx}</script><script type="math/tex; mode=display">y^{\prime}={(e^{xlnx})}^{\prime}</script><script type="math/tex; mode=display">=e^{xlnx}\cdot (1\cdot lnx+x\cdot \frac{1}{x})</script><script type="math/tex; mode=display">=x^x(lnx+1)</script><hr><h2 id="4-6-L’Hopital’s-Rule-for-Finding-Limits"><a href="#4-6-L’Hopital’s-Rule-for-Finding-Limits" class="headerlink" title="4.6 L’Hopital’s Rule for Finding Limits"></a>4.6 L’Hopital’s Rule for Finding Limits</h2><h3 id="4-6-1-Type-frac-0-0"><a href="#4-6-1-Type-frac-0-0" class="headerlink" title="4.6.1 Type $\frac{0}{0}$"></a>4.6.1 Type $\frac{0}{0}$</h3><ul><li>$f(x),g(x)$ differentiable;</li><li>$\lim<em>{x\to a}f(x)=0$, $\lim</em>{x\to a}g(x)=0$</li><li>then:</li></ul><script type="math/tex; mode=display">\lim_{x\to a}\frac{f(x)}{g(x)}=\lim_{x\to a}\frac{f^\prime(x)}{f^\prime(x)}</script><hr><h3 id="4-6-2-Type-frac-infin-infin"><a href="#4-6-2-Type-frac-infin-infin" class="headerlink" title="4.6.2 Type $\frac{\infin}{\infin}$"></a>4.6.2 Type $\frac{\infin}{\infin}$</h3><ul><li>$f(x),g(x)$ differentiable;</li><li>$\lim<em>{x\to a}f(x)=\pm \infin$, $\lim</em>{x\to a}g(x)=\pm \infin$</li><li>then:</li></ul><script type="math/tex; mode=display">\lim_{x\to a}\frac{f(x)}{g(x)}=\lim_{x\to a}\frac{f^\prime(x)}{f^\prime(x)}</script><ul><li>Check the form before using the L’Hopital’s rule, type $\frac{0}{1}$ is not applicable. </li></ul><hr><h3 id="4-6-3-Using-L’Hopital’s-Rule-to-calculus-lim-x-to-a-f-x-g-x"><a href="#4-6-3-Using-L’Hopital’s-Rule-to-calculus-lim-x-to-a-f-x-g-x" class="headerlink" title="4.6.3 Using L’Hopital’s Rule to calculus $\lim_{x\to a}f(x)^{g(x)}$"></a>4.6.3 Using L’Hopital’s Rule to calculus $\lim_{x\to a}f(x)^{g(x)}$</h3><ul><li>Type $1^\infin$:</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}(\cos x)^{\frac{1}{x}}</script><script type="math/tex; mode=display">=\lim_{x\to 0}e^{ln((\cos x)^{\frac{1}{x}})}</script><script type="math/tex; mode=display">=\lim_{x\to 0}e^\frac{ln(\cos x)}{x}</script><script type="math/tex; mode=display">=e^{\lim_{x\to 0}\frac{\frac{1}{\cos x}(-\sin x)}{1}}=e^0=1</script><ul><li>Type $\infin^0$:</li></ul><script type="math/tex; mode=display">\lim_{x\to \infin}(1+x)^{\frac{1}{x}}</script><script type="math/tex; mode=display">=\lim_{x\to \infin}e^{ln(1+x)^{\frac{1}{x}}}</script><script type="math/tex; mode=display">=\lim_{x\to \infin}e^{\frac{ln(1+x)}{x}}</script><script type="math/tex; mode=display">=e^{\lim_{x\to \infin}{\frac{\frac{1}{1+x}}{1}}}=e^0=1</script><hr><h2 id="4-7-Increasing-and-Decreasing-Functions"><a href="#4-7-Increasing-and-Decreasing-Functions" class="headerlink" title="4.7 Increasing and Decreasing Functions"></a>4.7 Increasing and Decreasing Functions</h2><center><img src="/2022/04/28/calculus-for-engineers-course-note/28.png" width="90%" height="90%"></center><p>$f(x)$ is differentiable on open interval $J$:</p><ul><li>$f^\prime(x)\gt 0 \text{ on }J\implies$ $f$ is increasing on $J$;</li><li>$f^\prime(x)\lt 0 \text{ on }J\implies$ $f$ is decreasing on $J$;</li></ul><p>If a function is increasing or decreasing on an interval:</p><ul><li>It must be one-to-one function;</li><li>It has as inverse function;</li></ul><p>Existence of a <strong>unique</strong> solution: <strong>intermediate value theorem(IVT)</strong> + <strong>monotonicity</strong></p><hr><h2 id="4-8-Linear-approximation"><a href="#4-8-Linear-approximation" class="headerlink" title="4.8 Linear approximation"></a>4.8 Linear approximation</h2><blockquote><p>Approximate a function $y=f(x)$ by a suitable linear function near a given point $a$.</p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/29.png" width="90%" height="90%"></center><p><strong>[Example]</strong></p><center><img src="/2022/04/28/calculus-for-engineers-course-note/30.png" width="90%" height="90%"></center><hr><h2 id="4-9-Mean-Value-Theorem-of-Differentiation"><a href="#4-9-Mean-Value-Theorem-of-Differentiation" class="headerlink" title="4.9 Mean Value Theorem of Differentiation"></a>4.9 Mean Value Theorem of Differentiation</h2><blockquote><p>For $f(x)$:<br>$f(x)$ is <strong>continuous</strong> on the closed interval $[a,b]$;<br>$f(x)$ is <strong>differentiable</strong> on the open interval $(a,b)$;<br>$\exist c\in (a,b)$ such that:</p><script type="math/tex; mode=display">f^\prime (c)=\frac{f(b)-f(a)}{b-a}</script><p>or <script type="math/tex">f(b)-f(a)=f^\prime (c)(b-a)</script></p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/31.png" width="90%" height="90%"></center><hr><h2 id="4-10-Higher-derivatives"><a href="#4-10-Higher-derivatives" class="headerlink" title="4.10 Higher derivatives"></a>4.10 Higher derivatives</h2><p>Second-order derivative of $f(x)$:</p><script type="math/tex; mode=display">f^{\prime \prime}(x)=\frac{df^\prime x}{dx}</script><p>Noted as <script type="math/tex">y^{\prime \prime},f^{\prime \prime}(x),\frac{d^2y}{dx^2}</script></p><hr><p>$n^{th}$ derivative noted as:</p><script type="math/tex; mode=display">y^{(n)},f^{(n)}(x),\frac{d^ny}{dx^n}</script><script type="math/tex; mode=display">y^{(0)}=f^{(0)}(x)=f(x)</script><hr><p><strong>Leibniz’s rule</strong>:</p><p>For $u(x),v(x)$, the $n^{th}$ derivative of $u(x)v(x)$ is:</p><script type="math/tex; mode=display">(uv)^{(n)}=\sum_{k=0}^{n}\binom{n}{k}u^{(n-k)}v^{(k)},</script><p>or</p><script type="math/tex; mode=display">(uv)^{(n)}=\sum_{k=0}^{n}\binom{n}{k}u^{(k)}v^{(n-k)}</script><p><strong>[Example]</strong>:</p><script type="math/tex; mode=display">(uv)^{(3)}=\binom{3}{0}u^{(3)}v+\binom{3}{1}u^{\prime \prime}v^{\prime}+\binom{3}{2}u^{\prime}v^{\prime \prime}+\binom{3}{3}uv^{3}</script><hr><h2 id="4-11-Local-maxima-and-minima"><a href="#4-11-Local-maxima-and-minima" class="headerlink" title="4.11 Local maxima and minima"></a>4.11 Local maxima and minima</h2><p><strong>Stationary point (critical point):</strong></p><blockquote><p>$f^{\prime}(a)=0$, then $x=a$ is the stationary point. </p></blockquote><h3 id="4-11-1-First-Derivative-Test"><a href="#4-11-1-First-Derivative-Test" class="headerlink" title="4.11.1 First Derivative Test"></a>4.11.1 First Derivative Test</h3><p>$f(x)$ is differential in interval $J$ containing $a$, $f^{\prime}(a)=0$: </p><blockquote><p>if $f^{\prime}(x)$ <strong>change from $+$ to $-$</strong> with $x$ increasing through $x=a \implies$ $f(x)$ has <strong>local maximum</strong> at $a$;<br>if $f^{\prime}(x)$ <strong>change from $-$ to $+$</strong> with $x$ increasing through $x=a \implies$ $f(x)$ has <strong>local minimum</strong> at $a$;</p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/32.png" width="90%" height="90%"></center><hr><h3 id="4-11-2-Second-Derivative-Test"><a href="#4-11-2-Second-Derivative-Test" class="headerlink" title="4.11.2 Second Derivative Test"></a>4.11.2 Second Derivative Test</h3><p>$f(x)$ is <strong>twice differential</strong> at $a$, and $f^{\prime}(a)=0$: </p><blockquote><p>$f^{\prime \prime}(a)\lt 0\text{ (concave down)} \implies$ <strong>local maximum</strong> at $a$;<br>$f^{\prime \prime}(a)\gt 0\text{ (concave down)} \implies$ <strong>local minimum</strong> at $a$;<br>$f^{\prime \prime}(a)= 0 \implies$ NO conclusion can be made.</p></blockquote><hr><h2 id="4-12-Global-maxima-and-minima"><a href="#4-12-Global-maxima-and-minima" class="headerlink" title="4.12 Global maxima and minima"></a>4.12 Global maxima and minima</h2><p><strong>Closed interval: $J\in [a,b]$</strong></p><p>Comparing the $f(x)$ at <strong>stationary points</strong> $f^{\prime}(c)=0$ and the <strong>endpoints</strong> $a$ and $b$;</p><p><strong>Open interval: $J\in (a,b)$</strong><br>Comparing the $f(x)$ at <strong>stationary points</strong> $f^{\prime}(c)=0$ and the <strong>limit</strong> value at <strong>endpoints</strong> $x\to a$ and $x\to b$;</p><blockquote><p> if largest(smallest) value <strong>is</strong> attained in the domain $J\implies$ Global maxima(minima);<br> if largest(smallest) value <strong>is NOT</strong> attained in the domain $J\implies$ Global maxima(minima) does <strong>NOT</strong> exist; </p></blockquote><center><img src="/2022/04/28/calculus-for-engineers-course-note/33.png" width="90%" height="90%"></center><hr><h1 id="5-Indefinite-Integrals"><a href="#5-Indefinite-Integrals" class="headerlink" title="5 Indefinite Integrals"></a>5 Indefinite Integrals</h1><h2 id="5-1-Definition-of-indefinite-integrals"><a href="#5-1-Definition-of-indefinite-integrals" class="headerlink" title="5.1 Definition of indefinite integrals"></a>5.1 Definition of indefinite integrals</h2><p>For </p><script type="math/tex; mode=display">f(x)=\frac{d}{dx}F(x)</script><p>the $F(x)$ is called the primitive or antiderivative of $f(x)$, $f(x)$ is the derivative of F(x).</p><p>Then</p><script type="math/tex; mode=display">\int f(x) dx=F(x)+C</script><p>$C$ is arbitrary constant. </p><p>$\int f(x)dx$ is the indefinite integral of $f(x)$, $f(x)$ is the integrand. </p><hr><h2 id="5-2-Table-of-indefinite-integrals"><a href="#5-2-Table-of-indefinite-integrals" class="headerlink" title="5.2 Table of indefinite integrals"></a>5.2 Table of indefinite integrals</h2><center><img src="/2022/04/28/calculus-for-engineers-course-note/34.png" width="80%" height="80%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/35.png" width="90%" height="90%"></center><hr><h2 id="5-3-Basic-rules-of-integration"><a href="#5-3-Basic-rules-of-integration" class="headerlink" title="5.3 Basic rules of integration"></a>5.3 Basic rules of integration</h2><script type="math/tex; mode=display">\int kf(x)dx=k\int f(x)dx \; \text{  ($k$ is a constant)}</script><script type="math/tex; mode=display">\int[f(x)+g(x)]dx=\int f(x)dx+\int g(x)dx</script><hr><h2 id="5-4-Techniques-of-integration-Substitution"><a href="#5-4-Techniques-of-integration-Substitution" class="headerlink" title="5.4 Techniques of integration: Substitution"></a>5.4 Techniques of integration: Substitution</h2><blockquote><p>If $u=\phi(x)$ with $\phi(x)$ and its derivative $\phi ^\prime(x)$ being continuous, then</p></blockquote><script type="math/tex; mode=display">\int f(\phi(x))\phi^\prime(x)dx=\int f(u)du</script><hr><p><strong>[Example]</strong></p><p>Find $\int x(x^2+3)^3dx$</p><script type="math/tex; mode=display">\text{Let } u=x^3+3, \frac{du}{dx}=2x, dx=\frac{du}{2x}</script><script type="math/tex; mode=display">\int x(x^2+3)^3dx=\int xu^3\frac{du}{2x}=\frac{1}{2}\int u^3du=\frac{1}{2}\frac{u^4}{4}=\frac{(x^2+3)^4}{8}+C</script><p><strong>[Example]</strong></p><p>Find $\int \sqrt{1-4x^2}dx$</p><center><img src="/2022/04/28/calculus-for-engineers-course-note/36.png" width="90%" height="90%"></center><hr><h2 id="5-5-Techniques-of-integration-Integration-by-parts"><a href="#5-5-Techniques-of-integration-Integration-by-parts" class="headerlink" title="5.5 Techniques of integration: Integration by parts"></a>5.5 Techniques of integration: Integration by parts</h2><blockquote><p>$u(x)$ and $v(x)$ are two differentiable functions, then</p></blockquote><script type="math/tex; mode=display">\int u(x)v^\prime (x)dx= u(x)v(x)-\int u^\prime v(x)dx</script><script type="math/tex; mode=display">\implies \int u\;dv=uv-\int v\;du</script><hr><p><strong>ILATE</strong> order for choosing $v$:</p><p><strong>I</strong>: $arctan^{-1}x$;<br><strong>L</strong>: $ln(x)$;<br><strong>A</strong>: $x$:<br><strong>T</strong>: $sin(x)$;<br><strong>E</strong>: $e^x$;</p><blockquote><p>lower one to be $v$.</p></blockquote><hr><p><strong>[Example]</strong></p><p>Find $\int (x+2)\cos xdx$</p><script type="math/tex; mode=display">1. \text{ Set }u=x+2, du=dx</script><script type="math/tex; mode=display">2.\frac{d\sin x}{dx}=\cos x\implies \cos xdx=d\sin x=dv, v= sin x</script><script type="math/tex; mode=display">\therefore \int (x+2)\cos xdx = \int (x+2)d \sin x=(x+2)\sin x- \int \sin x d(x+2)</script><script type="math/tex; mode=display">= (x+2)\sin x- \int \sin x dx</script><script type="math/tex; mode=display">= (x+2)\sin x+\cos x +C</script><hr><h2 id="5-6-Partial-fractions"><a href="#5-6-Partial-fractions" class="headerlink" title="5.6 Partial fractions"></a>5.6 Partial fractions</h2><blockquote><p>A proper <strong>rational</strong> function, with real coefficients, can sometimes <strong>be expressed as a sum of two or more proper rational functions</strong>, with real coefficients, called partial fractions.</p></blockquote><script type="math/tex; mode=display">\frac{x-3}{(2x-1)(x^2+1)}=\frac{-2}{2x-1}+\frac{x+1}{x^2+1}</script><hr><center><img src="/2022/04/28/calculus-for-engineers-course-note/37.png" width="70%" height="70%"></center><p><strong>[Example]</strong></p><p>Resolve $f(x)=\frac{x+3}{(x-1)(x-3)}$</p><script type="math/tex; mode=display">f(x)=\frac{a}{x-1}+\frac{b}{x-3}=\frac{(a+b)x-3a-b}{(x-1)(x-3)}</script><script type="math/tex; mode=display">\implies \begin{cases}  a+b=1\\  -3a-b=3\end{cases}\implies a=-2,b=3</script><script type="math/tex; mode=display">\therefore f(x)=\frac{-2}{x-1}+\frac{3}{x-3}</script><hr><p><strong>[Example]</strong></p><p>Find $\int \frac{x^2+1}{(x-1)(x-2)(3+3)}dx$</p><script type="math/tex; mode=display">\frac{x^2+1}{(x-1)(x-2)(3+3)}=\frac{a}{x-1}+\frac{b}{x-2}+\frac{c}{x+3}=\frac{(a+b+c)x^2+(a-2b-3c)x-6a-3b+2c}{(x-1)(x-2)(x+3)}</script><script type="math/tex; mode=display">\implies \begin{cases}  a+b+c=1\\  a+2b-3c=0\\  -6a-3b+2c=1\end{cases}\implies a=\frac{-1}{2},b=1,c=\frac{1}{2}</script><script type="math/tex; mode=display">\therefore \int \frac{x^2+1}{(x-1)(x-2)(3+3)}dx=\int -\frac{1}{2(x-1)}+\frac{1}{x-2}+\frac{1}{2(x+3)} dx</script><script type="math/tex; mode=display">= -\frac{1}{2}\int \frac{1}{x-1}+\int \frac{1}{x-2}+\frac{1}{2} \int \frac{1}{x+3}</script><script type="math/tex; mode=display">=-\frac{1}{2}\ln |x-1|+\ln |x-2|+\frac{1}{2}\ln |x+3|+C</script><hr><h1 id="6-Definite-Integrals"><a href="#6-Definite-Integrals" class="headerlink" title="6 Definite Integrals"></a>6 Definite Integrals</h1><h2 id="6-1-Definition-of-Definite-Integrals"><a href="#6-1-Definition-of-Definite-Integrals" class="headerlink" title="6.1 Definition of Definite Integrals"></a>6.1 Definition of Definite Integrals</h2><p>$f(x)$ is <strong>continuous</strong> defined on <strong>closed and finite</strong> interval $[a,b]$;<br>$E_i$ is sub-interval of $[a,b]$ with length $\Delta x_i$ and $c_i$ as any point inside;<br>The <strong>Riemann sum</strong> of the function $f(x)$ on $[a,b]$ is </p><script type="math/tex; mode=display">S_N=\sum^N_{i=1}f(c_i)\Delta x_i</script><p>Then the definite integral of $f(x)$ on $[a,b]$ which is $\int^b_af(x)dx$:</p><script type="math/tex; mode=display">\lim_{\forall \Delta x_i \to 0}S_N=\lim_{\forall \Delta x_i \to 0}\sum^N_{i=1}f(c_i)\Delta x_i</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/38.png" width="70%" height="70%"></center><hr><h2 id="6-2-Basic-Properties-of-Definite-Integrals"><a href="#6-2-Basic-Properties-of-Definite-Integrals" class="headerlink" title="6.2 Basic Properties of Definite Integrals"></a>6.2 Basic Properties of Definite Integrals</h2><ul><li><script type="math/tex; mode=display">\int^a_bf(x)dx=-\int^b_af(x)dx</script></li><li><script type="math/tex; mode=display">\int^a_af(x)dx=0</script></li><li><script type="math/tex; mode=display">\int^b_af(x)dx=\int^b_af(t)dt=\int^b_af(u)du</script></li><li><strong>Linearity</strong>:<ul><li><script type="math/tex; mode=display">\int^b_a[\alpha f(x)+\beta g(x)]dx=\alpha\int^b_af(x)dx+\beta\int^b_ag(x)dx</script></li></ul></li><li><strong>Additivity over sub-intervals</strong>, $a\lt b\lt c$:<ul><li><script type="math/tex; mode=display">\int^b_af(x)dx=\int^b_cf(x)dx+\int^c_af(x)dx</script></li></ul></li></ul><hr><h2 id="6-3-Geometric-Interpretation"><a href="#6-3-Geometric-Interpretation" class="headerlink" title="6.3 Geometric Interpretation"></a>6.3 Geometric Interpretation</h2><center><img src="/2022/04/28/calculus-for-engineers-course-note/39.png" width="70%" height="70%"></center><hr><h2 id="6-4-Fundamental-Theorem-of-Calculus"><a href="#6-4-Fundamental-Theorem-of-Calculus" class="headerlink" title="6.4 Fundamental Theorem of Calculus"></a>6.4 Fundamental Theorem of Calculus</h2><p>$F(x)$ be any primitive of $f(x)$:</p><script type="math/tex; mode=display">\int^b_af(x)dx=F(b)-F(a)\equiv F(x) \Big|_a^b</script><p>To find $\int^b_af(x)dx$:</p><ul><li>Step 1: Find $F(x) = \int f(x)dx$;</li><li>Step 2: Calculate $F(b)-F(a)$.</li></ul><hr><h2 id="6-5-Reduction-Formulas-for-Definite-Integrals"><a href="#6-5-Reduction-Formulas-for-Definite-Integrals" class="headerlink" title="6.5 Reduction Formulas for Definite Integrals"></a>6.5 Reduction Formulas for Definite Integrals</h2><p>For </p><script type="math/tex; mode=display">J_n=\int_0^1x^ne^xdx</script><p>$n$ is non-negative integer</p><script type="math/tex; mode=display">J_n=e-nJ_{n-1},n=1,2,...</script><p>which is <strong>reduction formula</strong>.</p><p><strong>[Example]</strong></p><center><img src="/2022/04/28/calculus-for-engineers-course-note/40.png" width="70%" height="70%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/41.png" width="70%" height="70%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/42.png" width="70%" height="70%"></center><center><img src="/2022/04/28/calculus-for-engineers-course-note/43.png" width="70%" height="70%"></center><p><a href="http://furthermathematicst.blogspot.com/2011/06/65-reduction-formulae.html">http://furthermathematicst.blogspot.com/2011/06/65-reduction-formulae.html</a></p><hr><h2 id="6-6-Definite-Integrals-for-Even-and-Odd-functions"><a href="#6-6-Definite-Integrals-for-Even-and-Odd-functions" class="headerlink" title="6.6 Definite Integrals for Even and Odd functions"></a>6.6 Definite Integrals for Even and Odd functions</h2><p>if $f(x)$ is <strong>even</strong>, then</p><script type="math/tex; mode=display">\int_{-a}^af(x)dx = 2\int_{0}^af(x)dx</script><p>if $f(x)$ is <strong>odd</strong>, then</p><script type="math/tex; mode=display">\int_{-a}^af(x)dx = 0</script><hr><h2 id="6-7-Area-Bounded-by-Curves"><a href="#6-7-Area-Bounded-by-Curves" class="headerlink" title="6.7 Area Bounded by Curves"></a>6.7 Area Bounded by Curves</h2><ul><li>Area is bounded by the curve $y=f(x)\gt0$ and the <strong>x-axis</strong> over $[a,b]$:<center><img src="/2022/04/28/calculus-for-engineers-course-note/44.png" width="70%" height="70%"></center></li></ul><hr><ul><li>Area is bounded by the curve $y=f(x)\le 0$ and the <strong>x-axis</strong> over $[a,b]$:<center><img src="/2022/04/28/calculus-for-engineers-course-note/45.png" width="70%" height="70%"></center></li></ul><hr><ul><li>Area is bounded by the curve $y=f(x)$ and the <strong>x-axis</strong> over $[a,b]$, <ul><li>$f(x)\ge 0$ on $[a,c]$, $f(x)\le 0$ on $[c,b]$:<center><img src="/2022/04/28/calculus-for-engineers-course-note/46.png" width="70%" height="70%"></center></li></ul></li></ul><hr><ul><li>Area is bounded by the curves $y=f(x),y=g(x)$ over $[a,b]$<ul><li>$f(x)\ge g(x)$ on $[a,b]$:<center><img src="/2022/04/28/calculus-for-engineers-course-note/47.png" width="70%" height="70%"></center></li></ul></li></ul><hr><h2 id="6-8-Mean-Value-Theorem-for-Integrals"><a href="#6-8-Mean-Value-Theorem-for-Integrals" class="headerlink" title="6.8 Mean Value Theorem for Integrals"></a>6.8 Mean Value Theorem for Integrals</h2><p>For $f(x)$ is continuous an the closed interval $[a,b]$, then there exists value $c$ of on $[a,b]$ such that</p><script type="math/tex; mode=display">f(c)=\frac{1}{b-a}\int_a^bf(x)dx</script><center><img src="/2022/04/28/calculus-for-engineers-course-note/48.png" width="50%" height="50%"></center><hr><p>Set </p><script type="math/tex; mode=display">g(x)=\int f(x)dx</script><p>then</p><script type="math/tex; mode=display">g^{\prime}(c)=f(c)=\frac{g(b)-g(a)}{b-a}</script><p>which is <strong>mean value theorem</strong> for derivative</p><hr><h2 id="6-9-Length-of-Curves"><a href="#6-9-Length-of-Curves" class="headerlink" title="6.9 Length of Curves"></a>6.9 Length of Curves</h2><blockquote><p>Given $y=f(x)$ is continuous, defined on $[a,b]$, then</p></blockquote><script type="math/tex; mode=display">\text{Arc length of }\widehat{AB}=\int_a^b\sqrt{1+\biggl(\frac{dy}{dx}\biggr)^2}dx</script><blockquote><p>Or, if $f$ is monotonically increasing or decreasing, and $c=f(a)$, $d=f(b)$, then</p></blockquote><script type="math/tex; mode=display">\text{Arc length of }\widehat{AB}=\int_c^d\sqrt{1+\biggl(\frac{dx}{dy}\biggr)^2}dy</script><h2 id="6-10-Volume-of-a-Solid-of-Rotation"><a href="#6-10-Volume-of-a-Solid-of-Rotation" class="headerlink" title="6.10 Volume of a Solid of Rotation"></a>6.10 Volume of a Solid of Rotation</h2><h3 id="About-the-x-axis"><a href="#About-the-x-axis" class="headerlink" title="About the x-axis"></a>About the x-axis</h3><blockquote><p>Region $R$ is bounded between $y=f(x)$ and $y=g(x)$ with $f(x)\ge g(x) \ge 0$ on $[a,b]$, then</p></blockquote><script type="math/tex; mode=display">V=\pi \int_a^b(f(x)^2-g(x)^2)dx</script><hr><h3 id="About-the-y-axis"><a href="#About-the-y-axis" class="headerlink" title="About the y-axis"></a>About the y-axis</h3><blockquote><p>Region $R$ is bounded between $y=f(x)$ and $y=g(x)$ with $f(x)\ge g(x) \ge 0$ on $[a,b]$, then</p></blockquote><script type="math/tex; mode=display">V=2\pi \int_a^bx(f(x)-g(x))dx</script><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Slides of AMA1130 Calculus for Engineers, The Hong Kong Polytechnic University.</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math Note</tag>
      
      <tag>Calculus</tag>
      
      <tag>Limits</tag>
      
      <tag>Continuity</tag>
      
      <tag>Differentiation</tag>
      
      <tag>Integration</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建简单的个人博客网站</title>
    <link href="/2022/04/16/build-blog-website/"/>
    <url>/2022/04/16/build-blog-website/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p><em>授人以鱼不如授人以<strong>渔</strong>。</em><br><em>It is <strong>Ultra</strong> significant to teach people to <strong>Fish</strong> than to give people fish.</em></p></blockquote><hr><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p><strong>简介</strong></p><p>2020年暑假，是<a href="https://ultrafish.cn/2021/07/04/second-year/">我在香港读副学士</a>时的第一个暑假。在当时香港疫情防控措施下，我大多数时候都在寝室里，无意间了解到了个人博客网站。经过深入了解，我发现搭建一个博客网站可以记录我自学的过程，使学习有产出，形成正向反馈，并且还能学到有关前端，web开发等相关的知识。经过一段时间的摸索，我在2020年7月22日开发出了我网站的雏形，并发了一条朋友圈。</p><span id="more"></span><center><img src="/2022/04/16/build-blog-website/1.png" width="60%" alt="我的朋友圈截图"></center><p>没过多久我就发表了我<a href="https://ultrafish.cn/2020/07/29/hello-ultrafisher/">第一篇文章</a>。</p><hr><p><a href="https://ultrafish.cn">UltraFish</a>这个博客网站已经建站快两年了，由最初的做什么都碰壁，每次总感觉自己学的知识不够，还有好几次想放弃维护这个网站，到后来一次次克服困难，总结经验，学到新知识，并能顺利的发表文章。也能收到亲朋好友的鼓励、建议以及意见，十分感谢。</p><p>到目前为止，我已经发表了<a href="https://ultrafish.cn/archives/">45篇文章</a>，开发了另一个<strong>附属网站</strong><a href="https://plus.ultrafish.cn">UltraFish Plus</a>，尝试了<strong>个人履历网页</strong><a href="https://cv.ultrafish.cn/">Wengyu ZHANG CV</a>等。</p><p>这个过程确确实实让我收获颇多，能让我总结学到的知识，能发现自己的不足，能尝试新的东西，还能够把学到的知识得以应用。让我在没事的时候不空下来，保持学习，乐在其中。</p><hr><p>因此，我想用这篇文章鼓励大家搭建这样一个博客网站，来激励自己学习。不管你是否由计算机背景，都可以尝试。当然不仅仅是搭建个人博客网站、知识库，这几篇文章也可以帮助你搭建一个个人简历、作品集的网站。</p><ul><li>部署平台：<ul><li><a href="https://gitee.com/">Gitee</a>，代码托管平台，在国内访问速度快，也可以选择GitHub等类似Git平台。</li></ul></li><li>个人简历以及作品集(CV / Portfolio)：<ul><li>PDF文稿；</li><li>Markdown文稿；</li><li>React-Bootstrap框架。</li></ul></li><li>知识库：<ul><li>docsify框架。</li></ul></li><li>博客网站：<ul><li>Hexo博客框架 + Fluid主题（与UltraFish相同）</li></ul></li></ul><p>这篇文章让你入门搭建个人<strong>博客</strong>网站，并使用Hexo博客框架，使用Gitee部署。</p><hr><h1 id="2-Install-git-Tool"><a href="#2-Install-git-Tool" class="headerlink" title="2 Install git Tool"></a>2 Install git Tool</h1><p><strong>安装git工具</strong>（若已经安装可跳过，可输入<code>git --version</code>验证版本号）</p><ul><li><a href="https://git-scm.com">git官网</a></li></ul><hr><h1 id="3-Build-Blog-Framework"><a href="#3-Build-Blog-Framework" class="headerlink" title="3 Build Blog Framework"></a>3 Build Blog Framework</h1><p><strong>搭建博客框架</strong></p><h2 id="3-1-Node-js-Environment"><a href="#3-1-Node-js-Environment" class="headerlink" title="3.1 Node.js Environment"></a>3.1 Node.js Environment</h2><p><strong>搭建Node.js环境</strong>（若已经安装可跳过，可输入<code>node -v</code>验证版本号）</p><ul><li><p>访问<a href="https://nodejs.org">https://nodejs.org</a>，下载LTS版本，并按照提示安装；</p><center><img src="/2022/04/16/build-blog-website/2.png" width="60%" alt="Node.js"></center></li><li><p>Mac用户打开<strong>终端</strong>，Win用户打开<strong>Cmd</strong>；</p></li><li>进入root用户，Mac用户输入<code>sudo su</code>，并按照提示输入密码；</li><li>输入<code>node -v</code>，查看当前node版本，若能看到版本号，则说明Node.js安装成功；</li><li>输入<code>npm -v</code>，查看当前npm版本，若能看到版本号，则说明npm安装成功；</li></ul><hr><h2 id="3-2-Build-Hexo-Blog-Framework"><a href="#3-2-Build-Hexo-Blog-Framework" class="headerlink" title="3.2 Build Hexo Blog Framework"></a>3.2 Build Hexo Blog Framework</h2><p><strong>搭建Hexo博客框架</strong></p><blockquote><p>可以参考<a href="https://hexo.io/">Hexo官网</a>的官方文档步骤。</p></blockquote><ul><li>可以选择使用<a href="https://hexo.io/">Hexo官网</a>提供的安装方法，但国内访问速度慢，推荐使用淘宝的安装器安装，如下；</li><li><p>安装淘宝的cnpm管理器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=http://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li><li><p>输入<code>cnpm -v</code>查看版本，若有版本号，则说明cnpm安装成功；</p></li><li><p>使用cnpm安装Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>输入<code>hexo -v</code>查看版本，若有版本号，则说明Hexo安装成功；</p></li><li><p>去到你想放置博客文件夹的目录下，或者保持默认路径不变；</p></li><li><p>创建博客目录，此处用<code>blog-demo</code>示例，可自行命名；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir blog-demo<br></code></pre></td></tr></table></figure></li><li><p>进入目录（Mac用户）：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd blog-demo<br></code></pre></td></tr></table></figure></li><li><p>使用Hexo初始化博客：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo hexo init<br></code></pre></td></tr></table></figure></li><li><p>若显示<code>INFO  Start blogging with Hexo!</code>，则说明博客初始化成功；</p></li><li><p>在本地启动博客：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure></li><li><p>使用浏览器访问<code>http://localhost:4000</code>，即可在本地浏览你的网站雏形：</p></li></ul><center><img src="/2022/04/16/build-blog-website/3.png" width="70%" alt="网站雏形"></center><ul><li>回到终端按下<code>Ctrl + C</code>，即可关闭本地浏览；</li><li>至此，博客网站初步搭建完成，可以开始写博客文章了</li></ul><hr><h1 id="4-Create-Blog-Article"><a href="#4-Create-Blog-Article" class="headerlink" title="4 Create Blog Article"></a>4 Create Blog Article</h1><p><strong>写博客文章</strong></p><ul><li>继续前文的终端；</li><li><p>创建文章，如：”My first blog”，命令行中的文章名字不能有空格，可用<code>-</code>连接各个单词：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new my-first-blog<br></code></pre></td></tr></table></figure></li><li>可以在<code>blog-demo/source/_posts</code>目录下看到文章文件，为<code>my-first-blog.md</code>，为Markdown文件；</li></ul><center><img src="/2022/04/16/build-blog-website/4.png" width="50%" alt="文章文件"></center><ul><li>使用Markdown写文章；<ul><li>Markdown是一种轻量级标记语言，初学者可参考<a href="https://www.markdown.xyz/">Markdown 指南</a>。</li></ul></li><li>修改<code>my-first-blog.md</code>，例如：<ul><li><code>title</code>处可修改为此文章的标题。</li></ul></li></ul><pre><code class="hljs"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: My First Blog<br>date: 2022-04-15 22:34:39<br><span class="hljs-section">tags:</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section"># Topic 1</span><br><br><span class="hljs-section">## Subtopic 1.1</span><br><br>XXX<br><br>---<br><br><span class="hljs-section"># Topic 2</span><br><br><span class="hljs-section">## Subtopic 2.1</span><br><br>XXX<br><br><span class="hljs-section">## Subtopic 2.2</span><br><br>XXX<br><br>---<br><br><span class="hljs-section"># References</span><br></code></pre></td></tr></table></figure></code></pre><ul><li><p>保存此文章后，在终端输入<code>hexo g</code>，使Hexo生成静态文件；</p></li><li><p>再次输入<code>hexo s</code>，即可在本地浏览你的网站雏形：</p></li></ul><center><img src="/2022/04/16/build-blog-website/5.png" width="70%" alt="网站文章"></center><ul><li>至此，你已经成功尝试发表了一篇文章，但只是发表在本地，接下来我们要把网站部署到远端，这样就可以在公网上看到你的博客了。</li></ul><hr><h1 id="5-Deploy-Blog-to-Gitee"><a href="#5-Deploy-Blog-to-Gitee" class="headerlink" title="5 Deploy Blog to Gitee"></a>5 Deploy Blog to Gitee</h1><p><strong>部署博客到Gitee</strong></p><blockquote><p><strong>注意：接下来部署到Gitee的步骤会使用到Gitee Pages，首次使用Gitee Pages需要申请，审核会在24小时內完成。<br>也可以选择使用GitHub，无需审核，但部署后在国内访问速度较慢，与Gitee部署步骤类似。</strong></p></blockquote><ul><li><p>登录/创建Gitee账号:</p><ul><li>点击访问 <a href="https://gitee.com">Gitee: https://gitee.com</a></li><li>登录/创建Gitee账号</li></ul></li><li><p>在Gitee上创建一个新的仓库；</p><ul><li>仔细填写<strong>仓库名称</strong>和<strong>路径</strong>，两者一定要和<strong>你的账户名称</strong>相同！<ul><li>注意<strong>不是你的姓名</strong>；</li><li>若你的Gitee主页地址为<code>https://gitee.com/&lt;你的账户名称&gt;</code>，则此处填写<code>&lt;你的账户名称&gt;</code></li><li>如我的主页地址为<code>https://gitee.com/mikezhang999</code>，则此处填写<code>mikezhang999</code></li></ul></li><li>选择<strong>设置模版</strong>-<strong>Readme文件</strong>；</li><li>点击<strong>创建</strong>；<center><img src="/2022/04/16/build-blog-website/6.png" width="70%" alt="新建仓库"></center></li></ul></li><li><p>设置仓库开源：</p><ul><li>进入<strong>仓库</strong>；</li><li>点击<strong>管理</strong>菜单；</li><li>选择<strong>开源</strong>；</li><li>点击<strong>保存</strong>；<center><img src="/2022/04/16/build-blog-website/7.png" width="70%" alt="仓库设置开源"></center></li></ul></li><li><p>复制仓库地址：</p><ul><li>点击<strong>代码</strong>菜单；</li><li>点击<strong>克隆/下载</strong>；</li><li>点击<strong>复制</strong>地址；</li></ul></li></ul><center><img src="/2022/04/16/build-blog-website/8.png" width="70%" alt="仓库地址"></center><ul><li>回到本地博客目录<code>blog-demo</code>；</li><li>打开<code>_config.yml</code>文件（可以使用VS Code）；</li><li><p>到文件最后，找到以下代码块：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <br></code></pre></td></tr></table></figure></li><li><p>修改为以下：<br>（<code>repo</code>处为你之前复制的仓库地址，注意<strong>冒号后有一个空格</strong>）</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/mikezhang999/mikezhang999.git</span> <span class="hljs-comment"># 此处为你之前复制的仓库地址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li><li><p>回到终端命令行；<br>（若发现命令行中输入后回车无反应，请确保已经停止之前的本地预览，键盘按下<code>Ctrl + C</code>）；</p></li><li>输入<code>hexo g</code>，生成静态文件；</li><li>输入<code>hexo d</code>，部署到Gitee；</li><li><p>按照提示输入你的<strong>Gitee用户名</strong>，按下回车：</p><center><img src="/2022/04/16/build-blog-website/9.png" width="50%" alt="输入用户名"></center></li><li><p>按照提示输入你的<strong>Gitee密码</strong>，按下回车：</p></li><li>若有多次对话框出现，请点击<strong>确定</strong>，必要时输入电脑管理员密码；</li><li>显示<code>INFO  Deploy done: git</code>，即部署成功；</li><li>可以在Gitee主页查看部署的文件：<center><img src="/2022/04/16/build-blog-website/10.png" width="60%" alt="部署的文件"></center></li><li>点击<strong>服务</strong>菜单；</li><li>选择<strong>Gitee Pages</strong>；<center><img src="/2022/04/16/build-blog-website/11.png" width="70%" alt="Gitee Pages"></center></li><li>若第一次使用，需要填写个人信息并提交审核，会在24小时内完成。若使用GitHub则无须审核；</li><li><p>审核完成后，进行以下操作；</p><ul><li>选择<strong>部署分支</strong>为<code>master</code>;</li><li>勾选<strong>强制使用HTTPS</strong>；</li><li>点击<strong>更新</strong>；<center><img src="/2022/04/16/build-blog-website/12.png" width="70%" alt="Gitee Pages"></center></li></ul></li><li><p>可以看到提示已开启服务，访问生成的地址即可访问你的博客网站（第一次访问需要多刷新几次）；</p><ul><li>示例网站：<a href="https://mikezhang999.gitee.io">https://mikezhang999.gitee.io</a></li></ul></li></ul><hr><ul><li><p>若你未按照之前步骤设置仓库名称为你的账户名称，而是<strong>使用了别的仓库名称</strong>，如<code>blog-demo</code>，请进行以下操作：</p><ul><li>回到本地博客目录<code>blog-demo</code>；</li><li>打开<code>_config.yml</code>文件（可以使用VS Code）；</li><li><p>找到以下代码块：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br><span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure></li><li><p>修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://mikezhang999.gitee.io/blog-demo</span> <span class="hljs-comment"># 此处为你之前生成的Gitee Pages博客地址</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/blog-demo/</span> <span class="hljs-comment"># 此处为你博客仓库的名称，不可省略前后两个‘/’</span><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure></li><li><p>输入<code>hexo cl</code>，进行清理；</p></li><li>输入<code>hexo g</code>，生成静态文件；</li><li>输入<code>hexo d</code>，部署到Gitee；</li></ul></li></ul><hr><ul><li>至此，博客的部署已经完成，之后可以通过生成的地址访问你的博客网站；</li><li><strong>总结，之后每次发表新的文章步骤</strong>：<ul><li>打开终端；</li><li>输入<code>sudo su</code>，进入root用户；</li><li>进入博客根目录（如输入<code>cd blog-demo</code>）；</li><li>输入<code>hexo new my-new-post</code>，创建新的文章，文章Markdown文件名为”my-new-post”；</li><li>打开<code>blog-demo/source/_posts</code>文件夹，即可找到新文章的Markdown文件，进行文章编写；</li><li>编写完成后，保存文章；</li><li>输入<code>hexo g</code>，生成静态文件；</li><li>输入<code>hexo d</code>，部署到Gitee；</li><li>即可在博客文章页面看到新文章；</li></ul></li></ul><blockquote><p><a href="https://hexo.io/">Hexo官网</a>给了更多对于网站的设置，如名称、标题等等，请参照官方文档操作。</p></blockquote><hr><h1 id="6-Hexo-Themes"><a href="#6-Hexo-Themes" class="headerlink" title="6 Hexo Themes"></a>6 Hexo Themes</h1><p><strong>设置博客主题样式</strong></p><blockquote><p>默认的主题样式为<a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>;<br>而开发者为Hexo设计了十分多的主题，参考<a href="https://hexo.io/themes/">Themes | Hexo</a>，可自选选择。</p></blockquote><p>我推荐使用<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，详细使用过程请参考<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a>，以下给出安装以及更改主题过程：</p><ul><li><p>安装主题：</p><ul><li>打开终端，用root用户访问博客根目录；</li><li><p>输入以下代码来安装Fluid主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><ul><li>若安装失败，可下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">安装文件</a>到本地；</li><li>解压后，重命名文件夹为<code>fluid</code>；</li><li>并放到<code>blog-demo/theme</code>文件夹下；</li></ul></li></ul></li><li><p>更改博客主题：</p><ul><li>回到本地博客目录<code>blog-demo</code>；</li><li>打开<code>_config.yml</code>文件（可以使用VS Code）；</li><li><p>找到以下代码块，并把<code>theme</code>一项改为<code>fluid</code>；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># 改为fluid</span><br></code></pre></td></tr></table></figure></li><li>保存文件；</li><li>输入<code>hexo cl</code>，进行清理；</li><li>输入<code>hexo g</code>，生成静态文件；</li><li>输入<code>hexo d</code>，部署到Gitee；</li><li>重新访问博客，即可看到更改的主题效果；</li><li>若刷新多次没有更新，进入Gitee的仓库，进入Gitee Pages界面，重新点击<strong>更新</strong>按钮；</li></ul></li></ul><p>更多设置请参考<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a>。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a><br><a href="https://hexo.io/">Hexo - A fast, simple &amp; powerful blog framework</a><br><a href="https://www.markdown.xyz/">Markdown 指南</a><br><a href="https://nodejs.org/en/">Node.js - A JavaScript runtime built on Chrome’s V8 JavaScript engine.</a><br><a href="https://git-scm.com/">git —distributed-is-the-new-centralized</a><br><a href="https://blog.csdn.net/qq_21040559/article/details/109681173?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.topblog&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">hexo+Gitee搭建博客，能访问但无法加载css文件</a><br><a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文章只介绍了搭建博客的一种方式，希望大家能够尝试搭建属于自己的博客，并记录自己的学习过程，以及尝试开发一些内容。<br>若在参考此文章时有任何问题，请在下方留言，或者<a href="https://ultrafish.cn/about/">联系我</a>。<br>后续文章会介绍如何搭建知识库、个人简历、作品集等网站。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>Build Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>朴素贝叶斯文本分类器 Naive Bayes Classifier on Text Classification</title>
    <link href="/2022/04/08/Naive-Bayes-Classifier-on-Text-Classification/"/>
    <url>/2022/04/08/Naive-Bayes-Classifier-on-Text-Classification/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Brief-Introduction"><a href="#1-Brief-Introduction" class="headerlink" title="1 Brief Introduction"></a>1 Brief Introduction</h1><p><strong>入门简介</strong>：</p><p>(点击<strong>左右按钮</strong> 或 使用键盘上的<strong>左右键</strong>切换页面)<br><span id="more"></span><br><a href="&quot;../../../../../../nodeppt/naive-bayes/index.html">点击全屏 (Full Screen)</a></p><iframe src="/nodeppt/naive-bayes/index.html" width="100%" height="500" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe><hr><h1 id="2-Naive-Bayes-Classifier-on-Text-Classification"><a href="#2-Naive-Bayes-Classifier-on-Text-Classification" class="headerlink" title="2 Naive Bayes Classifier on Text Classification"></a>2 Naive Bayes Classifier on Text Classification</h1><p><strong>朴素贝叶斯文本分类器原理</strong></p><hr><h2 id="2-1-In-English"><a href="#2-1-In-English" class="headerlink" title="2.1 In English"></a>2.1 In English</h2><p><strong>说人话</strong>：</p><ul><li>第一步，建立模型：<ul><li>整理出训练数据中所有<strong>语句</strong>中的<strong>词语</strong>；</li><li>计算出每个词语在各类中出现的频率，即</li><li><script type="math/tex; mode=display">P(w_i|c_j)=\frac{\text{某词在此类中出现的次数}}{\text{此类中所有词的个数}}</script></li><li>并且求出某类的<strong>初步判断概率</strong>，即</li><li><script type="math/tex; mode=display">P(c_j)=\frac{\text{某类中所有语句的个数}}{\text{总的语句的个数}}</script></li></ul></li><li>第二步，应用模型：<ul><li>计算<strong>给定语句</strong>在各个类下的概率；</li><li>计算语句$t$ 在类$c$中的概率，即：</li><li><script type="math/tex; mode=display">(\text{初步判断概率})\times (\text{语句$t$中各个词语在类$c$中出现的频率的积})</script></li><li><script type="math/tex; mode=display">=P(c)\times \prod_{w_i\in t} P(w_i|c)</script></li><li>概率数值<strong>最大</strong>的即为其所属类；</li></ul></li></ul><hr><h2 id="2-2-In-Computer"><a href="#2-2-In-Computer" class="headerlink" title="2.2 In Computer"></a>2.2 In Computer</h2><p><strong>少说话，往下看</strong>：</p><hr><h3 id="The-Basic-Bayes’-Formula"><a href="#The-Basic-Bayes’-Formula" class="headerlink" title="The Basic: Bayes’ Formula"></a>The Basic: Bayes’ Formula</h3><p>贝叶斯定理</p><blockquote><p><strong>For inverting the conditioning</strong></p></blockquote><p>Suppose that $B_1,B_2,…,B_n$ are n <strong><em>exhaustive</em></strong> events and <strong><em>exhaustive</em></strong> events, then:</p><script type="math/tex; mode=display">P(B_k|A)=\frac{P(B_k \cap A)}{P(A)}</script><script type="math/tex; mode=display">=\frac{P(B_k)P(A|B_k)}{P(B_1)P(A|B_1)+...+P(B_n)P(A|B_n)}</script><p>$\because P(B_k\cap A) = P(B_k)\cdot P(A|B_k)$</p><p>$\text{ based on the Conditional Probability,}$ </p><p>$\text{and }P(A)=P(B_1)P(A|B_1)+…+P(B_n)P(A|B_n)$</p><p>$\text{ based on the Law of Total probability}$</p><hr><h3 id="Detailed-Explanation"><a href="#Detailed-Explanation" class="headerlink" title="Detailed Explanation"></a>Detailed Explanation</h3><p><strong>详细解释</strong>：</p><hr><h4 id="1-Our-Goal"><a href="#1-Our-Goal" class="headerlink" title="1 Our Goal"></a>1 Our Goal</h4><p><strong>1 我们的目标</strong>：</p><p>Based on the trained model, given a document (or a sentence/text), we can predict the class of the document.</p><blockquote><p>$d$: a given document, or sentence/text;<br>$C$: set of all possible classes, e.g. (positive, negative, neutral);<br>$c$: the final result we want, to be the predicted class of $d$.<br>Goal is to get the maximum value of $P(c|d),c \in C$, which means given the document $d$, find its class with the maximum probability.</p></blockquote><p>The goal: to get the <strong>maximum</strong> value of $P(c|d),c \in C$,</p><p>Based on <strong>Bayes’ Formula</strong>, we have, </p><script type="math/tex; mode=display">P(c|d)=\frac{P(d|c)P(c)}{P(d)}</script><p>So our final class $c$ is</p><script type="math/tex; mode=display">c_{MAP}=\mathrm{argmax}_{c\in C}P(c|d)</script><p>(MAP is maximum a posteriori = most likely class)</p><script type="math/tex; mode=display">=\mathrm{argmax}_{c\in C}\frac{P(d|c)P(c)}{P(d)}</script><script type="math/tex; mode=display">=\mathrm{argmax}_{c\in C}P(d|c)P(c)</script><p>where we ignore $P(d)$, because it is not related to $c$, like a constant.</p><script type="math/tex; mode=display">=\mathrm{argmax}_{c\in C}P(x_1,x_2,...,x_n|c)P(c)</script><ul><li>$x_1,x_2,…,x_n$ are all words in $d$, e.g. all words in an message,</li><li>$P(c),c\in C$ is the frequency of occurrence of this class, by count the relative frequencies, e.g. the frequencies of normal messages and spam messages.</li></ul><blockquote><p>For $P(x_1,x_2,…,x_n|c)$, we have two assumptions to simplify the prediction:</p><ul><li><strong>Bag of Words assumption</strong>: Assume <strong>words position doesn’t matter</strong>;</li><li><strong>Conditional Independence</strong>: Assume $P(x_j|c_j)$ are independent, which means each word in a message is independent with other words in the message.</li></ul><p>Based on the assumption, we have:</p><script type="math/tex; mode=display">P(x_1,x_2,...,x_n|c)=P(x_1|c) \cdot P(x_2|c) \cdot ... \cdot P(x_n|c)=\prod_{x\in \{x_1,x_2,...,x_n\}}P(x|c)</script></blockquote><p>Therefore, we can simplify the prediction $c_{MAP}$ above:</p><script type="math/tex; mode=display">c_{MAP}=\mathrm{argmax}_{c\in C}P(c)\prod_{x\in X}P(x|c),\\ X=\{x_1,x_2,...,x_n\}</script><p>As same as:</p><script type="math/tex; mode=display">c_{MAP}=\mathrm{argmax}_{c_j\in C}P(c_j)\prod_{i\in positions}P(x_i|c_j)</script><p>$positions$ = all word positions in the test document.</p><blockquote><p>Multiplying floating point numbers may cause underflow loss,<br>then based on,</p><script type="math/tex; mode=display">\log(ab)=\log(a)+\log(b)</script></blockquote><p>then,</p><script type="math/tex; mode=display">c_{MAP}=\mathrm{argmax}_{c_j\in C}\Biggl[\log{P(c_j)}+\sum_{i\in positions}\log{P(x_i|c_j)}\Biggl]</script><p><strong>This is our final goal, next we need to get the value of each term.</strong></p><hr><h4 id="2-Our-Model-Building-Process"><a href="#2-Our-Model-Building-Process" class="headerlink" title="2 Our Model Building Process"></a>2 Our Model Building Process</h4><p><strong>2 我们的模型建立过程</strong>：</p><ul><li>For the <strong>maximum likelihood estimates</strong> $P(c_j)$:</li></ul><script type="math/tex; mode=display">P(c_j)=\frac{doccount(C=c_j)}{N_{doc}}</script><blockquote><p>Get the <strong>frequencies</strong> of the class appear in the dataset.<br>求出某类的<strong>初步判断概率</strong>，即</p><ul><li><script type="math/tex; mode=display">P(c_j)=\frac{\text{某类中所有语句的个数}}{\text{总的语句的个数}}</script></li></ul></blockquote><hr><ul><li>For the <strong>Parameter estimation</strong> $P(w_i|c_j)$:</li></ul><script type="math/tex; mode=display">P(w_i|c_j)= \frac{count(w_i,c_j)}{\sum_{w \in V} count(w,c_j)}</script><p>($V$ is the vocabulary maintaining all the words used for classification in dataset we trained)<br>($V$ 代表的是所有训练集中的语句中的词汇）)</p><blockquote><p>Get the frequencies of the word $w_i$ appears within all word in the dataset with class $c_j$.<br>计算出每个词语在各类中出现的频率，即</p><ul><li><script type="math/tex; mode=display">P(w_i|c_j)=\frac{\text{某词在此类中出现的次数}}{\text{此类中所有词的个数}}</script></li></ul></blockquote><hr><p><strong><em>Problem</em></strong>:</p><blockquote><p>Not training of some words will lead the result to 0 directly, which is improper.</p></blockquote><p><strong><em>Solution</em></strong>:</p><blockquote><p>Laplace (add-1) Smoothing for Naive Bayes<br>默认每个词都多出现一次</p></blockquote><script type="math/tex; mode=display">P(w_i|c_j)= \frac{count(w_i,c_j)+1}{\sum_{w \in V} (count(w,c_j)+1)}</script><script type="math/tex; mode=display">=\frac{count(w_i,c_j)+1}{\biggl(\sum_{w \in V} count(w,c_j)\biggr)+|V|}</script><hr><h4 id="3-Result-of-the-model"><a href="#3-Result-of-the-model" class="headerlink" title="3 Result of the model"></a>3 Result of the model</h4><p><strong>3 模型的结果</strong>：</p><script type="math/tex; mode=display">P(c_j),P(w_i|c_j)</script><script type="math/tex; mode=display">(c_j\in C, w_i \in  \{x_1,x_2,...,x_n\})</script><hr><h4 id="4-Applying-the-model"><a href="#4-Applying-the-model" class="headerlink" title="4 Applying the model"></a>4 Applying the model</h4><p><strong>4 应用模型</strong>：</p><script type="math/tex; mode=display">c_{MAP}=\mathrm{argmax}_{c_j\in C}\Biggl[\log{P(c_j)}+\sum_{i\in positions}\log{P(x_i|c_j)}\Biggl]</script><p><strong>[Example]</strong></p><p>We have 3 classes: Positive, Negative, Neutral.<br>then $C={\text{positive, negative, neutral}}$</p><p>We can get the model results:</p><script type="math/tex; mode=display">c_{\text{positive}}=\log{P(\text{positive})}+\sum_{i\in positions}\log{P(x_i|positive)}</script><script type="math/tex; mode=display">c_{\text{negative}}=\log{P(\text{negative})}+\sum_{i\in positions}\log{P(x_i|negative)}</script><script type="math/tex; mode=display">c_{\text{neutral}}=\log{P(\text{neutral})}+\sum_{i\in positions}\log{P(x_i|neutral)}</script><p>Then we can find the class with maximum value, e.g. $c_{\text{neutral}}$ is the largest one, then the class of the tested document is Neutral.</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Slides of COMP1433  Introduction to Data Analytics, The Hong Kong Polytechnic University.<br><a href="https://youtu.be/O2L2Uv9pdDA">Naive Bayes, Clearly Explained!!! - YouTube</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>初次接触Naive Bayes，相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Naive Bayes Classifiers</tag>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Disjoint Set Introduction - 并查集简介</title>
    <link href="/2022/03/25/disjoint-set-introduction/"/>
    <url>/2022/03/25/disjoint-set-introduction/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><p>本文记录并查集(Disjoint Set)的学习，包括Graph的简介，Union和Find的实现，以及其的优化。</p><hr><h1 id="1-Introduction-of-Graph"><a href="#1-Introduction-of-Graph" class="headerlink" title="1 Introduction of Graph"></a>1 Introduction of Graph</h1><h2 id="1-1-Undirected-Graph"><a href="#1-1-Undirected-Graph" class="headerlink" title="1.1 Undirected Graph"></a>1.1 Undirected Graph</h2><center><img src="/2022/03/25/disjoint-set-introduction/2.png" width="60%" alt="Undirected Graph"></center><p>Graph $G=(V,E)$</p><p>$V=$ the set of all vertices (nodes);<br>$E=$ edges (arcs) between pairs of vertices.</p><p>Undirected Graph: each edge do NOT have direction, having a two-way relation.</p><span id="more"></span><hr><h2 id="1-2-Directed-Graph"><a href="#1-2-Directed-Graph" class="headerlink" title="1.2 Directed Graph"></a>1.2 Directed Graph</h2><center><img src="/2022/03/25/disjoint-set-introduction/3.png" width="60%" alt="Directed Graph"></center><p>Directed Graph: every edges are directional.</p><hr><h2 id="1-3-Weighted-Graph"><a href="#1-3-Weighted-Graph" class="headerlink" title="1.3 Weighted Graph"></a>1.3 Weighted Graph</h2><center><img src="/2022/03/25/disjoint-set-introduction/4.png" width="60%" alt="Weighted Graph"></center><p>Weighted Graph: each edge has an associated weight.</p><hr><h2 id="1-4-Terminologies"><a href="#1-4-Terminologies" class="headerlink" title="1.4 Terminologies"></a>1.4 Terminologies</h2><p><code>Vertex</code>: The node of a graph;<br><code>Edge</code>: The connection between two vertices;<br><code>Path</code>: The sequence of vertices from one vertex to another;<br><code>Path Length</code>: The number of edges in a path;<br><code>Cycle</code>: A path with same starting vertex and endpoint vertex;<br><code>Connectivity</code>: Two vertices are connected if there exists at least one path between them;<br><code>Degree of a Vertex</code>: The number of edges connecting the vertex in a unweighted graph;<br><code>In-Degree</code>: For weighted graph, the number of edges <strong>incident to</strong> a vertex, In-degree of vertex 2 is 3;<br><code>Out-Degree</code>: For weighted graph, the number of edges <strong>incident from</strong> a vertex, In-degree of vertex 2 is 1;</p><hr><h1 id="2-Disjoint-Set"><a href="#2-Disjoint-Set" class="headerlink" title="2 Disjoint Set"></a>2 Disjoint Set</h1><h2 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h2><center><img src="/2022/03/25/disjoint-set-introduction/5.png" width="60%" alt="Graph"></center><p>In graph, <strong>Disjoint set</strong> (并查集) can help us quickly check (Find) whether given two vertices is <strong>connected</strong> or not, e.g., vertex 1,3 are connected for there is a path 1-0-2-3, vertex 3,5 is not connected for there is no path from 3 to 5. It also can help us <strong>union</strong> two disjoint set into a set and maintain their relationship. </p><blockquote><p>The main point for the disjoint set function is to <strong>check whether two vertices have a same parent root vertex, if yes, then there are connected</strong>, e.g. root vertex of 1 and 3 is vertex 0, so they are connected, and the root vertex of 3 is 0, root vertex of 5 is 4, so having different root means 3 and 5 are not connected. </p></blockquote><hr><h3 id="2-1-1-Basic-Disjoint-Set-Implementation"><a href="#2-1-1-Basic-Disjoint-Set-Implementation" class="headerlink" title="2.1.1 Basic Disjoint Set Implementation:"></a>2.1.1 Basic Disjoint Set Implementation:</h3><ul><li><strong>Union</strong> function to add node into the disjoint set.</li></ul><p>A root array, each index represent each vertex; the value of each element refers to vertex’s <strong>parent</strong></p><center><img src="/2022/03/25/disjoint-set-introduction/7.png" width="90%" alt="Basic Disjoint Set Implementation - Union"></center><hr><ul><li><strong>check</strong> function, using <strong>find</strong> function to find the parent of the vertex until the parent of the vertex is itself means the root is found, then compare whether their root is same or not, same means connected.</li></ul><center><img src="/2022/03/25/disjoint-set-introduction/8.png" width="90%" alt="Basic Disjoint Set Implementation - Find"></center><hr><h2 id="2-2-Quick-Find"><a href="#2-2-Quick-Find" class="headerlink" title="2.2 Quick Find"></a>2.2 Quick Find</h2><p>Disjoint Set has two main function- Union and Find;</p><blockquote><p><strong>Quick Find</strong> is a optimization of <strong>Find</strong> function of generic disjoint set by storing the <strong>root node</strong> of vertices in the root array.</p></blockquote><p><strong>Advantage</strong>:<br>It directly stores the root node of a vertex in the root array instead of the parent node, which makes the Find function become access the value of the index in the array, making the Find function much faster.</p><p><strong>Drawback</strong>:<br>But it slows down the Union function, because the root array stores root(s) of each node in the disjoint set, every Union function needs to update a specific root, which is found by traversing the entire set. For Union(A,B), we have to every node has a same root as root(B), and then update them to root(A)</p><p><strong>Directly stores the root node of a vertex in the root array</strong>:</p><center><img src="/2022/03/25/disjoint-set-introduction/9.png" width="90%" alt="Quick Find"></center><p><strong>Faster finding, just access the value at the index</strong>:</p><center><img src="/2022/03/25/disjoint-set-introduction/11.png" width="90%" alt="Quick Find"></center><p><strong>Slow down the union function</strong>, for entire set traversing, especially union a big set:</p><center><img src="/2022/03/25/disjoint-set-introduction/10.png" width="90%" alt="Quick Find"></center><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickFind</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuickFind</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123; <span class="hljs-comment">// Directly stores the root node</span><br>        <span class="hljs-keyword">return</span> root[x]; <span class="hljs-comment">// return the value of index as the root</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; root.length; i++) &#123; <span class="hljs-comment">// Traversing entire set</span><br>                <span class="hljs-keyword">if</span> (root[i] == rootY) &#123; <span class="hljs-comment">// Who has the same root as y,</span><br>                    root[i] = rootX; <span class="hljs-comment">// change its root to root of x</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRootArr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i:root) &#123;<br>            sb.append(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Run the test code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">QuickFind</span> <span class="hljs-variable">qf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QuickFind</span>(<span class="hljs-number">7</span>);<br><br>            qf.union(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            qf.union(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            qf.union(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>            qf.union(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>            qf.union(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br><br>            System.out.println(qf.isConnected(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)); <br>            System.out.println(qf.isConnected(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)); <br>            System.out.println(qf.getRootArr().toString()); <br><br>            uf.union(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>            System.out.println(qf.isConnected(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br>            System.out.println(qf.getRootArr().toString());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-number">0000444</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">0000000</span><br></code></pre></td></tr></table></figure><p><strong>Time Complexity</strong>:</p><p><code>find()</code>: $O(1)$, for accessing an element of the array at the given index.<br><code>union()</code>: $O(N)$, for traversing the entire array.</p><hr><h2 id="2-3-Quick-Union"><a href="#2-3-Quick-Union" class="headerlink" title="2.3 Quick Union"></a>2.3 Quick Union</h2><blockquote><p>Quick Union is actually the <strong>Basic Disjoint Set Implementation</strong> abovementioned, which optimizes the <strong>Union</strong> function compared with Quick Find. It store the <strong>parent root</strong> in the root array instead of the root node.</p></blockquote><p><strong>Advantage</strong>:<br>When union(A, B), only change the root of root of B to the root of A, then A and B will be connected, i.e. <code>root[find[A]] = find[B]</code>. No need to traverse the entire set like Quick Find, because we only store the parent node in the array, mean to be having less modify.</p><p><strong>Drawback</strong>:<br>Due to the root array only store the parent node, once we want to find the root of a node, we need to look up the parents through the array until find the top root, which means find whose root node is itself, <code>root[A] = A</code>. This process will take some time comparing with just accessing the value of index in Quick Find.</p><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickUnion</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuickUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123; <span class="hljs-comment">// Store the parent of the vertex</span><br>        <span class="hljs-keyword">while</span> (root[x] != x) &#123; <span class="hljs-comment">// Loop until find the root</span><br>            x = root[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>           root[rootY] = rootX; <span class="hljs-comment">// Union just operates the root node</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRootArr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i:root) &#123;<br>            sb.append(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Run the test code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">QuickUnion</span> <span class="hljs-variable">qu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QuickUnion</span>(<span class="hljs-number">7</span>);<br><br>            qu.union(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            qu.union(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            qu.union(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>            qu.union(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>            qu.union(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br><br>            System.out.println(qu.isConnected(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// true</span><br>            System.out.println(qu.isConnected(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// false</span><br>            System.out.println(qu.getRootArr().toString());<br><br>            qu.union(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>            System.out.println(qu.isConnected(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// true</span><br>            System.out.println(qu.getRootArr().toString());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-number">0000444</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">0000044</span><br></code></pre></td></tr></table></figure><p><strong>Time Complexity</strong>:</p><p><code>find()</code>: $\le O(N)$, for the worst case, we have to traverse all vertices to get the root, e.g. all vertices connected in a line<br><code>union()</code>: $\le O(N)$, it composites two <code>find()</code> functions, in the worst case, it also takes $O(N)$ time.</p><hr><p><strong>Quick Union is more efficient than Quick Find</strong>:</p><p>In all, for a <code>N</code>-disjoint set,</p><p><strong>Quick Find</strong> take <strong>exactly</strong> $N\times O(N)= O(N^2)$ time;<br><strong>Quick Union</strong> take <strong>at most</strong> $N\times O(N)= O(N^2)$ time.</p><hr><h2 id="2-5-Union-by-Rank-Optimized-Union"><a href="#2-5-Union-by-Rank-Optimized-Union" class="headerlink" title="2.5 Union by Rank - Optimized Union"></a>2.5 Union by Rank - Optimized Union</h2><p>Abovementioned, Quick Union will take $O(N^2)$ in the worst case when all vertices connected in a line:</p><center><img src="/2022/03/25/disjoint-set-introduction/12.png" width="50%" alt="Union by Rank"></center><blockquote><p>We can optimize Quick Union by assigning each vertex a <strong>rank</strong> attribute, which indicate the <strong>height</strong> of each node, e.g., the height of node 0 is 1, node 4 is 5 in above picture.</p></blockquote><p>When connecting two root node, <strong>we choose the root with larger rank as the parent node of another</strong>, which can make the rank of each node unchanged. Otherwise, the highest rank will be increased. </p><center><img src="/2022/03/25/disjoint-set-introduction/13.png" width="80%" alt="Union by Rank"></center><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickUnion</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] rank; <span class="hljs-comment">// rank attribute</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuickUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">// initial the rank as 1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">while</span> (root[x] != x) &#123;<br>            x = root[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>            <span class="hljs-comment">// choose the root with larger rank as parent</span><br>            <span class="hljs-keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123; <br>                root[rootY] = rootX;<br>            &#125; <br>            <span class="hljs-comment">// choose the root with larger rank as parent</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123; <br>                root[rootX] = rootY;<br>            &#125; <br>            <span class="hljs-comment">// if same rank</span><br>            <span class="hljs-keyword">else</span> &#123; <br>                root[rootY] = rootX; <span class="hljs-comment">// choose x as parent by default</span><br>                rank[rootX] += <span class="hljs-number">1</span>; <span class="hljs-comment">// increasing the rank of x by 1</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRootArr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i:root) &#123;<br>            sb.append(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test for the <strong>worst</strong> case:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">QuickUnion</span> <span class="hljs-variable">qu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QuickUnion</span>(<span class="hljs-number">5</span>);<br><br>            qu.union(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            qu.union(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>            qu.union(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>);<br>            qu.union(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><br>            System.out.println(qu.getRootArr().toString());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">11111</span><br></code></pre></td></tr></table></figure><p>which is:</p><center><img src="/2022/03/25/disjoint-set-introduction/14.png" width="60%" alt="Union by Rank"></center><p><strong>Time Complexity</strong>:</p><p><code>find()</code>: $\le O(\log N)$, for the worst case, we have to traverse all vertices to get the root, e.g. all vertices connected in a line<br><code>union()</code>: $\le O(\log N)$, it composites two <code>find()</code> functions, in the worst case, it also takes $O(N)$ time.</p><hr><h2 id="2-6-Path-Compression-Optimized-Find"><a href="#2-6-Path-Compression-Optimized-Find" class="headerlink" title="2.6 Path Compression - Optimized Find"></a>2.6 Path Compression - Optimized Find</h2><p>In the above Quick Union, we find the root of a node by traversing, if we want to find its root again, we have to repeat the traversing again. We can optimize it by <strong>Path Compression</strong>, which can <strong>update the parent node of each traversed one to the finally found root node</strong>, then when we find the root again, the root has already been stored in the array, saving a lot of time. This optimization can be done with <strong>recursion</strong>. </p><center><img src="/2022/03/25/disjoint-set-introduction/15.png" width="60%" alt="Path Compression"></center><p>Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickUnion</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuickUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root[x] == x) &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-comment">// Recursively updating each traversed node</span><br>        <span class="hljs-keyword">return</span> root[x] = find(root[x]); <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>           root[rootY] = rootX;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRootArr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i:root) &#123;<br>            sb.append(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test for the <strong>worst</strong> case:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">QuickUnion</span> <span class="hljs-variable">qu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QuickUnion</span>(<span class="hljs-number">5</span>);<br><br>            qu.union(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            qu.union(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>            qu.union(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>            qu.union(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>            System.out.println(qu.getRootArr().toString());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">00000</span><br></code></pre></td></tr></table></figure><p><strong>Time Complexity</strong>:</p><p><code>find()</code>: $O(\log N)$ on average;<br><code>union()</code>: $O(\log N)$ on average.</p><hr><h2 id="2-7-Optimized-Disjoint-Set"><a href="#2-7-Optimized-Disjoint-Set" class="headerlink" title="2.7 Optimized Disjoint Set"></a>2.7 Optimized Disjoint Set</h2><p>Implement Disjoint set with optimization of both <strong>Union by Rank</strong> and <strong>Path Compression</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickUnion</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] rank; <span class="hljs-comment">// rank attribute</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuickUnion</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">// initial the rank as 1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Path Compression</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root[x] == x) &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-comment">// Recursively updating each traversed node</span><br>        <span class="hljs-keyword">return</span> root[x] = find(root[x]); <br>    &#125;<br>    <span class="hljs-comment">// Union by Rank</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>            <span class="hljs-comment">// choose the root with larger rank as parent</span><br>            <span class="hljs-keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123; <br>                root[rootY] = rootX;<br>            &#125; <br>            <span class="hljs-comment">// choose the root with larger rank as parent</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123; <br>                root[rootX] = rootY;<br>            &#125; <br>            <span class="hljs-comment">// if same rank</span><br>            <span class="hljs-keyword">else</span> &#123; <br>                root[rootY] = rootX; <span class="hljs-comment">// choose x as parent by default</span><br>                rank[rootX] += <span class="hljs-number">1</span>; <span class="hljs-comment">// increasing the rank of x by 1</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Problem:<br>After path compression, every node below the root will become the direct child of the root, which makes the actual rank value differ from the one store in rank array. It will make the Union By Rank inaccurate. The solution may be (a) using just one optimization in implementation, or (b) using the number of node to replace height of the node for the Rank attribute. </p></blockquote><hr><p>Last updated on 2022-03-31</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://leetcode.com/explore/learn/card/graph/">Graph - Explore - LeetCode</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Disjoint Set 和 Graph 相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Data Structure</category>
      
      <category>Disjoint Set</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Graph</tag>
      
      <tag>Disjoint-Set</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array Problems (持续更新)</title>
    <link href="/2022/03/14/array-problems/"/>
    <url>/2022/03/14/array-problems/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h1 id="1-Introduction-of-Array"><a href="#1-Introduction-of-Array" class="headerlink" title="1 Introduction of Array"></a>1 Introduction of Array</h1><blockquote><p>Array is a collection of items.</p></blockquote><span id="more"></span><h2 id="1-1-Array-Creation"><a href="#1-1-Array-Creation" class="headerlink" title="1.1 Array Creation"></a>1.1 Array Creation</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] intArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h2 id="1-2-Array-Writing"><a href="#1-2-Array-Writing" class="headerlink" title="1.2 Array Writing"></a>1.2 Array Writing</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">intArr[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>; <span class="hljs-comment">// put 3 in the third place of the Array</span><br></code></pre></td></tr></table></figure><h2 id="1-3-Array-Reading"><a href="#1-3-Array-Reading" class="headerlink" title="1.3 Array Reading"></a>1.3 Array Reading</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(intArr[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><h2 id="1-4-Array-Slicing"><a href="#1-4-Array-Slicing" class="headerlink" title="1.4 Array Slicing"></a>1.4 Array Slicing</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] newArray = Arrays.copyOfRange(oldArray, startIndex, endIndex); <span class="hljs-comment">// java.util.Arrays</span><br></code></pre></td></tr></table></figure><h2 id="1-5-Array-Capacity"><a href="#1-5-Array-Capacity" class="headerlink" title="1.5 Array Capacity"></a>1.5 Array Capacity</h2><blockquote><p>The number of items the Array <strong>could hold</strong>;</p></blockquote><p>In Java, the capacity of an Array is checked by Array’s <code>length</code> attribute.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(intArr.length);<br></code></pre></td></tr></table></figure><hr><h2 id="1-6-Array-Length"><a href="#1-6-Array-Length" class="headerlink" title="1.6 Array Length"></a>1.6 Array Length</h2><blockquote><p>The number of items <strong>currently</strong> in the Array.</p></blockquote><p>Array’s length need to be <strong>tracked</strong> by the programmer. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] intArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    array[i] = i;<br>    len++;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;Capacity: &quot;</span> + array.length);<br>System.out.println(<span class="hljs-string">&quot;Length: &quot;</span> + length);<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Capacity: <span class="hljs-number">5</span><br>Length: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><h2 id="Max-Consecutive-Ones-LeetCode-Problem-485"><a href="#Max-Consecutive-Ones-LeetCode-Problem-485" class="headerlink" title="Max Consecutive Ones - LeetCode Problem #485"></a><a href="https://leetcode.com/problems/max-consecutive-ones/">Max Consecutive Ones - LeetCode Problem #485</a></h2><center><img src="/2022/03/14/array-problems/1.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findMaxConsecutiveOnes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums)&#123;<br>            count = (i == <span class="hljs-number">1</span>? count+<span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>            maxCount = (count &gt; maxCount ? count:maxCount);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxCount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Find-Numbers-with-Even-Number-of-Digits-LeetCode-Problem-1295"><a href="#Find-Numbers-with-Even-Number-of-Digits-LeetCode-Problem-1295" class="headerlink" title="Find Numbers with Even Number of Digits - LeetCode Problem #1295"></a><a href="https://leetcode.com/problems/find-numbers-with-even-number-of-digits/">Find Numbers with Even Number of Digits - LeetCode Problem #1295</a></h2><center><img src="/2022/03/14/array-problems/2.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            <span class="hljs-keyword">if</span> (((<span class="hljs-type">int</span>)Math.log10(i)+<span class="hljs-number">1</span>) % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>) &#123;total += <span class="hljs-number">1</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Squares-of-a-Sorted-Array-LeetCode-Problem-977"><a href="#Squares-of-a-Sorted-Array-LeetCode-Problem-977" class="headerlink" title="Squares of a Sorted Array - LeetCode Problem #977"></a><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">Squares of a Sorted Array - LeetCode Problem #977</a></h2><center><img src="/2022/03/14/array-problems/3.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span>[] out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (Math.abs(nums[left]) &lt; Math.abs(nums[right])) &#123;<br>                out[index] = nums[right] * nums[right];<br>                right -= <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                out[index] = nums[left] * nums[left];<br>                left += <span class="hljs-number">1</span>;<br>            &#125;<br>            index -=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="2-Array-Inserting"><a href="#2-Array-Inserting" class="headerlink" title="2 Array Inserting"></a>2 Array Inserting</h1><h2 id="Duplicate-Zeros-LeetCode-Problem-1089"><a href="#Duplicate-Zeros-LeetCode-Problem-1089" class="headerlink" title="Duplicate Zeros - LeetCode Problem #1089"></a><a href="https://leetcode.com/problems/duplicate-zeros/">Duplicate Zeros - LeetCode Problem #1089</a></h2><center><img src="/2022/03/14/array-problems/4.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duplicateZeros</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">zeroCnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;zeroCnt += <span class="hljs-number">1</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=len-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> j+zeroCnt;<br>            <span class="hljs-keyword">if</span> (index &lt; len) &#123;<br>                arr[index]=arr[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[j]==<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span>(index-<span class="hljs-number">1</span>&lt;len) &#123;arr[index-<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;&#125;<br>                zeroCnt-=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Merge-Sorted-Array-LeetCode-Problem-88"><a href="#Merge-Sorted-Array-LeetCode-Problem-88" class="headerlink" title="Merge Sorted Array - LeetCode Problem #88"></a><a href="https://leetcode.com/problems/merge-sorted-array/">Merge Sorted Array - LeetCode Problem #88</a></h2><center><img src="/2022/03/14/array-problems/5.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> m+n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (p2&gt;=<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (p1&gt;=<span class="hljs-number">0</span> &amp;&amp; nums1[p1]&gt;nums2[p2]) &#123;<br>                nums1[p] = nums1[p1];<br>                p-=<span class="hljs-number">1</span>;<br>                p1-=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                nums1[p] = nums2[p2];<br>                p-=<span class="hljs-number">1</span>;<br>                p2-=<span class="hljs-number">1</span>;<br>            &#125;  <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="3-Array-Deleting"><a href="#3-Array-Deleting" class="headerlink" title="3 Array Deleting"></a>3 Array Deleting</h1><h2 id="Remove-Element-LeetCode-Problem-27"><a href="#Remove-Element-LeetCode-Problem-27" class="headerlink" title="Remove Element - LeetCode Problem #27"></a><a href="https://leetcode.com/problems/remove-element/">Remove Element - LeetCode Problem #27</a></h2><center><img src="/2022/03/14/array-problems/6.png" width="100%"></center><center><img src="/2022/03/14/array-problems/7.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span> || (nums.length == <span class="hljs-number">1</span> &amp;&amp; val == nums[<span class="hljs-number">0</span>])) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">outLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (nums[left] == val) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[left];<br>                nums[left] = nums[right];<br>                nums[right] = tmp;<br>                right -= <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                outLen += <span class="hljs-number">1</span>;<br>                left += <span class="hljs-number">1</span>; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outLen;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Remove-Duplicates-from-Sorted-Array-LeetCode-Problem-26"><a href="#Remove-Duplicates-from-Sorted-Array-LeetCode-Problem-26" class="headerlink" title="Remove Duplicates from Sorted Array - LeetCode Problem #26"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">Remove Duplicates from Sorted Array - LeetCode Problem #26</a></h2><center><img src="/2022/03/14/array-problems/8.png" width="100%"></center><center><img src="/2022/03/14/array-problems/9.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span> || nums.length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// end guy</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// front guy</span><br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right]!=nums[left]) &#123;<br>                left += <span class="hljs-number">1</span>; <span class="hljs-comment">// end guy move only when differ from front guy</span><br>                nums[left] = nums[right]; <span class="hljs-comment">// let front guy be thr next one to compare</span><br>            &#125;<br>            right += <span class="hljs-number">1</span>; <span class="hljs-comment">// front guy always keeps moving for getting each one compared</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="4-Array-Searching"><a href="#4-Array-Searching" class="headerlink" title="4 Array Searching"></a>4 Array Searching</h1><h2 id="Check-If-N-and-Its-Double-Exist-LeetCode-Problem-1346"><a href="#Check-If-N-and-Its-Double-Exist-LeetCode-Problem-1346" class="headerlink" title="Check If N and Its Double Exist - LeetCode Problem #1346"></a><a href="https://leetcode.com/problems/check-if-n-and-its-double-exist/">Check If N and Its Double Exist - LeetCode Problem #1346</a></h2><center><img src="/2022/03/14/array-problems/10.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIfExist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            <span class="hljs-keyword">if</span> (hs.contains(i*<span class="hljs-number">2</span>) || (i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> &amp;&amp; hs.contains(i/<span class="hljs-number">2</span>))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            hs.add(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Valid-Mountain-Array-LeetCode-Problem-941"><a href="#Valid-Mountain-Array-LeetCode-Problem-941" class="headerlink" title="Valid Mountain Array - LeetCode Problem #941"></a><a href="https://leetcode.com/problems/valid-mountain-array/">Valid Mountain Array - LeetCode Problem #941</a></h2><center><img src="/2022/03/14/array-problems/11.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validMountainArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length &lt; <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> arr.length-<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (left &lt;= arr.length-<span class="hljs-number">2</span> &amp;&amp; arr[left]&lt;arr[left+<span class="hljs-number">1</span>]) &#123;<br>            left += <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span> || left == arr.length-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span> (right &gt;= <span class="hljs-number">1</span> &amp;&amp; arr[right]&lt;arr[right-<span class="hljs-number">1</span>]) &#123;<br>            right -= <span class="hljs-number">1</span>;<br>        &#125;<br>            <br>        <span class="hljs-type">return</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span>= right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="5-In-place-Array-Operations"><a href="#5-In-place-Array-Operations" class="headerlink" title="5 In-place Array Operations"></a>5 In-place Array Operations</h1><blockquote><p>Working directly in the input Array, and NOT creating a new Array, reducing space and time complexity.</p></blockquote><hr><h2 id="Replace-Elements-with-Greatest-Element-on-Right-Side-LeetCode-Problem-1299"><a href="#Replace-Elements-with-Greatest-Element-on-Right-Side-LeetCode-Problem-1299" class="headerlink" title="Replace Elements with Greatest Element on Right Side - LeetCode Problem #1299"></a><a href="https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/">Replace Elements with Greatest Element on Right Side - LeetCode Problem #1299</a></h2><center><img src="/2022/03/14/array-problems/12.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] replaceElements(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxVal</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (len&gt;=<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[len];<br>            arr[len] = maxVal;<br>            maxVal = temp&gt;maxVal? temp:maxVal;<br>            len -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Move-Zeroes-LeetCode-Problem-283"><a href="#Move-Zeroes-LeetCode-Problem-283" class="headerlink" title="Move Zeroes - LeetCode Problem #283"></a><a href="https://leetcode.com/problems/move-zeroes/">Move Zeroes - LeetCode Problem #283</a></h2><center><img src="/2022/03/14/array-problems/13.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] != <span class="hljs-number">0</span>) &#123;<br>                nums[left] = nums[right];<br>                left +=<span class="hljs-number">1</span>;<br>            &#125;<br>            right += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left &lt; nums.length) &#123;<br>            nums[left] =<span class="hljs-number">0</span>;<br>            left += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Sort-Array-By-Parity-LeetCode-Problem-905"><a href="#Sort-Array-By-Parity-LeetCode-Problem-905" class="headerlink" title="Sort Array By Parity - LeetCode Problem #905"></a><a href="https://leetcode.com/problems/sort-array-by-parity/">Sort Array By Parity - LeetCode Problem #905</a></h2><center><img src="/2022/03/14/array-problems/14.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortArrayByParity(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right&lt;nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[left];<br>                nums[left] = nums[right];<br>                nums[right] = temp;<br>                left += <span class="hljs-number">1</span>;<br>            &#125;<br>            right += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="6-Classic-Problems"><a href="#6-Classic-Problems" class="headerlink" title="6 Classic Problems"></a>6 Classic Problems</h1><h2 id="Height-Checker-LeetCode-Problem-1051"><a href="#Height-Checker-LeetCode-Problem-1051" class="headerlink" title="Height Checker - LeetCode Problem #1051"></a><a href="https://leetcode.com/problems/height-checker/">Height Checker - LeetCode Problem #1051</a></h2><center><img src="/2022/03/14/array-problems/15.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">heightChecker</span><span class="hljs-params">(<span class="hljs-type">int</span>[] heights)</span> &#123;<br>        <span class="hljs-type">int</span>[] expected = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[heights.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>; u&lt;expected.length;u++) &#123;<br>            expected[u] = heights[u];<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;expected.length;i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;expected.length-i-<span class="hljs-number">1</span>;j++) &#123;<br>                <span class="hljs-keyword">if</span> (expected[j]&gt;expected[j+<span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> expected[j+<span class="hljs-number">1</span>];<br>                    expected[j+<span class="hljs-number">1</span>] = expected[j];<br>                    expected[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k &lt; expected.length; k++) &#123;<br>            <span class="hljs-keyword">if</span> (expected[k]!=heights[k]) &#123;<br>                diff +=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> diff;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Third-Maximum-Number-LeetCode-Problem-414"><a href="#Third-Maximum-Number-LeetCode-Problem-414" class="headerlink" title="Third Maximum Number - LeetCode Problem #414"></a><a href="https://leetcode.com/problems/third-maximum-number/">Third Maximum Number - LeetCode Problem #414</a></h2><center><img src="/2022/03/14/array-problems/16.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">thirdMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">fir</span> <span class="hljs-operator">=</span> Long.MIN_VALUE;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sec</span> <span class="hljs-operator">=</span> Long.MIN_VALUE;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">thi</span> <span class="hljs-operator">=</span> Long.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i:nums) &#123;<br>            <span class="hljs-keyword">if</span> (i == fir || i == sec || i == thi)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i&gt;fir) &#123;<br>                thi = sec;<br>                sec = fir;<br>                fir = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i&gt;sec) &#123;<br>                thi = sec;<br>                sec = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i&gt;thi) &#123;<br>                thi = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)((thi == Long.MIN_VALUE)? fir:thi);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Find-All-Numbers-Disappeared-in-an-Array-LeetCode-Problem-448"><a href="#Find-All-Numbers-Disappeared-in-an-Array-LeetCode-Problem-448" class="headerlink" title="Find All Numbers Disappeared in an Array - LeetCode Problem #448"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">Find All Numbers Disappeared in an Array - LeetCode Problem #448</a></h2><center><img src="/2022/03/14/array-problems/17.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">findDisappearedNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Math.abs(nums[i])-<span class="hljs-number">1</span>;<br>            nums[val] = nums[val]&gt;<span class="hljs-number">0</span>? -nums[val]:nums[val];<br>        &#125;<br>        List&lt;Integer&gt; out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[j]&gt;<span class="hljs-number">0</span>) &#123;<br>                out.add(j+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Last updated on 2022-03-14</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://leetcode.com/explore/featured/card/fun-with-arrays/">Arrays 101 - Explore - LeetCode</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Array相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Problem Set</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binary Tree Problems (持续更新)</title>
    <link href="/2022/03/08/binary-tree-problems/"/>
    <url>/2022/03/08/binary-tree-problems/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><p><strong>Definition for a binary tree node:</strong></p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode left;<br>    TreeNode right;<br>    TreeNode() &#123;&#125;<br>    TreeNode(<span class="hljs-type">int</span> val) &#123; <span class="hljs-built_in">this</span>.val = val; &#125;<br>    TreeNode(<span class="hljs-type">int</span> val, TreeNode left, TreeNode right) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="1-Binary-Tree-Traversal"><a href="#1-Binary-Tree-Traversal" class="headerlink" title="1 Binary Tree Traversal"></a>1 Binary Tree Traversal</h1><h2 id="1-1-Pre-order-Traversal"><a href="#1-1-Pre-order-Traversal" class="headerlink" title="1.1 Pre-order Traversal"></a>1.1 Pre-order Traversal</h2><blockquote><p>First visit the <strong>root</strong>, then traverse the <strong>left</strong> subtree, finally traverse the <strong>right</strong> subtree.</p></blockquote><h3 id="Binary-Tree-Preorder-Traversal-LeetCode-Problem-144"><a href="#Binary-Tree-Preorder-Traversal-LeetCode-Problem-144" class="headerlink" title="Binary Tree Preorder Traversal - LeetCode Problem #144"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">Binary Tree Preorder Traversal - LeetCode Problem #144</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Recursion 递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        PreOrder(root,outList);<br>        <span class="hljs-keyword">return</span> outList;<br>        <br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">PreOrder</span><span class="hljs-params">(TreeNode inRoot, List inList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inRoot == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inList.add(inRoot.val); <span class="hljs-comment">// store the root first</span><br>        PreOrder(inRoot.left,inList); <span class="hljs-comment">// traverse the left subtree second</span><br>        PreOrder(inRoot.right,inList); <span class="hljs-comment">// traverse the right subtree finally</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Iteration 迭代</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stack.empty()) &#123;<br>            <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(curr);<br>                outList.add(curr.val);<br>                curr=curr.left;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>                curr=node.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-2-In-order-Traversal"><a href="#1-2-In-order-Traversal" class="headerlink" title="1.2 In-order Traversal"></a>1.2 In-order Traversal</h2><blockquote><p>First traverse the <strong>left</strong> subtree, then visit the <strong>root</strong>, finally traverse the <strong>right</strong> subtree.</p></blockquote><h3 id="Binary-Tree-Inorder-Traversal-LeetCode-Problem-94"><a href="#Binary-Tree-Inorder-Traversal-LeetCode-Problem-94" class="headerlink" title="Binary Tree Inorder Traversal - LeetCode Problem #94"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">Binary Tree Inorder Traversal - LeetCode Problem #94</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Recursion 递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        InOrder(root,outList);<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(TreeNode inRoot, List inList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inRoot == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        InOrder(inRoot.left,inList); <span class="hljs-comment">// traverse the left subtree first</span><br>        inList.add(inRoot.val); <span class="hljs-comment">// store the root second</span><br>        InOrder(inRoot.right,inList); <span class="hljs-comment">// traverse the right subtree finally</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Iteration 迭代</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stack.empty()) &#123;<br>            <span class="hljs-keyword">if</span> (curr!=<span class="hljs-literal">null</span>) &#123;<br>                stack.push(curr);<br>                curr = curr.left;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>                outList.add(node.val);<br>                curr = node.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-Post-order-Traversal"><a href="#1-3-Post-order-Traversal" class="headerlink" title="1.3 Post-order Traversal"></a>1.3 Post-order Traversal</h2><blockquote><p>First traverse the <strong>left</strong> subtree, then traverse the <strong>right</strong> subtree, finally visit the <strong>root</strong>.</p></blockquote><h3 id="Binary-Tree-Postorder-Traversal-LeetCode-Problem-145"><a href="#Binary-Tree-Postorder-Traversal-LeetCode-Problem-145" class="headerlink" title="Binary Tree Postorder Traversal - LeetCode Problem #145"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">Binary Tree Postorder Traversal - LeetCode Problem #145</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Recursion 递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        PostOrder(root,outList);<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">PostOrder</span><span class="hljs-params">(TreeNode inRoot, List inList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inRoot == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        PostOrder(inRoot.left,inList); <span class="hljs-comment">// traverse the left subtree first</span><br>        PostOrder(inRoot.right,inList); <span class="hljs-comment">// traverse the right subtree second</span><br>        inList.add(inRoot.val); <span class="hljs-comment">// store the root finally</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Iteration 迭代</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stack.empty()) &#123;<br>            <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(curr);<br>                curr = curr.left;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.peek();<br>                <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span> &amp;&amp; last != node.right) &#123;<br>                    curr = node.right;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    outList.add(node.val);<br>                    last = stack.pop();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-4-Construct-Binary-Tree-from-two-kinds-of-Traversal"><a href="#1-4-Construct-Binary-Tree-from-two-kinds-of-Traversal" class="headerlink" title="1.4 Construct Binary Tree from two kinds of Traversal"></a>1.4 Construct Binary Tree from two kinds of Traversal</h2><h3 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-LeetCode-Problem-106"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-LeetCode-Problem-106" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal - LeetCode Problem #106"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">Construct Binary Tree from Inorder and Postorder Traversal - LeetCode Problem #106</a></h3><center><img src="/2022/03/08/binary-tree-problems/5.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootVal</span> <span class="hljs-operator">=</span> postorder[postorder.length-<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;inorder.length;i++) &#123;<br>            <span class="hljs-keyword">if</span> (inorder[i]==rootVal) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] inLeft = Arrays.copyOfRange(inorder,<span class="hljs-number">0</span>,i);<br>        <span class="hljs-type">int</span>[] inRight = Arrays.copyOfRange(inorder,i+<span class="hljs-number">1</span>,inorder.length);<br>        <br>        <span class="hljs-type">int</span>[] postLeft = Arrays.copyOfRange(postorder,<span class="hljs-number">0</span>,i);<br>        <span class="hljs-type">int</span>[] postRight = Arrays.copyOfRange(postorder,i,inorder.length-<span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">outTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(rootVal);<br>        <br>        outTree.left = buildTree(inLeft,postLeft);<br><br>        outTree.right = buildTree(inRight,postRight);<br>        <br>        <span class="hljs-keyword">return</span> outTree;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-LeetCode-Problem-105"><a href="#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-LeetCode-Problem-105" class="headerlink" title="Construct Binary Tree from Preorder and Inorder Traversal - LeetCode Problem #105"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">Construct Binary Tree from Preorder and Inorder Traversal - LeetCode Problem #105</a></h3><center><img src="/2022/03/08/binary-tree-problems/6.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootVal</span> <span class="hljs-operator">=</span> preorder[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;inorder.length;i++) &#123;<br>            <span class="hljs-keyword">if</span> (inorder[i] == rootVal) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] inLeft = Arrays.copyOfRange(inorder,<span class="hljs-number">0</span>,i);<br>        <span class="hljs-type">int</span>[] inRight = Arrays.copyOfRange(inorder,i+<span class="hljs-number">1</span>,inorder.length);<br>        <br>        <span class="hljs-type">int</span>[] preLeft = Arrays.copyOfRange(preorder,<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span>[] preRight = Arrays.copyOfRange(preorder,i+<span class="hljs-number">1</span>,inorder.length);<br>        <br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">outTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(rootVal);<br>        <br>        outTree.left = buildTree(preLeft, inLeft);<br>        outTree.right = buildTree(preRight,inRight);<br>        <br>        <span class="hljs-keyword">return</span> outTree;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Construct-Binary-Tree-from-Preorder-and-Postorder-Traversal-LeetCode-Problem-889"><a href="#Construct-Binary-Tree-from-Preorder-and-Postorder-Traversal-LeetCode-Problem-889" class="headerlink" title="Construct Binary Tree from Preorder and Postorder Traversal - LeetCode Problem #889"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">Construct Binary Tree from Preorder and Postorder Traversal - LeetCode Problem #889</a></h3><center><img src="/2022/03/08/binary-tree-problems/7.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">constructFromPrePost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (preorder.length == <span class="hljs-number">0</span> || postorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (preorder.length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[<span class="hljs-number">0</span>]));<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootVal</span> <span class="hljs-operator">=</span> preorder[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftSubNode</span> <span class="hljs-operator">=</span> preorder[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightSubNode</span> <span class="hljs-operator">=</span> postorder[postorder.length-<span class="hljs-number">2</span>];<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;preorder.length;i++) &#123;<br>            <span class="hljs-keyword">if</span> (preorder[i] == rightSubNode) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;postorder.length;j++) &#123;<br>            <span class="hljs-keyword">if</span> (postorder[j] == leftSubNode) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] preLeft;<br>        <span class="hljs-type">int</span>[] preRight;<br>        <br>        <span class="hljs-keyword">if</span>(preorder[i]==postorder[j]) &#123;<br>            preLeft = Arrays.copyOfRange(preorder,i,preorder.length);<br>            preRight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (preorder.length==<span class="hljs-number">2</span>) &#123;<br>            preLeft = Arrays.copyOfRange(preorder,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>            preRight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            preLeft = Arrays.copyOfRange(preorder,<span class="hljs-number">1</span>,i);<br>            preRight = Arrays.copyOfRange(preorder,i,preorder.length);<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] postLeft;<br>        <span class="hljs-type">int</span>[] postRight;<br>        <br>        <span class="hljs-keyword">if</span>(preorder[i]==postorder[j]) &#123;<br>            postLeft = Arrays.copyOfRange(postorder,<span class="hljs-number">0</span>,j+<span class="hljs-number">1</span>);<br>            postRight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (postorder.length==<span class="hljs-number">2</span>) &#123;<br>            postLeft = Arrays.copyOfRange(postorder,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>            postRight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            postLeft = Arrays.copyOfRange(postorder,<span class="hljs-number">0</span>,j+<span class="hljs-number">1</span>);<br>            postRight = Arrays.copyOfRange(postorder,j+<span class="hljs-number">1</span>,postorder.length-<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">outTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(rootVal);<br>        <br>        outTree.left = constructFromPrePost(preLeft, postLeft);<br>        outTree.right = constructFromPrePost(preRight,postRight);<br>        <br>        <span class="hljs-keyword">return</span> outTree;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-5-Level-Order-Traversal"><a href="#1-5-Level-Order-Traversal" class="headerlink" title="1.5 Level Order Traversal"></a>1.5 Level Order Traversal</h2><blockquote><p>Applied in <code>Breadth-First Search</code>, start with the root, first visit the <strong>root</strong>, then traverse its <strong>neighbors</strong>, second level <strong>neighbors</strong>,…, so on and so forth. </p></blockquote><h3 id="Binary-Tree-Level-Order-Traversal-LeetCode-Problem-102"><a href="#Binary-Tree-Level-Order-Traversal-LeetCode-Problem-102" class="headerlink" title="Binary Tree Level Order Traversal - LeetCode Problem #102"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal - LeetCode Problem #102</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; outList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> outList;<br>        &#125;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            List&lt;Integer&gt; inList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">inNode</span> <span class="hljs-operator">=</span> queue.remove();<br>                inList.add(inNode.val);<br>                <span class="hljs-keyword">if</span> (inNode.left != <span class="hljs-literal">null</span>) &#123;<br>                    queue.add(inNode.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (inNode.right != <span class="hljs-literal">null</span>) &#123;<br>                    queue.add(inNode.right);<br>                &#125;<br>            &#125;<br>            outList.add(inList);<br>        &#125;<br>        <span class="hljs-keyword">return</span> outList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="2-Classic-Problem"><a href="#2-Classic-Problem" class="headerlink" title="2 Classic Problem"></a>2 Classic Problem</h1><h2 id="Maximum-Depth-of-Binary-Tree-LeetCode-Problem-104"><a href="#Maximum-Depth-of-Binary-Tree-LeetCode-Problem-104" class="headerlink" title="Maximum Depth of Binary Tree - LeetCode Problem #104"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">Maximum Depth of Binary Tree - LeetCode Problem #104</a></h2><center><img src="/2022/03/08/binary-tree-problems/1.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left_depth</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right_depth</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>        <span class="hljs-keyword">return</span> Math.max(left_depth,right_depth)+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Minimum-Depth-of-Binary-Tree-LeetCode-Problem-111"><a href="#Minimum-Depth-of-Binary-Tree-LeetCode-Problem-111" class="headerlink" title="Minimum Depth of Binary Tree - LeetCode Problem #111"></a><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/">Minimum Depth of Binary Tree - LeetCode Problem #111</a></h2><center><img src="/2022/03/08/binary-tree-problems/2.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left_depth</span> <span class="hljs-operator">=</span> minDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right_depth</span> <span class="hljs-operator">=</span> minDepth(root.right);<br>        <span class="hljs-keyword">if</span> (root.left==<span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> right_depth+<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">if</span> (root.right==<span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> left_depth+<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">return</span> Math.min(left_depth,right_depth)+<span class="hljs-number">1</span>;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Symmetric-Tree-LeetCode-Problem-101"><a href="#Symmetric-Tree-LeetCode-Problem-101" class="headerlink" title="Symmetric Tree - LeetCode Problem #101"></a><a href="https://leetcode.com/problems/symmetric-tree/">Symmetric Tree - LeetCode Problem #101</a></h2><center><img src="/2022/03/08/binary-tree-problems/3.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> check(root.left,root.right);<br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span> <span class="hljs-params">(TreeNode l, TreeNode r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l==<span class="hljs-literal">null</span> &amp;&amp; r==<span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        <span class="hljs-keyword">if</span> (l==<span class="hljs-literal">null</span> || r==<span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        <span class="hljs-keyword">if</span> (l.val != r.val) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        <span class="hljs-keyword">return</span> check(l.left,r.right) &amp;&amp; check(l.right,r.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Path-Sum-LeetCode-Problem-112"><a href="#Path-Sum-LeetCode-Problem-112" class="headerlink" title="Path Sum - LeetCode Problem #112"></a><a href="https://leetcode.com/problems/path-sum/">Path Sum - LeetCode Problem #112</a></h2><center><img src="/2022/03/08/binary-tree-problems/4.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        <span class="hljs-keyword">if</span> (root.val == targetSum &amp;&amp; root.left==<span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hasPathSum(root.left,targetSum-root.val) <br>                || hasPathSum(root.right,targetSum-root.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Convert-Sorted-Array-to-Binary-Search-Tree-LeetCode-Problem-108"><a href="#Convert-Sorted-Array-to-Binary-Search-Tree-LeetCode-Problem-108" class="headerlink" title="Convert Sorted Array to Binary Search Tree - LeetCode Problem #108"></a><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">Convert Sorted Array to Binary Search Tree - LeetCode Problem #108</a></h2><center><img src="/2022/03/08/binary-tree-problems/8.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedArrayToBST</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[<span class="hljs-number">0</span>]);&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (nums.length-<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">outTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[mid]);<br>        <span class="hljs-type">int</span>[] leftArr = Arrays.copyOfRange(nums,<span class="hljs-number">0</span>,mid);<br>        <span class="hljs-type">int</span>[] rightArr = Arrays.copyOfRange(nums,mid+<span class="hljs-number">1</span>,nums.length);<br>        outTree.left = sortedArrayToBST(leftArr);<br>        outTree.right = sortedArrayToBST(rightArr);<br>        <span class="hljs-keyword">return</span> outTree;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Invert-Binary-Tree-LeetCode-Problem-226"><a href="#Invert-Binary-Tree-LeetCode-Problem-226" class="headerlink" title="Invert Binary Tree - LeetCode Problem #226"></a><a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree - LeetCode Problem #226</a></h2><center><img src="/2022/03/08/binary-tree-problems/9.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>        invertTree(root.left);<br>        invertTree(root.right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Last updated on 2022-03-16</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://leetcode.com/explore/learn/card/data-structure-tree/">Binary Tree - Explore - LeetCode</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Binary Tree相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Problem Set</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Binary Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linked List Problems (持续更新)</title>
    <link href="/2022/03/08/linked-list-problems/"/>
    <url>/2022/03/08/linked-list-problems/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><blockquote><p>Linked List is a <strong>linear</strong> data structure, with separate object in it. Each object is linked together by the <strong>reference field</strong>.</p><span id="more"></span></blockquote><ul><li><p>Singly Linked List:</p><center> <img src="/2022/03/08/linked-list-problems/2.png" width="50%"></center></li><li><p>Doubly Linked List:</p></li></ul><center><img src="/2022/03/08/linked-list-problems/3.png" width="90%"></center><hr><h1 id="1-Singly-Linked-List"><a href="#1-Singly-Linked-List" class="headerlink" title="1 Singly Linked List"></a>1 Singly Linked List</h1><h2 id="1-2-Introduction"><a href="#1-2-Introduction" class="headerlink" title="1.2 Introduction"></a>1.2 Introduction</h2><center><img src="/2022/03/08/linked-list-problems/2.png" width="60%"></center><blockquote><p>Singly Linked List contains it <strong>value</strong> and the reference field pointing to its <strong>next</strong> node. </p></blockquote><p><strong>Node Structure of a Singly Linked List:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    SinglyListNode next;<br>    SinglyListNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Implementation of the Linked List (Singly and Doubly):</strong></p><h3 id="Design-Linked-List-LeetCode-Problem-707"><a href="#Design-Linked-List-LeetCode-Problem-707" class="headerlink" title="Design Linked List - LeetCode Problem #707"></a><a href="https://leetcode.com/problems/design-linked-list/">Design Linked List - LeetCode Problem #707</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123; <br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> len;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        len = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((len == <span class="hljs-number">0</span>) || (index &gt;= len) || index &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> head.getVal();&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (out != index)&#123;<br>            n = n.getNext();<br>            out+=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n.getVal();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>            head = newHead;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            newHead.setNext(head);<br>            head.setPrev(newHead);<br>            head = newHead;<br>        &#125;<br>        len+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newTail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>            head = newTail;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-keyword">while</span> (n.getNext() != <span class="hljs-literal">null</span>) &#123;<br>                n = n.getNext();<br>            &#125;<br>            n.setNext(newTail);<br>            newTail.setPrev(n);<br>        &#125;<br>        len+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addAtHead(val);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == len) &#123;<br>            addAtTail(val);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">0</span> &amp;&amp; index &lt;len) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>            <span class="hljs-keyword">while</span> (i != index-<span class="hljs-number">1</span>) &#123;<br>                n = n.getNext();<br>                i+=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">oriNext</span> <span class="hljs-operator">=</span> n.getNext();<br>            newOne.setNext(oriNext);<br>            oriNext.setPrev(newOne);<br>            n.setNext(newOne);<br>            newOne.setPrev(n);<br>            len+=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index&gt;=<span class="hljs-number">0</span> &amp;&amp; index&lt;len) &#123;<br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>                head = head.getNext();<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-keyword">while</span> (i != index-<span class="hljs-number">1</span>) &#123;<br>                    n = n.getNext();<br>                    i+=<span class="hljs-number">1</span>;<br>                &#125;<br>                n.setNext((n.getNext()).getNext());<br>                <span class="hljs-keyword">if</span> (n.getNext()!=<span class="hljs-literal">null</span>) &#123;<br>                   (n.getNext()).setPrev(n); <br>                &#125;<br>            &#125;<br>            len-=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> val;<br>    <span class="hljs-keyword">private</span> Node next; <br>    <span class="hljs-keyword">private</span> Node prev;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span> &#123;<br>        next = <span class="hljs-literal">null</span>;<br>        prev = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> inVal)</span> &#123;<br>        val = inVal;<br>        next = <span class="hljs-literal">null</span>;<br>        prev = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node newNext)</span> &#123;<br>        next = newNext;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getPrev</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrev</span><span class="hljs-params">(Node newPrev)</span> &#123;<br>        prev = newPrev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-Two-Pointer-Technique"><a href="#1-3-Two-Pointer-Technique" class="headerlink" title="1.3 Two-Pointer Technique"></a>1.3 Two-Pointer Technique</h2><p>Principle:</p><ul><li>Slow pointer: move forward <strong>one step</strong> pre loop;</li><li>Fast pointer: move forward <strong>two step</strong> pre loop;</li></ul><p>If the Linked List <strong>has</strong> a cycle: </p><ul><li>the fast pointer will eventually <strong>meet</strong> the slow one;</li></ul><p>If the Linked List <strong>has NO</strong> cycle:</p><ul><li>the fast pointer will reach the <strong>end</strong> of the Linked List;</li></ul><hr><h3 id="Linked-List-Cycle-LeetCode-Problem-141"><a href="#Linked-List-Cycle-LeetCode-Problem-141" class="headerlink" title="Linked List Cycle - LeetCode Problem #141"></a><a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle - LeetCode Problem #141</a></h3><center><img src="/2022/03/08/linked-list-problems/4.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Linked-List-Cycle-II-LeetCode-Problem-142"><a href="#Linked-List-Cycle-II-LeetCode-Problem-142" class="headerlink" title="Linked List Cycle II - LeetCode Problem #142"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/">Linked List Cycle II - LeetCode Problem #142</a></h3><center><img src="/2022/03/08/linked-list-problems/5.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (fast == slow) &#123;<br>                slow = head;<br>                <span class="hljs-keyword">while</span> (fast != slow)&#123;<br>                    fast = fast.next;<br>                    slow = slow.next; <br>                &#125;<br>                <span class="hljs-keyword">return</span> slow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Intersection-of-Two-Linked-Lists-LeetCode-Problem-160"><a href="#Intersection-of-Two-Linked-Lists-LeetCode-Problem-160" class="headerlink" title="Intersection of Two Linked Lists - LeetCode Problem #160"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">Intersection of Two Linked Lists - LeetCode Problem #160</a></h3><center><img src="/2022/03/08/linked-list-problems/6.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lenA</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lenB</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">hA</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">hB</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span> (hA != <span class="hljs-literal">null</span>) &#123;<br>            hA = hA.next;<br>            lenA += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (hB != <span class="hljs-literal">null</span>) &#123;<br>            hB = hB.next;<br>            lenB += <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">lenAbs</span> <span class="hljs-operator">=</span> Math.abs(lenA-lenB);<br>        <br>        <span class="hljs-keyword">if</span> (lenA &gt; lenB) &#123;<br>            <span class="hljs-keyword">while</span> (lenA != lenB) &#123;<br>                headA = headA.next;<br>                lenA -= <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (lenA &lt; lenB) &#123;<br>            <span class="hljs-keyword">while</span> (lenA != lenB) &#123;<br>                headB = headB.next;<br>                lenB -= <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span> (headA != <span class="hljs-literal">null</span> || headB != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (headA == headB) &#123;<br>                <span class="hljs-keyword">return</span> headA;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                headA = headA.next;<br>                headB = headB.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Remove-Nth-Node-From-End-of-List-LeetCode-Problem-19"><a href="#Remove-Nth-Node-From-End-of-List-LeetCode-Problem-19" class="headerlink" title="Remove Nth Node From End of List - LeetCode Problem #19"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">Remove Nth Node From End of List - LeetCode Problem #19</a></h3><center><img src="/2022/03/08/linked-list-problems/7.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            fast = fast.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fast == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next;<br>        &#125;<br>        slow.next = slow.next.next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-4-Classic-Problems"><a href="#1-4-Classic-Problems" class="headerlink" title="1.4 Classic Problems"></a>1.4 Classic Problems</h2><h3 id="Reverse-Linked-List-LeetCode-Problem-206"><a href="#Reverse-Linked-List-LeetCode-Problem-206" class="headerlink" title="Reverse Linked List - LeetCode Problem #206"></a><a href="https://leetcode.com/problems/reverse-linked-list/">Reverse Linked List - LeetCode Problem #206</a></h3><center><img src="/2022/03/08/linked-list-problems/8.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span> &amp;&amp; head.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">newH</span> <span class="hljs-operator">=</span> head.next;<br>            head.next = head.next.next;<br>            newH.next = h;<br>            h = newH;<br>        &#125;<br>        <span class="hljs-keyword">return</span> h;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Detailed explanation: <a href="https://ultrafish.cn/2022/05/08/linked-list-introduction//#2-4-Reverse-Singly-Linked-List">Reverse Singly Linked List</a></p><hr><h3 id="Remove-Linked-List-Elements-LeetCode-Problem-203"><a href="#Remove-Linked-List-Elements-LeetCode-Problem-203" class="headerlink" title="Remove Linked List Elements - LeetCode Problem #203"></a><a href="https://leetcode.com/problems/remove-linked-list-elements/">Remove Linked List Elements - LeetCode Problem #203</a></h3><center><img src="/2022/03/08/linked-list-problems/9.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> head;&#125;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span> &amp;&amp; head.val == val) &#123;head = head.next;&#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> &amp;&amp; curr.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curr.next.val == val) &#123;<br>                curr.next = curr.next.next; <br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                curr = curr.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Odd-Even-Linked-List-LeetCode-Problem-328"><a href="#Odd-Even-Linked-List-LeetCode-Problem-328" class="headerlink" title="Odd Even Linked List - LeetCode Problem #328"></a><a href="https://leetcode.com/problems/odd-even-linked-list/">Odd Even Linked List - LeetCode Problem #328</a></h3><center><img src="/2022/03/08/linked-list-problems/10.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">oddEvenList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">oddHead</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (curr.next != <span class="hljs-literal">null</span> &amp;&amp; curr.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nextCurr</span> <span class="hljs-operator">=</span> curr.next.next;<br>            curr.next.next = curr.next.next.next;<br>            curr.next = nextCurr;<br>            curr = curr.next;<br>        &#125;<br>        curr.next = oddHead;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Palindrome-Linked-List-LeetCode-Problem-234"><a href="#Palindrome-Linked-List-LeetCode-Problem-234" class="headerlink" title="Palindrome Linked List - LeetCode Problem #234"></a><a href="https://leetcode.com/problems/palindrome-linked-list/">Palindrome Linked List - LeetCode Problem #234</a></h3><center><img src="/2022/03/08/linked-list-problems/11.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> ListNode h;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">recursivelyCheck</span><span class="hljs-params">(ListNode curr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!(recursivelyCheck(curr.next))) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            <span class="hljs-keyword">if</span> (curr.val != h.val) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            h = h.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        h = head;<br>        <span class="hljs-keyword">return</span> recursivelyCheck(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Merge-Two-Sorted-Lists-LeetCode-Problem-21"><a href="#Merge-Two-Sorted-Lists-LeetCode-Problem-21" class="headerlink" title="Merge Two Sorted Lists - LeetCode Problem #21"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/">Merge Two Sorted Lists - LeetCode Problem #21</a></h3><center><img src="/2022/03/08/linked-list-problems/12.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">outHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> outHead;<br>        <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp;&amp; list2 !=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (list1.val &lt; list2.val) &#123;<br>                cur.next = list1;<br>                cur = cur.next;<br>                list1 = list1.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                cur.next = list2;<br>                cur = cur.next;<br>                list2 = list2.next;<br>            &#125;<br>        &#125;<br>        cur.next = list1 != <span class="hljs-literal">null</span>? list1:list2;<br>        <span class="hljs-keyword">return</span> outHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Add-Two-Numbers-LeetCode-Problem-2"><a href="#Add-Two-Numbers-LeetCode-Problem-2" class="headerlink" title="Add Two Numbers - LeetCode Problem #2"></a><a href="https://leetcode.com/problems/add-two-numbers/">Add Two Numbers - LeetCode Problem #2</a></h3><center><img src="/2022/03/08/linked-list-problems/13.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">outH</span> <span class="hljs-operator">=</span> out;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> l1;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> l2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (h1 != <span class="hljs-literal">null</span> &amp;&amp; h2 != <span class="hljs-literal">null</span>) &#123;<br>            curr = h1.val+h2.val+c;<br>            out.val = curr % <span class="hljs-number">10</span>;<br>            c = curr / <span class="hljs-number">10</span>;<br>            h1 = h1.next;<br>            h2 = h2.next;<br>            <span class="hljs-keyword">if</span> (h1 != <span class="hljs-literal">null</span> || h2 != <span class="hljs-literal">null</span>) &#123;<br>                out.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>                out = out.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (h1 != <span class="hljs-literal">null</span>) &#123;<br>            curr = h1.val+c;<br>            out.val = curr % <span class="hljs-number">10</span>;<br>            c = curr / <span class="hljs-number">10</span>;<br>            h1 = h1.next;<br>            <span class="hljs-keyword">if</span> (h1 != <span class="hljs-literal">null</span>) &#123;<br>                out.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>                out = out.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (h2 != <span class="hljs-literal">null</span>) &#123;<br>            curr = h2.val+c;<br>            out.val = curr % <span class="hljs-number">10</span>;<br>            c = curr / <span class="hljs-number">10</span>;<br>            h2 = h2.next;<br>            <span class="hljs-keyword">if</span> (h2 != <span class="hljs-literal">null</span>) &#123;<br>                out.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>                out = out.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>            out.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> outH;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Rotate-List-LeetCode-Problem-61"><a href="#Rotate-List-LeetCode-Problem-61" class="headerlink" title="Rotate List - LeetCode Problem #61"></a><a href="https://leetcode.com/problems/rotate-list/">Rotate List - LeetCode Problem #61</a></h3><center><img src="/2022/03/08/linked-list-problems/14.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> head;&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            l += <span class="hljs-number">1</span>;<br>            curr = curr.next;<br>        &#125;<br>        k = k % l;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> head;&#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>)&#123;<br>            fast = fast.next;<br>            k-=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br>        fast.next = head;<br>        head = slow.next;<br>        slow.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Remove-Duplicates-from-Sorted-List-LeetCode-Problem-83"><a href="#Remove-Duplicates-from-Sorted-List-LeetCode-Problem-83" class="headerlink" title="Remove Duplicates from Sorted List - LeetCode Problem #83"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">Remove Duplicates from Sorted List - LeetCode Problem #83</a></h3><center><img src="/2022/03/08/linked-list-problems/15.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>             <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (curr.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (curr.val == curr.next.val) &#123;<br>                curr.next = curr.next.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;curr = curr.next;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Remove-Duplicates-from-Sorted-List-II-LeetCode-Problem-82"><a href="#Remove-Duplicates-from-Sorted-List-II-LeetCode-Problem-82" class="headerlink" title="Remove Duplicates from Sorted List II - LeetCode Problem #82"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">Remove Duplicates from Sorted List II - LeetCode Problem #82</a></h3><center><img src="/2022/03/08/linked-list-problems/16.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">hp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> hp;<br>        <span class="hljs-comment">// head = fast; curr = slow; hp = sentinel;</span><br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) &#123;<br>                <span class="hljs-keyword">while</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) &#123;<br>                    head = head.next;<br>                &#125;<br>                curr.next = head.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                curr = curr.next;<br>            &#125;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hp.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Middle-of-the-Linked-List-LeetCode-Problem-876"><a href="#Middle-of-the-Linked-List-LeetCode-Problem-876" class="headerlink" title="Middle of the Linked List - LeetCode Problem #876"></a><a href="https://leetcode.com/problems/middle-of-the-linked-list/">Middle of the Linked List - LeetCode Problem #876</a></h3><center><img src="/2022/03/08/linked-list-problems/17.png" width="100%"></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> head;&#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Last updated on 2022-03-07</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://leetcode.com/explore/learn/card/linked-list/">Linked List - Explore - LeetCode</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Linked List相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Problem Set</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>Linked List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x86-64学习2-Control</title>
    <link href="/2022/02/24/x86-64-learning-2/"/>
    <url>/2022/02/24/x86-64-learning-2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System 相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - 浮点数表示方法转换器 Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - 多进制整数转换器 Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64学习2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64学习2-Control</a></p></blockquote><hr><h1 id="1-Condition-Codes"><a href="#1-Condition-Codes" class="headerlink" title="1 Condition Codes"></a>1 Condition Codes</h1><blockquote><p>Condition Codes(CC): Describe <strong>attributes</strong> of the <strong>most recent</strong> arithmetic or logic operation. </p></blockquote><ul><li><code>CF</code>: <strong>Carry Flag</strong>, the <strong>carry out</strong> of the MSB, to detect <strong>overflow for unsigned operations</strong>;</li><li><code>ZF</code>: <strong>Zero Flag</strong>, Yielding <strong>zero</strong>;</li><li><code>SF</code>: <strong>Sign Flag</strong>, Yielding a <strong>negative value</strong>;</li><li><code>OF</code>: <strong>Overflow Flag</strong>, <strong>overflow due to two’s complement</strong>, negative or positive. </li></ul><span id="more"></span><center><img src="/2022/02/24/x86-64-learning-2/1.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (CS: APP)</div></center><p>In above <strong>Integer arithmetic operations</strong>:</p><ul><li>For <code>leaq</code>: do not update to CC, only compute the address;</li><li>For others: causes the CC to be set,<ul><li>For <strong>logical operations</strong> (e.g. <code>XOR</code>), <code>CF</code> and <code>OF</code> set to <strong>0</strong>;</li><li>For <strong>shift operations</strong>,<code>CF</code> set to the <strong>last bit shifted out</strong>; <code>OF</code> set to <strong>0</strong>;</li><li>For <code>INC</code> and <code>DEC</code>: <code>OF</code> and <code>ZF</code> will be set, NO change to <code>CF</code>. </li></ul></li></ul><hr><center><img src="/2022/02/24/x86-64-learning-2/2.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Comparison and test instructions (CS: APP)</div></center><blockquote><p><code>CMP</code> and <code>TEST</code> set CC <strong>without changing any other registers</strong>:</p></blockquote><p><code>CMP</code>:</p><ul><li>Set CC based on the <strong>difference</strong>;</li><li>Same as <code>SUB</code>, without changing the destination;</li><li><code>CMP S1, S2</code>: <strong><code>S2-S1</code></strong>, in <strong>reverse</strong> order;</li><li><code>ZF</code>: <strong>0</strong> means two operands are <strong>equal</strong>;</li><li>Other flags: the ordering relation between them;</li></ul><p><code>TEST</code>:</p><ul><li>Same as <code>AND</code>, without changing the destination;</li><li>Two <strong>same operands</strong>: to detect whether it is <strong>negative, zero or positive</strong>;</li><li><strong>Marked operand</strong>: to detect some <strong>specific</strong> bits.</li></ul><hr><h1 id="2-Accessing-Condition-Codes"><a href="#2-Accessing-Condition-Codes" class="headerlink" title="2 Accessing Condition Codes"></a>2 Accessing Condition Codes</h1><center><img src="/2022/02/24/x86-64-learning-2/3.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">The SET instructions (CS: APP)</div></center><p>Using the CC:</p><ul><li>Set <strong>single bit</strong> to 0 or 1 based on the combinations of the CC;</li><li>Conditionally jump;</li><li>Conditionally transfer data. </li></ul><p>For the first case, the SET instructions:</p><ul><li><strong>Destination</strong>: low-order <strong>single-byte</strong> register, or single-byte memory location;<ul><li>Will <strong>not alter the remaining bytes</strong>, need to <strong>clear upper bits</strong> to 0, using e.g. <code>movzbl</code>. </li></ul></li></ul><p><strong>[Example]</strong><br>For <code>a &lt; b</code> expression in C:</p><center><img src="/2022/02/24/x86-64-learning-2/4.png" width="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of the SET instructions (CS: APP)</div></center><hr><h1 id="3-Jump-Instructions"><a href="#3-Jump-Instructions" class="headerlink" title="3 Jump Instructions"></a>3 Jump Instructions</h1><center><img src="/2022/02/24/x86-64-learning-2/5.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">The jump instructions (CS: APP)</div></center><blockquote><p>Jump instruction make the execution to a completely <strong>new position</strong> in the program. </p></blockquote><ul><li>The assembler encode the jump target which is the <strong>destination address</strong> into the jump instruction. </li><li><code>jmp</code>: unconditionally jump, <strong>direct</strong> and <strong>indirect</strong> jump:<ul><li><strong>direct</strong> jump: jump target encoded in the instruction, giving the <strong>target label</strong>, e.g.<ul><li><code>jmp .L1</code>;</li></ul></li><li><strong>indirect</strong> jump: jump target read from <strong>register or memory address</strong>, using <code>*</code> following by an operand specifier, e.g.,<ul><li><code>jmp *%rax</code>: <strong>register</strong> jump target;</li><li><code>jmp *(%rax)</code>: <strong>memory</strong> location target;</li></ul></li></ul></li><li>others ara <strong>conditionally</strong> jump, based on some combination of the CC. </li></ul><hr><h1 id="4-Conditional-Branches-with-Conditional-Control"><a href="#4-Conditional-Branches-with-Conditional-Control" class="headerlink" title="4 Conditional Branches with Conditional Control"></a>4 Conditional Branches with Conditional Control</h1><center><img src="/2022/02/24/x86-64-learning-2/6.png" width="100%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Compilation of conditional statements (CS: APP)</div></center><p><strong>General form of if-else statement in C</strong>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">if (test-expr)<br>    then-statement<br>else<br>    else-statement<br></code></pre></td></tr></table></figure><p><strong>goto</strong> code:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">    t = test-statement<br>    if (!t)<br>        goto false<br>    then-statement<br>    got done<br>false:<br>    else-statement<br>done:<br></code></pre></td></tr></table></figure><ul><li>Only one of the two branch statement will be executed;</li><li>The complier generates separated blocks of code for <code>then-statement</code> and <code>else-statement</code>;</li><li>Drawbacks: this mechanism is simple and general, but very inefficient on modern processors.</li></ul><hr><h1 id="5-Conditional-Branches-with-Conditional-Moves"><a href="#5-Conditional-Branches-with-Conditional-Moves" class="headerlink" title="5 Conditional Branches with Conditional Moves"></a>5 Conditional Branches with Conditional Moves</h1><center><img src="/2022/02/24/x86-64-learning-2/7.png" width="100%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Compilation of conditional statements using conditional assignment (CS: APP)</div></center><ul><li>Via conditional transfer of data;</li><li>Computes both outcomes of a conditional operation and selected based on the condition holding;</li><li>Achieving high performance through pipelining in modern processor;<ul><li>Overlapping steps of success instructions;</li><li>Determining the sequence of instruction well ahead of time to keep the pipeline full;</li></ul></li></ul><center><img src="/2022/02/24/x86-64-learning-2/8.png" width="80%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">The conditional move instructions (CS: APP)</div></center><ul><li><code>S</code>, <code>D</code>: 16, 32, 64-bit long, NO Single-bit;</li><li>The assembler encodes the operand <strong>length</strong> based on the name of <strong>destination</strong> register;</li><li>No prediction: Just 1. read the source value; 2. check the CC; 3. update the destination register or keep no change;</li></ul><p><strong>General form of conditional expression and assignment</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">v = test-expr ? then-expr : <span class="hljs-keyword">else</span>-expr;<br></code></pre></td></tr></table></figure><p><strong>Goto code</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">if</span> (!test-expr)<br>        <span class="hljs-keyword">goto</span> <span class="hljs-literal">false</span>;<br>    v = then-expr;<br>    <span class="hljs-keyword">goto</span> done;<br><span class="hljs-literal">false</span>:<br>    v = <span class="hljs-keyword">else</span>-expr;<br>done:<br></code></pre></td></tr></table></figure><ul><li>Both <code>then-expr</code> and <code>else-expr</code> will be executed, finally based on the <code>test-expr</code>. </li></ul><p><strong>Assembly code example</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v = then-expr;<br>ve = <span class="hljs-keyword">else</span>-expr;<br>t = test-expr;<br><span class="hljs-keyword">if</span> (!t) v = ve;<br></code></pre></td></tr></table></figure><hr><p><strong>Bad Cases</strong> for Conditional Move:</p><ul><li><p>Expensive Computations</p><ul><li><code>val = Test(x) ? Hard1(x) : Hard2(x);</code></li><li>Both function need to be executed;</li><li>Only use it when computations are very simple;</li></ul></li><li><p>Risky Computation</p><ul><li><code>val = p ? *p : 0;</code></li><li>Both value get computed;</li><li>May be <code>*0</code>, null pointer, error!</li><li>May have undesirable effect. </li></ul></li><li><p>With side effects</p><ul><li><code>val = x &gt; 0 ? x*=7 : x+= 3;</code></li><li>Both value get computed;</li><li>Same variable got change;</li><li>MUST be side-effect free!</li></ul></li></ul><hr><h1 id="6-Loop-Implementations"><a href="#6-Loop-Implementations" class="headerlink" title="6 Loop Implementations"></a>6 Loop Implementations</h1><h2 id="6-1-Do-While-Loops"><a href="#6-1-Do-While-Loops" class="headerlink" title="6.1 Do-While Loops"></a>6.1 Do-While Loops</h2><p>General form of a <code>do-while</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">do</span><br>    body-statement<br>    <span class="hljs-title function_">while</span><span class="hljs-params">(test-expr)</span>;<br></code></pre></td></tr></table></figure><p><strong>Goto</strong> code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">loop:<br>    body-statement<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (t)<br>        <span class="hljs-keyword">goto</span> loop;<br></code></pre></td></tr></table></figure><ul><li><code>body-statement</code> executed at least once;</li></ul><center><img src="/2022/02/24/x86-64-learning-2/9.png" width="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Code for do–while version of factorial program (CS: APP)</div></center><ul><li><ol><li>Initialization of <code>result</code>;</li></ol></li><li><ol><li>Execute the body of the loop;</li></ol></li><li><ol><li>Test the condition, then do the jump or not. </li></ol></li></ul><hr><h2 id="6-2-While-Loops"><a href="#6-2-While-Loops" class="headerlink" title="6.2 While Loops"></a>6.2 While Loops</h2><p>General form of a <code>while</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(test-expr)<br>    body-statement<br></code></pre></td></tr></table></figure><ul><li>The <code>test-expr</code> evaluated before the loop body, the loop may be terminated before first execution of the body. </li></ul><hr><h3 id="6-2-1-Jump-to-middle-Translation"><a href="#6-2-1-Jump-to-middle-Translation" class="headerlink" title="6.2.1 Jump-to-middle Translation"></a>6.2.1 Jump-to-middle Translation</h3><p>Performs the initial test via <strong>jumping to the test</strong> at then end of the loop, then go to the loop body if holds. </p><p><strong>Goto</strong> code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">goto</span> test;<br>loop:<br>    body-statement<br>test:<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (t)<br>        <span class="hljs-keyword">goto</span> loop;<br></code></pre></td></tr></table></figure><center><img src="/2022/02/24/x86-64-learning-2/10.png" width="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">C and assembly code for while version of factorial using jump-to-middle translation (CS: APP)</div></center><ul><li>Test <code>n</code> <strong>before</strong> modifying the value of <code>n</code> or <code>result</code>. </li></ul><hr><h3 id="6-2-2-Guarded-do-Translation"><a href="#6-2-2-Guarded-do-Translation" class="headerlink" title="6.2.2 Guarded-do Translation"></a>6.2.2 Guarded-do Translation</h3><p>It transfer the <code>while</code> loop into a <code>do-while</code> loop, <strong>test the condition at first</strong>, jump to skip the loop body if test fails. </p><p><code>while</code> to <code>do-while</code> code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">t = test-expr;<br><span class="hljs-keyword">if</span> (!t)<br>    <span class="hljs-keyword">goto</span> done;<br><span class="hljs-keyword">do</span><br>    body-statement<br>    <span class="hljs-title function_">while</span> <span class="hljs-params">(test-expr)</span>;<br>done:<br></code></pre></td></tr></table></figure><p><strong>Goto</strong> code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">t = test-expr;<br><span class="hljs-keyword">if</span> (!t)<br>    <span class="hljs-keyword">goto</span> done;<br>loop:<br>    body-statement<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (t)<br>        <span class="hljs-keyword">goto</span> loop;<br>done:<br></code></pre></td></tr></table></figure><center><img src="/2022/02/24/x86-64-learning-2/11.png" width="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">C and assembly code for while version of factorial using guarded-do translation (CS: APP)</div></center><hr><h2 id="6-3-For-Loops"><a href="#6-3-For-Loops" class="headerlink" title="6.3 For Loops"></a>6.3 For Loops</h2><p><strong>General form of a <code>for</code> loop:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (init-expr; test-expr; update-expr)<br>    body-statement<br></code></pre></td></tr></table></figure><p><strong>Transfer to <code>while</code> loop:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">init-expr;<br><span class="hljs-keyword">while</span> (test-expr) &#123;<br>    body-statement<br>    update-expr;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Jump-to-middle</strong> goto code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">    init-expr;<br>    <span class="hljs-keyword">goto</span> test;<br>loop:<br>    body-statement<br>    update-expr;<br>test:<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (t)<br>        <span class="hljs-keyword">goto</span> loop;<br></code></pre></td></tr></table></figure><p><strong>Guarded-do</strong> goto code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">    init-expr;<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (!t)<br>        <span class="hljs-keyword">goto</span> done;<br>loop:<br>    body-statement<br>    update-expr;<br>    t = test-expr;<br>    <span class="hljs-keyword">if</span> (t)<br>        <span class="hljs-keyword">goto</span> loop;<br>done:<br></code></pre></td></tr></table></figure><p><strong>[Example]</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span><br>&#123;<br>    <span class="hljs-type">long</span> i;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        result *= i;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>Transfer to <code>while</code> loop:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for_while</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span><br>&#123;<br>    <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>        result *= i;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Jump-to-middle</strong> goto code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for_jm_goto</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span><br>&#123;<br>    <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">goto</span> test;<br>loop:<br>    result *= i;<br>    i++;<br>test:<br>    <span class="hljs-keyword">if</span> (i &lt;= n)<br>        <span class="hljs-keyword">goto</span> loop;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Assembly</strong> code:</p><center><img src="/2022/02/24/x86-64-learning-2/12.png" width="80%"></center><hr><h1 id="7-Switch-Implementations"><a href="#7-Switch-Implementations" class="headerlink" title="7 Switch Implementations"></a>7 Switch Implementations</h1><center><img src="/2022/02/24/x86-64-learning-2/13.png" width="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example switch statement and its translation into extended C (CS: APP)</div></center><center><img src="/2022/02/24/x86-64-learning-2/14.png" width="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Assembly code for switch statement (CS: APP)</div></center><center><img src="/2022/02/24/x86-64-learning-2/15.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Jump Table (CS: APP)</div></center><ul><li>Jump Table: <code>jt[i]</code> is the address of a code segment will be accessed when the switch index is <code>i</code>;</li><li><strong>Key step</strong> is to access the code location through the jump table (see in <font color="RED"> RED BOX </font>);</li><li>Three cases:<ul><li><ol><li>Test whether the switch index is out of the range, for the missing cases, just jump to the default case (<code>loc_def</code>) for case 101 and 105;</li></ol></li><li><ol><li>Duplicate case, assign the same code label(<code>loc_D</code>) for the same entries (e.g. 104 and 106);</li></ol></li><li><ol><li>Fall-through case, for 102 to 103, omitting the <code>jmp</code> instruction at the end of case 102. </li></ol></li></ul></li></ul><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>B. Randal, D. R. O’Hallaron, <em>Computer systems : a programmer’s perspective</em>, Third edition. Boston: Pearson, 2016.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>x86-64相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>x86-64</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Computer System</tag>
      
      <tag>x86-64</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</title>
    <link href="/2022/02/06/x86-64-learning-1/"/>
    <url>/2022/02/06/x86-64-learning-1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System 相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - 浮点数表示方法转换器 Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - 多进制整数转换器 Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64学习2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64学习2-Control</a></p></blockquote><hr><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p><strong>Machine-Level Language</strong>:</p><ul><li><strong>ISA</strong>: <em>Instruction Set Architecture</em>, defining:<ul><li>the <strong>Processor State</strong>;</li><li>the <strong>format of the instructions</strong>;</li><li>the <strong>effect of each instruction on the state</strong>;</li></ul></li><li>Use <strong>Virtual Addresses</strong> as memory addresses;</li></ul><span id="more"></span><p><strong>Compiler</strong>: transforming <strong>programs</strong> into the <strong>elementary instruction (machine code in binary)</strong></p><p><strong>Assembly-code</strong>: the code very <strong>close</strong> to the machine-code, but more <strong>readable</strong>, as it is not in binary format.</p><hr><p>Processor <strong>Visible State</strong> behind C programmer:</p><ul><li><strong>Program Counter</strong>: PC, <code>%rip</code> in x86-64, the address of the <strong>NEXT</strong> instruction to execute;</li><li><strong>Register File</strong>: 16 location with 64-bit of each, stored addresses and integer data:<ul><li><ol><li>track the critical parts of the state;</li></ol></li><li><ol><li>store the temporary data, i.e., <strong>arguments</strong>, <strong>local variables</strong>, and <strong>return values</strong>;</li></ol></li></ul></li><li><strong>Conditional Code</strong>: store the <strong>state</strong> of recently executed <strong>arithmetic or logical instruction</strong>, can be used as the condition of control and date flow, e.g., <code>if</code> and <code>while</code>;</li><li><strong>Set of Vector Register</strong>: store <strong>one or more</strong> integer or floating-point values.</li></ul><hr><p><strong>Program Memory</strong> stores:</p><ul><li>program <strong>machine-code</strong>;</li><li><strong>operating system</strong> information;</li><li><strong>run-time stack</strong> for calls and returns;</li><li>allocated by <strong>user</strong>.</li></ul><hr><h1 id="2-Data-Formats"><a href="#2-Data-Formats" class="headerlink" title="2 Data Formats"></a>2 Data Formats</h1><ul><li><code>word</code>: 16-bit (2-byte) data type;</li><li><code>double word</code>: 32-bit (4-byte) data type;</li><li><code>quad word</code>: 64-bit (8-byte) date type;</li><li><code>char *</code>: pointer, 8-byte quad word.</li></ul><center><img src="/2022/02/06/x86-64-learning-1/1.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Size of C data types in x86-64 (CS: APP)</div></center><hr><h1 id="3-Accessing-Information"><a href="#3-Accessing-Information" class="headerlink" title="3 Accessing Information"></a>3 Accessing Information</h1><center><img src="/2022/02/06/x86-64-learning-1/2.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer Register (CS: APP)</div></center><p>x86-64 CPU has a set of 16 64-bit <em>general-purpose register</em>, storing integer data and pointers(addresses):</p><ul><li>Start from <strong>8086</strong>, 8 <strong>16-bit</strong> register (in <font color="#f00"><b>RED</b></font> box): <code>%ax</code>to<code>%bp</code>;</li><li>Then to <strong>IA32</strong>, extended to 8 <strong>32-bit</strong> register (in <font color="#00f"><b>BLUE</b></font> box) :<code>%eax</code>to<code>%ebp</code>; </li><li>Finally to <strong>x86-64</strong>, extended to 8 <strong>64-bit</strong> register (in <strong>BLACK</strong> box): <code>%rax</code>to<code>%rbp</code>, as well as additional new 8 <strong>64-bit</strong> register (in DOT LINE box) :<code>%r8</code>to<code>%r15</code>; </li></ul><p>Different registers have different functions:</p><ul><li><code>%rsp</code> has a <strong>specific</strong> function: <strong>stack pointer</strong>, indicate the end position of run-time stack;</li><li>Other 15 registers have more flexible functions.</li></ul><p>Instructions can operate on <strong>different data size</strong> in <strong>low-order</strong> of the 16 registers:</p><ul><li><strong>8-bit</strong> instruction: can access <strong>least significant 1 byte</strong>;</li><li><strong>16-bit</strong> instruction: can access <strong>least significant 2 byte</strong>;</li><li><strong>32-bit</strong> instruction: can access <strong>least significant 4 byte</strong>;</li><li><strong>64-bit</strong> instruction: can access <strong>entire register</strong>;</li></ul><hr><h2 id="3-1-Operand-Specifiers"><a href="#3-1-Operand-Specifiers" class="headerlink" title="3.1 Operand Specifiers"></a>3.1 Operand Specifiers</h2><center><img src="/2022/02/06/x86-64-learning-1/3.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Operand Forms (CS: APP)</div></center><p>Three Types:</p><ul><li><strong>Immediate</strong>: <ul><li>constant <strong>value</strong>, started with <code>$</code>, followed by a integer in standard C notation;</li></ul></li><li><strong>Register</strong>: <ul><li><strong>contents of a register</strong>, each bit length of instruction has its specific among of bits (e.g., 8-byte register:64 bits);</li><li>Notation $r_a$ indicates the <strong>register $a$</strong> and <strong>its value in reference $R[r_a]$</strong> indexed by the register identifiers in an array $R$;</li></ul></li><li><strong>Memory</strong>:<ul><li>Access memory location based on the computed address - <strong><em>effective address</em></strong>;</li><li>$M_b[Addr]$: reference to the $b$-byte value in memory <strong><em>starting</em></strong> at address $Addr$;</li><li>$Imm(r_b,r_i,s)$: the most general form:<ul><li>$Imm$: <strong>immediate offset</strong>;</li><li>$r_b$: <strong>base register</strong>, 64-bit;</li><li>$r_i$: <strong>index register</strong>, 64-bit;</li><li>$s$: <strong>scale factor</strong>, must be <strong>1,2,4, or 8</strong>;</li><li><strong><em>effective address</em></strong> $=Imm+R[r_b]+R[r_i]\cdot s$;</li><li>The value is $M[Imm+R[r_b]+R[r_i]\cdot s]$;</li></ul></li><li>These complex addressing modes useful in <strong>Array and structure elements referencing</strong>.</li></ul></li></ul><hr><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/4.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Practice Problem 3.1 (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/5.png" width="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Solution to Problem 3.1 (CS: APP)</div></center><hr><h2 id="3-2-Data-Movement-Instructions"><a href="#3-2-Data-Movement-Instructions" class="headerlink" title="3.2 Data Movement Instructions"></a>3.2 Data Movement Instructions</h2><h3 id="3-2-1-MOV-Instructions"><a href="#3-2-1-MOV-Instructions" class="headerlink" title="3.2.1 MOV Instructions"></a>3.2.1 <code>MOV</code> Instructions</h3><blockquote><p>Copy data from a <strong>source</strong> location to a <strong>destination</strong> location, <strong>without transformation</strong>. </p></blockquote><center><img src="/2022/02/06/x86-64-learning-1/6.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Simple data movement instructions (CS: APP)</div></center><p>Source(S):</p><ul><li>value of <strong>immediate</strong>;</li><li>value in <strong>register</strong>;</li><li>value in <strong>memory</strong>.</li></ul><p>Destination(D):</p><ul><li><strong>register</strong>;</li><li><strong>memory address</strong>.</li></ul><blockquote><p>Copy from a memory to another memory:<br><strong>Can not directly copy</strong>, first load the memory value to a <strong>register</strong>, then write the register value to the destination memory.</p></blockquote><p><code>movabsq</code>:</p><ul><li><strong>S</strong>: 64-bit <strong>immediate</strong> value;</li><li><strong>D</strong>: must be a <strong>register</strong>.</li></ul><p>For register operand:</p><ul><li>The size of the register must match the last character of the instruction(<code>b</code>,<code>w</code>,<code>l</code>,<code>q</code>);</li><li>The <code>MOV</code> instruction will <strong>only update the specific byte</strong> indicated by the destination operand,</li><li><strong>Except the <code>movl</code> instruction with the register destination, it will set high-order 4-byte to 0.</strong></li><li>(For the convention in x86-64 from 64-bit to 32-bit to adopt)</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/7.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of simple data movement instructions (CS: APP)</div></center><hr><h3 id="3-2-2-MOVZ-Instructions"><a href="#3-2-2-MOVZ-Instructions" class="headerlink" title="3.2.2 MOVZ Instructions"></a>3.2.2 <code>MOVZ</code> Instructions</h3><blockquote><p>Copy a <strong>small source value to a larger destination</strong>, fill the remaining bytes in destination with <strong>zeros</strong>.</p></blockquote><center><img src="/2022/02/06/x86-64-learning-1/8.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Zero-extending data movement instructions (CS: APP)</div></center><ul><li>S: register, memory;</li><li>D: register;</li><li>Last 2 character: <strong>size of source</strong> and <strong>size of destination</strong>;</li><li><strong>size of destination</strong> $\gt$ <strong>size of source</strong>.</li><li>NO <code>movzlq</code>, implemented by <code>movl</code>: with 4-byte register as destination, it will fill the upper 4-byte with zeros. </li></ul><hr><h3 id="3-2-3-MOVS-Instructions"><a href="#3-2-3-MOVS-Instructions" class="headerlink" title="3.2.3 MOVS Instructions"></a>3.2.3 <code>MOVS</code> Instructions</h3><blockquote><p>Copy a <strong>small source value to a larger destination</strong>, fill the remaining bytes in destination by <strong>sign extension</strong> (copy the most significant bit).</p></blockquote><center><img src="/2022/02/06/x86-64-learning-1/9.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Sign-extending data movement instructions (CS: APP)</div></center><ul><li>S: register, memory;</li><li>D: register;</li><li>Last 2 character: <strong>size of source</strong> and <strong>size of destination</strong>;</li><li><strong>size of destination</strong> $\gt$ <strong>size of source</strong>.</li><li><code>cltq</code>: no operand, <code>%eax</code> as source, <code>%rax</code> as destination with sign-extended, as same as <code>movslq %eax, %rax</code>.</li></ul><hr><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/10.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of data movement instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/11.png" width="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Solution of data movement instructions (CS: APP)</div></center><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/12.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of data movement instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/13.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Solution of data movement instructions (CS: APP)</div></center><hr><h2 id="3-3-Push-amp-Pop-Instructions"><a href="#3-3-Push-amp-Pop-Instructions" class="headerlink" title="3.3 Push &amp; Pop Instructions"></a>3.3 Push &amp; Pop Instructions</h2><center><img src="/2022/02/06/x86-64-learning-1/14.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Push and pop instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/15.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Illustration of stack operation (CS: APP)</div></center><ul><li><code>pushq %rbp</code>:</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">subq $8, %rsp       # Decrement stack pointer<br>movq %rbp, (%rsp)   # Store %rbp on stack<br></code></pre></td></tr></table></figure><ul><li><code>popq %rax</code>:</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">movq (%rsp), %rax    # Read %rax from stack<br>addq $8, %rsp        # Increment stack pointer<br></code></pre></td></tr></table></figure><blockquote><p>Stack is contained in the same memory with program code and other program data, <strong>it can be accessed arbitrary positions within the stack</strong>, by using the <strong>standard memory addressing method</strong>;<br>e.g., <code>movq 8(%rsp), %rdx</code>, copy the <strong>second quad word</strong> in the stack to <code>%rdx</code>.</p></blockquote><hr><h1 id="4-Arithmetic-amp-Logical-Operations"><a href="#4-Arithmetic-amp-Logical-Operations" class="headerlink" title="4 Arithmetic &amp; Logical Operations"></a>4 Arithmetic &amp; Logical Operations</h1><center><img src="/2022/02/06/x86-64-learning-1/16.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (CS: APP)</div></center><h2 id="4-1-leap-Instructions"><a href="#4-1-leap-Instructions" class="headerlink" title="4.1 leap Instructions"></a>4.1 <code>leap</code> Instructions</h2><ul><li><strong><em>load effective address</em></strong> instruction;</li><li>read memory address to a register;</li><li>NO access to the memory, just load the address;</li><li>$\&amp;S$: C address operator, like a pointer;</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/17.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of leap Instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/18.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of leap Instructions (CS: APP)</div></center><hr><h2 id="4-2-Unary-amp-Binary-Instructions"><a href="#4-2-Unary-amp-Binary-Instructions" class="headerlink" title="4.2 Unary &amp; Binary Instructions"></a>4.2 Unary &amp; Binary Instructions</h2><center><img src="/2022/02/06/x86-64-learning-1/19.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (Unary Instructions) (CS: APP)</div></center><p>Unary Instructions:</p><ul><li>Operand can be <strong>register</strong> or <strong>memory location</strong>. </li></ul><hr><center><img src="/2022/02/06/x86-64-learning-1/20.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (Binary Instructions) (CS: APP)</div></center><p>Binary Instruction:</p><ul><li>S: <strong>immediate value</strong>, <strong>register</strong>, <strong>memory location</strong>;</li><li>D: <strong>register</strong>, <strong>memory location</strong>;</li><li>S, D can NOT both be memory;</li><li>Source operand first, Destination second;</li><li><code>Fun S, D</code> —&gt; <code>D = D fun S</code></li><li><code>subq %rax, %rdx</code>: <code>%rdx = %rdx - %rax</code> (Subtract <code>%rax</code> from <code>%rax</code>)</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/21.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Unary & Binary Instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/22.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Unary & Binary Instructions (CS: APP)</div></center><hr><h2 id="4-3-Shift-Instructions"><a href="#4-3-Shift-Instructions" class="headerlink" title="4.3 Shift Instructions"></a>4.3 Shift Instructions</h2><center><img src="/2022/02/06/x86-64-learning-1/23.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Integer arithmetic operations (Shift Instructions) (CS: APP)</div></center><p>Source and Destination can be <strong>register</strong> or <strong>memory location</strong>. </p><p>Shift amount (2 ways):</p><ul><li>immediate value: <code>k</code></li><li>single-byte register <code>%cl</code>:<ul><li>based data: <strong>w</strong>-bit (i.e. 8,16,32,64);</li><li>shift amount: value of low-order <strong>m</strong>-bit of <code>%cl</code>, $2^m=w,m=\log_2w$;<ul><li>e.g. 8-bit: lower 3-bit value of <code>%cl</code>;</li><li>64-bit: lower 6-bit value of <code>%cl</code>;</li></ul></li><li>Example: <code>%cl</code> = 0xFF = 1111 1111:<ul><li><code>salb</code>: 8-bit, shift lower 3-bit value = 111 = 7;</li><li><code>salw</code>: 16-bit, shift lower 4-bit value = 1111 = 15;</li></ul></li></ul></li></ul><p>Left Shift:</p><ul><li><code>SAL</code>: <strong>arithmetic</strong> left shift;</li><li><code>SHL</code>: <strong>logical</strong> left shift;</li><li>Same effect, fill right with zero;</li></ul><p>Right Shift:</p><ul><li><code>SAR</code>: <strong>arithmetic</strong> right shift, fill copy of the <strong>sign bits</strong>;</li><li><code>SHR</code>: <strong>logical</strong> right shift, fill left with <strong>zeros</strong>;</li></ul><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/24.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Shift Instructions (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/25.png" width="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Shift Instructions (CS: APP)</div></center><hr><h2 id="4-4-Special-Arithmetic-Instructions"><a href="#4-4-Special-Arithmetic-Instructions" class="headerlink" title="4.4 Special Arithmetic Instructions"></a>4.4 Special Arithmetic Instructions</h2><center><img src="/2022/02/06/x86-64-learning-1/26.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Special arithmetic operations (CS: APP)</div></center><p>Multiply:</p><ul><li>Different from 2-operand <code>imul</code> (generating 64-bit from two 64-bit operand);</li><li>It only has <strong>1 operand</strong>, generating 128-bit from two 64-bit operand, a <strong>full</strong> multiply;</li><li><code>imulq</code>: signed (two’s complement) multiply;</li><li><code>mulq</code>: unsigned multiply;</li><li>One argument <strong>must</strong> be in register <code>%rax</code>;</li><li>Other one is <strong>given</strong> as <code>S</code>;</li><li>Stored in high-order 64-bit: <code>%rdx</code>, and low-order 64-bit: <code>%rax</code>. </li></ul><p><strong>[Example]</strong></p><center><img src="/2022/02/06/x86-64-learning-1/27.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Multiply (CS: APP)</div></center><center><img src="/2022/02/06/x86-64-learning-1/28.png" width="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example of Multiply (CS: APP)</div></center><hr><p>Division:</p><ul><li>Single-operand instruction;</li><li>Dividend: high-order 64-bit: <code>%rdx</code>, and low-order 64-bit: <code>%rax</code>;</li><li>Divisor: <strong>given</strong> as <code>S</code>;</li><li>Store quotient in <code>%rax</code>;</li><li>Store remainder in <code>rdx%</code></li></ul><hr><p><code>cqto</code>:</p><ul><li>NO operand;</li><li>Copy <code>%rax</code> and extends it to <code>%rdx</code>;</li><li>Convert it to oct word. </li></ul><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>B. Randal, D. R. O’Hallaron, <em>Computer systems : a programmer’s perspective</em>, Third edition. Boston: Pearson, 2016.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>x86-64相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>x86-64</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Computer System</tag>
      
      <tag>x86-64</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Markdown制作演示文稿 Slidev</title>
    <link href="/2022/02/02/Markdown-presentation-slidev/"/>
    <url>/2022/02/02/Markdown-presentation-slidev/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2022/01/15/Markdown-presentation/">使用Markdown制作演示文稿 reveal-md</a><br><a href="https://ultrafish.cn/2022/02/02/Markdown-presentation-slidev/">使用Markdown制作演示文稿 Slidev</a></p></blockquote><hr><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/FPR-audio.mp4?versionId=CAEQMRiBgMCa9Jrh9RciIGI0ZTViYjdhZjJkZDQwOTc5ZDI4NzZjM2E5NWM1NWQz">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/FPR-audio.mp4?versionId=CAEQMRiBgMCa9Jrh9RciIGI0ZTViYjdhZjJkZDQwOTc5ZDI4NzZjM2E5NWM1NWQz" type="video/mp4">      </video><hr><p>以上视频是我对之前文章-<a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a>中一部分内容的演示。</p><span id="more"></span><p>从视频最后可以发现，此演示视频也是使用Markdown编写的，但用到的工具不同于<a href="https://ultrafish.cn/2022/01/15/Markdown-presentation/">上一篇文章</a>中的<a href="https://github.com/webpro/reveal-md">reveal-md</a>，</p><p>而是用到了用到了一款名为<a href="https://sli.dev/">Slidev</a>的演示文稿工具，专为开发者设计，功能十分强大。支持Markdown语法，可更改主题，可定制主题，支持代码片段展示，以及各种高自定义功能。</p><p>我会简单介绍一些实用的语法，Slidev的功能十分多，具体用法请参考<a href="https://sli.dev/">Slidev 主页</a>。</p><hr><h1 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h1><p><strong>安装</strong></p><p>具体内容请参考：<a href="https://cn.sli.dev/guide/install.html">安装-Slidev</a></p><ul><li>要求<a href="https://nodejs.org/en/">Node.js</a> 14.0.0及以上的版本；</li><li>全局安装 Slidev，运行以下命令：</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$ npm i -g @slidev/cli<br></code></pre></td></tr></table></figure><ul><li>在目标目录下运行以下命令启动 Slidev：</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$ slidev<br></code></pre></td></tr></table></figure><ul><li>用浏览器访问<a href="http://localhost:3030/">http://localhost:3030/</a>即可预览演示文档</li></ul><hr><p>可以选择在VS Code中使用Slidev插件，可实时渲染以及预览演示文稿。</p><ul><li>下载VS Code <a href="https://marketplace.visualstudio.com/items?itemName=antfu.slidev">Slidev插件</a>;</li><li>在VS Code中打开目标文件夹；</li><li>在此目录下使用<code>$ slidev</code>命令；</li><li>在此目录下新建<code>package.json</code>文件，并加入以下代码：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slidev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slidev build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;export&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slidev export&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@slidev/cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.27.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@slidev/theme-default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@slidev/theme-seriph&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><ul><li>重启VS Code，再次运行<code>$ slidev</code>命令；</li><li>点击Slidev插件图标即可进入编辑和预览界面：</li></ul><center><img src="/2022/02/02/Markdown-presentation-slidev/1.png" width="60%" height="60%"></center><hr><h1 id="2-Layouts"><a href="#2-Layouts" class="headerlink" title="2. Layouts"></a>2. Layouts</h1><p><strong>页面布局</strong></p><p>具体内容请参考：<a href="https://cn.sli.dev/builtin/layouts.html">布局-Slidev</a></p><ul><li>用<code>---</code>分隔每页演示文稿</li></ul><h2 id="2-1-Cover"><a href="#2-1-Cover" class="headerlink" title="2.1 Cover"></a>2.1 Cover</h2><p><strong>封面页</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br><br><span class="hljs-section"># D./B</span><br><br>Floating Point Numbers Representation<br><br>浮点数表示法<br><br>---<br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/2.png" width="60%" height="60%" border="1"></center><ul><li>第一页默认为封面页；</li><li>居中显示；</li><li>根据Markdown标题层级大小显示。</li></ul><hr><h2 id="2-2-Default"><a href="#2-2-Default" class="headerlink" title="2.2 Default"></a>2.2 Default</h2><p><strong>基础页</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br><br><span class="hljs-section"># 1. 定点数表示法</span><br>Fixed Point Representation<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br><span class="hljs-section">### 保持小数点位置与原数<span class="hljs-strong">**不变**</span>；</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br><span class="hljs-section">### 根据二进制<span class="hljs-strong">**按权相加**</span>进行转换：</span><br>$$b<span class="hljs-emphasis">_ib_</span>&#123;i-1&#125;...b<span class="hljs-emphasis">_2b_</span>1.b<span class="hljs-emphasis">_&#123;-1&#125;b_</span>&#123;-2...b<span class="hljs-emphasis">_&#123;-j&#125;&#125;$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">$$\Downarrow$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">$$b=\sum_</span>&#123;k=-j&#125;^ib<span class="hljs-emphasis">_k\times 2^k$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/3.png" width="60%" height="60%" border="1"></center><ul><li>默认靠左显示；</li><li>按照Markdown语法显示；</li><li>若段落间行距较小，可用<code>&lt;br&gt;</code>换行符。</li></ul><hr><h2 id="2-3-Center"><a href="#2-3-Center" class="headerlink" title="2.3 Center"></a>2.3 Center</h2><p><strong>居中页</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br>layout: center<br><span class="hljs-section">class: text-center</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section"># 感谢观看</span><br>Thanks for watching<br><br>Made by Mike<span class="hljs-emphasis">_Zhang</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[<span class="hljs-string">https://UltraFish.cn</span>](<span class="hljs-link">https://UltraFish.cn</span>)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/4.png" width="60%" height="60%" border="1"></center><ul><li>需要在段落开始处标明<code>layout</code>属性为<code>center</code>;</li><li>类似于封面页；</li><li>文字默认于中部靠左对齐；</li><li>使用<code>class: text-center</code>可使文字居中对齐。</li></ul><hr><h2 id="2-4-Image"><a href="#2-4-Image" class="headerlink" title="2.4 Image"></a>2.4 Image</h2><p><strong>图片页</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br>layout: image-right<br><span class="hljs-section">image: &#x27;1.png&#x27;</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section"># IEEE 754</span><br>二进制浮点数算术标准<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br>若想了解更多有关内容<br>欢迎浏览我的博客网站 [<span class="hljs-string">https://UltraFish.cn</span>](<span class="hljs-link">https://UltraFish.cn</span>)<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br>也欢迎浏览[<span class="hljs-string">UltraFish Plus</span>](<span class="hljs-link">https://UltraFish.cn</span>)<br><br>使用[<span class="hljs-string">浮点数转换器</span>](<span class="hljs-link">https://ultrafish.cn/plus/files/ieee_754_single_representation.html</span>)体验计算机的魅力<br><br>---<br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/5.png" width="60%" height="60%" border="1"></center><ul><li>需要在段落开始处标明<code>layout</code>属性，可为<code>image</code>,<code>image-left</code>,<code>image-right</code>，使图片处在不同的位置；</li><li><code>layout</code>属性为图片链接，可以是在线图片链接，也可以是本地图片。<ul><li>使用本地图片前，需要在工作目录下新建<code>public</code>文件夹，并把图片资源放在此文件夹中，图片链接默认从<code>public</code>文件夹中访问）。</li></ul></li></ul><hr><h2 id="2-5-Iframe"><a href="#2-5-Iframe" class="headerlink" title="2.5 Iframe"></a>2.5 Iframe</h2><p><strong>网页片段页</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br>layout: iframe-right<br><span class="hljs-section">url: https://ultrafish.cn/plus/files/ieee<span class="hljs-emphasis">_754_</span>single<span class="hljs-emphasis">_representation.html</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"># IEEE 754</span></span><br><span class="hljs-emphasis"><span class="hljs-section">二进制浮点数算术标准</span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section">若想了解更多有关内容</span></span><br><span class="hljs-emphasis"><span class="hljs-section">欢迎浏览我的博客网站 [<span class="hljs-string">https://UltraFish.cn</span>](<span class="hljs-link">https://UltraFish.cn</span>)</span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">也欢迎浏览[<span class="hljs-string">UltraFish Plus</span>](<span class="hljs-link">https://UltraFish.cn</span>)</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">使用[<span class="hljs-string">浮点数转换器</span>](<span class="hljs-link">https://ultrafish.cn/plus/files/ieee_754_single_representation.html</span>)体验计算机的魅力</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/6.png" width="60%" height="60%" border="1"></center><ul><li>与图片页类似，可设置网页所在的相对位置；</li><li>设置<code>url</code>属性标明网址；</li></ul><hr><h1 id="3-Code-Block"><a href="#3-Code-Block" class="headerlink" title="3. Code Block"></a>3. Code Block</h1><p><strong>代码片段</strong></p><p>具体内容请参考：<a href="https://cn.sli.dev/guide/syntax.html#code-blocks">代码块-Slidev</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">```py &#123;<span class="hljs-number">1</span>|<span class="hljs-number">3</span>|<span class="hljs-number">3</span><span class="hljs-number">-4</span>|<span class="hljs-number">3</span><span class="hljs-number">-5</span>|<span class="hljs-number">3</span><span class="hljs-number">-6</span>|<span class="hljs-number">8</span>|<span class="hljs-number">8</span><span class="hljs-number">-9</span>|<span class="hljs-number">11</span>|all&#125;<br><span class="hljs-number">1.</span>符号 &gt;&gt;&gt; + &gt;&gt;&gt; <span class="hljs-number">0</span><br><br><span class="hljs-number">2.</span>指数 &gt;&gt;&gt; <span class="hljs-number">3</span><br>    &gt;&gt;&gt; <span class="hljs-number">3</span> Biased <span class="hljs-number">127</span> (偏移<span class="hljs-number">127</span>)<br>    &gt;&gt;&gt; <span class="hljs-number">3</span> + <span class="hljs-number">127</span> = <span class="hljs-number">130</span><br>    &gt;&gt;&gt; <span class="hljs-number">130</span> = <span class="hljs-number">10000010</span>(<span class="hljs-number">2</span>) (<span class="hljs-number">8</span>位二进制)<br><br><span class="hljs-number">3.</span>分数 &gt;&gt;&gt; (<span class="hljs-number">1.</span>)<span class="hljs-number">10011</span> (隐去最左侧<span class="hljs-number">1</span>)<br>    &gt;&gt;&gt; <span class="hljs-number">100</span> <span class="hljs-number">1100</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> (<span class="hljs-number">23</span>位二进制 靠左 右侧补<span class="hljs-number">0</span>)<br><br><span class="hljs-number">12.75</span> = <span class="hljs-number">0</span> <span class="hljs-number">10000010</span> <span class="hljs-number">100</span> <span class="hljs-number">1100</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> (<span class="hljs-number">32</span>位二进制)<br>` ` `<br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/7.png" width="60%" height="60%" border="1"></center><ul><li>使用 Markdown 语法编写代码块；</li><li>可在开头使用<code>&#123;&#125;</code>标注高亮的代码。可用<code>|</code>隔开，设置每次点击分别高亮的代码</li></ul><hr><h1 id="4-Animations"><a href="#4-Animations" class="headerlink" title="4. Animations"></a>4. Animations</h1><p><strong>动画</strong></p><p>具体内容请参考：<a href="https://cn.sli.dev/guide/animations.html">动画-Slidev</a></p><h2 id="4-1-元素显示动画"><a href="#4-1-元素显示动画" class="headerlink" title="4.1 元素显示动画"></a>4.1 元素显示动画</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br><br><span class="hljs-section"># 1. 定点数表示法</span><br>Fixed Point Representation<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-click</span>&gt;</span></span><br><br><span class="hljs-section">### 保持小数点位置与原数<span class="hljs-strong">**不变**</span>；</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">v-click</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-click</span>&gt;</span></span><br><br><span class="hljs-section">### 根据二进制<span class="hljs-strong">**按权相加**</span>进行转换：</span><br>$$b<span class="hljs-emphasis">_ib_</span>&#123;i-1&#125;...b<span class="hljs-emphasis">_2b_</span>1.b<span class="hljs-emphasis">_&#123;-1&#125;b_</span>&#123;-2...b<span class="hljs-emphasis">_&#123;-j&#125;&#125;$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">$$\Downarrow$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">$$b=\sum_</span>&#123;k=-j&#125;^ib<span class="hljs-emphasis">_k\times 2^k$$</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">v-click</span>&gt;</span></span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/8.png" width="50%" height="50%" border="1"></center><center><img src="/2022/02/02/Markdown-presentation-slidev/3.png" width="50%" height="50%" border="1"></center><ul><li>使用<code>&lt;v-click&gt; &lt;/v-click&gt;</code>标记点击<strong>后</strong>出现的元素；</li><li>使用<code>&lt;v-after&gt; &lt;/v-after&gt;</code>标记点击<strong>前</strong>出现的元素。</li></ul><hr><h2 id="4-2-物件运动动画"><a href="#4-2-物件运动动画" class="headerlink" title="4.2 物件运动动画"></a>4.2 物件运动动画</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br>layout: cover<br>class: text-center<br><span class="hljs-section">background: &#x27;CNY<span class="hljs-emphasis">_bg.png&#x27;</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> </span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">v-motion</span></span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">:initial</span>=<span class="hljs-string">&quot;&#123; y: -100, opacity: 0&#125;&quot;</span></span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">:enter</span>=<span class="hljs-string">&quot;&#123; y: 0, opacity: 1, transition: &#123;delay: 1500, duration: 1000 &#125; &#125;&quot;</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section">    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#c02323</span>&gt;</span></span>2022 新年快乐<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> </span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">v-motion</span></span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">:initial</span>=<span class="hljs-string">&quot;&#123; y: -40, opacity: 0&#125;&quot;</span></span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-section">    <span class="hljs-attr">:enter</span>=<span class="hljs-string">&quot;&#123; y: 0, opacity: 1, transition: &#123;delay: 2500, duration: 1000 &#125; &#125;&quot;</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section">    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#c02323</span>&gt;</span></span>虎虎生威 万事顺意<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">Made by Mike_</span>Zhang</span><br><span class="hljs-section"></span><br><span class="hljs-section">[<span class="hljs-string">https://UltraFish.cn</span>](<span class="hljs-link">https://UltraFish.cn</span>)</span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/9.png" width="50%" height="50%" border="1"></center><ul><li>使用<code>v-motion</code>标记，标明初始状态和最终状态，自动生成动画；</li><li>可控制<code>x</code>,<code>y</code>坐标，不透明度等属性；</li><li>可设置延时，时长等属性；</li><li>具体内容请参考：<a href="https://cn.sli.dev/guide/animations.html">动画-Slidev</a>。</li></ul><hr><h2 id="4-3-箭头标记"><a href="#4-3-箭头标记" class="headerlink" title="4.3 箭头标记"></a>4.3 箭头标记</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">arrow</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;130&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;230&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;410&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;365&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#7e7e7e&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">arrowSize</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">arrow</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;230&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;450&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;360&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#7e7e7e&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">arrowSize</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">arrow</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;700&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;230&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;530&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;360&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#7e7e7e&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">arrowSize</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><center><img src="/2022/02/02/Markdown-presentation-slidev/10.png" width="50%" height="50%" border="1"></center><ul><li>使用<code>&lt;arrow /&gt;</code>标记箭头；</li><li>可设置头尾坐标，颜色，宽度，箭头大小等属性。</li></ul><hr><p>引用:<br><a href="https://sli.dev/">Slidev 主页</a></p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p><a href="https://sli.dev/">Slidev</a>演示文稿工具十分专业十分强大，专为开发者设计，可高度自定义。感兴趣的同学可浏览其官网<a href="https://sli.dev/">Slidev</a>研究。</p><p>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Markdown</category>
      
      <category>Presentation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>presentation</tag>
      
      <tag>Slidev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Markdown制作演示文稿 reveal-md</title>
    <link href="/2022/01/15/Markdown-presentation/"/>
    <url>/2022/01/15/Markdown-presentation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2022/01/15/Markdown-presentation/">使用Markdown制作演示文稿 reveal-md</a><br><a href="https://ultrafish.cn/2022/02/02/Markdown-presentation-slidev/">使用Markdown制作演示文稿 Slidev</a></p></blockquote><hr><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/Negative_Binary_Number_Representation_720p.mp4?versionId=CAEQKhiBgIC25qHz8hciIDRlNGM5ZjhhZDc4ODRjNTNhODNkMjIxMmZiYzkzMTI4">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/Negative_Binary_Number_Representation_720p.mp4?versionId=CAEQKhiBgIC25qHz8hciIDRlNGM5ZjhhZDc4ODRjNTNhODNkMjIxMmZiYzkzMTI4" type="video/mp4">      </video><hr><p>以上视频是我对之前文章-<a href="https://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法Signed binary number representation</a>中一部分内容的演示。<br><span id="more"></span><br>这用到了一款基于<a href="https://revealjs.com/">reveal.js</a>框架的<a href="https://github.com/webpro/reveal-md">reveal-md</a>工具，可以使用Markdown来生成演示文稿（类似于PPT）。</p><p><a href="https://github.com/webpro/reveal-md">reveal-md GitHub主页</a></p><hr><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>使用方法：</p><ul><li>参考<a href="https://github.com/webpro/reveal-md">reveal-md GitHub主页</a>，使用命令行运行：</li></ul><p>安装：<br><code>npm install -g reveal-md</code></p><p>运行：<br><code>reveal-md slides.md</code><br>（<code>slides.md</code>为目标Markdown文件）</p><p>随后可用浏览器打开本地端口进行演示。</p><hr><ul><li>使用VS Code插件运行：</li></ul><p><a href="https://marketplace.visualstudio.com/items?itemName=evilz.vscode-reveal">vscode-reveal插件</a></p><p>可实时渲染：</p><p><img src="/2022/01/15/Markdown-presentation/1.png" alt></p><hr><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>特点：</p><ul><li>使用Markdown编写，可用<code>---</code>分隔每页演示文稿，或自定义分隔符；</li><li>使内容与排版分离，实时渲染演示文稿，能让创作者更加专注于表达的内容；</li><li>有多种主题可以使用；</li><li>支持HTML和CSS，可高度自定义页面样式；</li><li>可导出为PDF文档。</li></ul><hr><p>引用:<br><a href="https://github.com/webpro/reveal-md">reveal-md - GitHub</a></p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>reveal-md工具十分方便，可快速且精简的生成演示文稿，但是其只能做简单的演示，不能进行稍复杂的排版。</p><p>但是一款名为<a href="https://sli.dev/">Slidev</a>的演示文稿工具更加专业更加强大，专为开发者设计，之后会用文章记录。</p><p>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Markdown</category>
      
      <category>Presentation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>reveal-md</tag>
      
      <tag>presentation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Y86-64学习2-Y86-64 SEQ Stages</title>
    <link href="/2022/01/08/Y86-64-learning-2/"/>
    <url>/2022/01/08/Y86-64-learning-2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System 相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - 浮点数表示方法转换器 Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - 多进制整数转换器 Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64学习2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64学习2-Control</a></p></blockquote><hr><blockquote><p>The <a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">last article</a> describes the components of each Y86-64 instruction. It is important to learn the <strong>SEQ</strong> (sequential processor) before reach the final goal - <strong>pipeline processor</strong>. The SEQ is slow because it requires a whole cycle to perform all steps in a instruction. Each instruction has a very different actions. However, the SEQ makes all different instructions follow a uniform sequence, which makes the best use of the hardware, even though it requires a long cycle time.</p></blockquote><hr><span id="more"></span><h1 id="1-Stages-Description"><a href="#1-Stages-Description" class="headerlink" title="1 Stages Description"></a>1 Stages Description</h1><p>6 stages: Fetch, Decode, Execute, Memory, Write Back, and PC Update.</p><h2 id="1-1-Fetch"><a href="#1-1-Fetch" class="headerlink" title="1.1 Fetch"></a>1.1 Fetch</h2><ul><li>According to the <strong>PC</strong> as the <strong>RAM address</strong>, read <strong>instruction byte</strong> from memory;</li><li>Read <strong>first two 4-bit(1 Byte) instruction specifier byte</strong>, including the <code>icode</code> and <code>ifun</code>;</li><li>Read the <strong>register specifier byte</strong> - <code>rA</code> and <code>rB</code>;</li><li>Read 8-byte constant word - <code>valC</code>;</li><li>Compute the next instruction address following the current one, <code>valP = PC + len(fetched instruction)</code></li></ul><hr><h2 id="1-2-Decode"><a href="#1-2-Decode" class="headerlink" title="1.2 Decode"></a>1.2 Decode</h2><p>Read register value from Register File.</p><ul><li>Read from <code>rA</code>, <code>rB</code>;</li><li>Assign value to <code>valA</code> and <code>valB</code>;</li><li>OR read from <strong>stack pointer</strong> <code>%rsp</code>(e.g., <code>pushq</code>, <code>popq</code>, <code>call</code>, <code>ret</code>).</li></ul><hr><h2 id="1-3-Execute"><a href="#1-3-Execute" class="headerlink" title="1.3 Execute"></a>1.3 Execute</h2><ul><li>The ALU(Arithmetic/Logic Unit):<ul><li>Do the <strong>operation</strong> based on the <code>ifun</code>, or</li><li>Compute the <strong>effective memory address</strong>(e.g., base address <code>ADD</code> displacement), or</li><li>Increase or decrease the <strong>stack pointer</strong>.</li></ul></li><li>Assign the result value to <code>valE</code>;</li><li>Set the <code>CC</code> (Condition Code);</li></ul><blockquote><p>For <code>cmovXX</code>(conditional move) and <code>jXX</code>(jump) instruction:<br>This stage will evaluate the <code>CC</code> with <code>ifun</code>(<strong>move condition OR jump condition</strong>);<br>if condition holds, do the move or jump.</p></blockquote><hr><h2 id="1-4-Memory"><a href="#1-4-Memory" class="headerlink" title="1.4 Memory"></a>1.4 Memory</h2><ul><li>8-byte;</li><li>Write data into memory, usually write into $M_8[valE]$;</li><li>Read data from memory, store in <code>valM</code>.</li></ul><hr><h2 id="1-5-Write-Back"><a href="#1-5-Write-Back" class="headerlink" title="1.5 Write Back"></a>1.5 Write Back</h2><ul><li>Write the data back to <strong>register</strong> from the <strong>Decode Stage</strong> (e.g., <code>rA</code>, <code>rB</code>, <code>%rsp</code>)</li></ul><hr><h2 id="1-6-PC-Update"><a href="#1-6-PC-Update" class="headerlink" title="1.6 PC Update"></a>1.6 PC Update</h2><ul><li>Set <code>PC</code> (Program Counter) to the address of <code>next instruction</code>;</li><li>In Fetch Stage, <code>valP = PC + len(fetched instruction)</code> does not update the value of <code>PC</code>, but in this Stage, assign valP to <code>PC</code> to truly update <code>PC</code>, <code>PC = valP</code>;</li><li>Based on execute result, set <code>PC</code> to <code>valC</code> or <code>valP</code>(e.g., in <code>jXX</code> or <code>cmovXX</code>).</li></ul><hr><h1 id="2-Stages-Implementation"><a href="#2-Stages-Implementation" class="headerlink" title="2 Stages Implementation"></a>2 Stages Implementation</h1><h2 id="2-1-OPq-rrmovq-irmovq-Implementation"><a href="#2-1-OPq-rrmovq-irmovq-Implementation" class="headerlink" title="2.1 OPq rrmovq irmovq Implementation"></a>2.1 <code>OPq</code> <code>rrmovq</code> <code>irmovq</code> Implementation</h2><ul><li><strong>Compute a value and store the result in a register.</strong></li></ul><center><img src="/2022/01/08/Y86-64-learning-2/1.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Computations in sequential implementation of Y86-64 instructions(OPq, rrmovq, irmovq)(CS: APP)</div></center><blockquote><p>$M_x[PC]$ refers to accessing <code>x</code> bytes at location of <code>PC</code> in memory.</p></blockquote><p><strong>Common</strong>:</p><ul><li><strong>Fetch</strong>: <ul><li><code>icode</code>, <code>ifun</code>: $M_1[PC]$;</li><li><code>rA</code>, <code>rB</code>: $M_1[PC+1]$;</li></ul></li><li><strong>Memory</strong>: <strong>No</strong> operation on memory;</li><li><strong>Write Back</strong>: Write <code>valE</code> into <code>rB</code> register;</li><li><strong>PC Update</strong>: Update <code>PC</code> to <code>valP</code>.</li></ul><p><strong>Diff</strong>:</p><ul><li><code>OPq rA, rB</code><ul><li>2-byte</li><li><code>6(PC)</code> | <code>fn</code> | <code>rA(PC+1)</code> | <code>rB</code></li><li><strong>Decode</strong>:<ul><li>Read both <code>rA</code> and <code>rB</code>;</li></ul></li><li><strong>Execute</strong>:<ul><li><code>valB</code>(rB) <code>OP</code> <code>valA</code>(rA) (<code>OP</code> based on <code>ifun</code>)</li><li>Set <code>CC</code></li></ul></li></ul></li><li><code>rrmovq rA, rB</code><ul><li>2-byte</li><li><code>2(PC)</code> | <code>0</code> | <code>rA(PC+1)</code> | <code>rB</code></li><li><strong>Decode</strong>: <ul><li>Read <code>rA</code> only;</li></ul></li><li><strong>Execute</strong>: <ul><li><code>valE = 0 + valA</code> $\to$ <code>valE = valA</code> ;</li><li><strong>No</strong> set to <code>CC</code>;</li></ul></li></ul></li><li><code>irmovq V,rB</code><ul><li>10-byte</li><li><code>3(PC)</code> | <code>0</code> | <code>F(PC+1)</code>| <code>rB</code> | <code>V(PC+2)</code></li><li><strong>Fetch</strong>:<ul><li>valC = $M_8[PC+2]$ to get the constant words;</li></ul></li><li><strong>Decode</strong>:<ul><li><strong>No</strong> read from register;</li></ul></li><li><strong>Execute</strong>:<ul><li><code>valE = 0 + valC</code> $\to$ <code>valE = valC</code> ;</li><li><strong>No</strong> set to <code>CC</code>;</li></ul></li></ul></li></ul><p><strong>Example Sample</strong>:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">1  0x000: 30f20900000000000000  |       irmovq $9, %rdx<br>2  0x00a: 30f31500000000000000  |       irmovq $21, %rbx<br>3  0x014: 6123                  |       subq %rdx, %rbx           # subtract [Example 1]<br>4  0x016: 30f48000000000000000  |       irmovq $128,%rsp          # [Example 2]<br>5  0x020: 40436400000000000000  |       rmmovq %rsp, 100(%rbx)    # store [Example 3]<br>6  0x02a: a02f                  |       pushq %rdx                # push [Example 4]<br>7  0x02c: b00f                  |       popq %rax                 # [Example 5]<br>8  0x02e: 734000000000000000    |       je done                   # Not taken [Example 6]<br>9  0x037: 804100000000000000    |       call proc                 # [Example 7]<br>10 0x040:                       | done:<br>11 0x040: 00                    |       halt<br>12 0x041:                       | proc:<br>13 0x041: 90                    |       ret                       # Return [Example 8]<br>14                              |<br></code></pre></td></tr></table></figure><p><em>Sample Y86-64 instruction sequence(CS: APP)</em></p><p><strong>Example 1</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/3.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 1 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><p><strong>Example 2</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/2.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 2 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><hr><h2 id="2-2-rmmovq-mrmovq-Implementation"><a href="#2-2-rmmovq-mrmovq-Implementation" class="headerlink" title="2.2 rmmovq mrmovq Implementation"></a>2.2 <code>rmmovq</code> <code>mrmovq</code> Implementation</h2><ul><li><strong>Read or write memory</strong></li></ul><center><img src="/2022/01/08/Y86-64-learning-2/4.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Computations in sequential implementation of Y86-64 instructions(rmmovq, mrmovq)(CS: APP)</div></center><p><strong>Common</strong>:</p><ul><li>Same Fetch Stage</li><li><strong>Execute</strong>:<ul><li><code>valB</code>: the value of register <code>rB</code>, as the <strong>base address</strong>;</li><li><code>valC</code>: the value of the constant word, as the <strong>displacement</strong>;</li><li>valE: the <strong>effective address</strong> = <code>valB</code> <code>ADD</code> <code>valC</code>;</li><li><strong>PC Update</strong>: Update <code>PC</code> to <code>valP</code>.</li></ul></li></ul><p><strong>Diff</strong>:</p><ul><li><code>rmmovq</code><ul><li>10-byte</li><li><code>4(PC)</code> | <code>0</code> | <code>rA(PC+1)</code> | <code>rB</code> | <code>D(PC+2)</code></li><li><code>rA</code> $\to$ <code>rB</code>, register $\to$ memory</li><li><strong>Decode</strong>:<ul><li><code>valA</code>: R[rA], as the value to <strong>write into memory</strong>;</li><li><code>valB</code>: R[rB], as the <strong>base address</strong>;</li></ul></li><li><strong>Memory</strong>:<ul><li><strong>write</strong> <code>valA</code> into <strong>memory</strong> at effective address <code>valE</code> from <strong>register</strong>;</li></ul></li><li><strong>Write Back</strong>: NO write back to register;</li></ul></li><li><code>mrmovq</code>:<ul><li>10-byte</li><li><code>5(PC)</code> | <code>0</code> | <code>rA(PC+1)</code> | <code>rB</code> | <code>D(PC+2)</code></li><li><code>rB</code> $\to$ <code>rA</code>, memory $\to$ register</li><li><strong>Decode</strong>:<ul><li><code>valB</code>: R[rB], as the <strong>base address</strong>;</li><li>the value to write into register is read from memory</li></ul></li><li><strong>Memory</strong>:<ul><li><strong>read</strong> value from <strong>memory</strong> at effective address <code>valE</code>, as <code>valM</code>;</li></ul></li><li><strong>Write Back</strong>: write <code>valE</code> back to <code>rA</code>.</li></ul></li></ul><p><strong>Example 3</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/5.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 3 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><hr><h2 id="2-3-pushq-popq-Implementation"><a href="#2-3-pushq-popq-Implementation" class="headerlink" title="2.3 pushq popq Implementation"></a>2.3 <code>pushq</code> <code>popq</code> Implementation</h2><ul><li><strong>Push or pop the stack</strong></li></ul><center><img src="/2022/01/08/Y86-64-learning-2/6.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Computations in sequential implementation of Y86-64 instructions(pushq, popq)(CS: APP)</div></center><ul><li><code>pushq rA</code><ul><li>2-byte</li><li><code>A(PC)</code> | <code>0</code> | <code>rA(PC+1)</code> | <code>F</code></li><li><strong>Decode</strong>:<ul><li><code>valA</code>: read from <code>rA</code>, as the value <strong>push</strong> into memory;</li><li><code>valB</code>: read from <code>%rsp</code>, as the <strong>top pointer of stack</strong>;</li></ul></li><li><strong>Execute</strong>:<ul><li><code>valE = valB - 8</code>, push the <strong>top pointer of stack forward</strong>, <code>valE</code> as the new peak;</li></ul></li><li><strong>Memory</strong>:<ul><li><strong>write</strong> the value <code>valA</code> into the stack at the <strong>new</strong> top address <code>valE</code> in the memory;</li></ul></li><li><strong>Write Back</strong>:<ul><li><code>R[%rsp] = valE</code>, truly <strong>update the stack pointer</strong> <code>%rsp</code>.</li></ul></li></ul></li><li><code>popq rA</code><ul><li>2-byte</li><li><code>B(PC)</code> | <code>0</code> | <code>rA(PC+1)</code> | <code>F</code></li><li><strong>Decode</strong>:<ul><li><code>valA</code>: read from <code>%rsp</code>, <strong>unincremented</strong> value, as the <strong>peak</strong> of stack in the memory;</li><li><code>valB</code>: read from <code>%rsp</code>, <strong>incremented</strong> value, as the <strong>top pointer of stack</strong>, will be incremented;</li></ul></li><li><strong>Execute</strong>:<ul><li><code>valE = valB + 8</code>, push the <strong>top pointer of stack backward</strong>, <code>valE</code> as the new peak;</li></ul></li><li><strong>Memory</strong>:<ul><li><strong>read</strong> the value at address <code>valA</code> from the stack at the <strong>original</strong> top address <code>valA</code> in the memory, as <code>valM</code>;</li></ul></li><li><strong>Write Back</strong>:<ul><li><code>R[%rsp] = valE</code>, truly <strong>update the stack pointer</strong> <code>%rsp</code>.</li><li><code>R[A] = valM</code>, <strong>write</strong> the popped value from memory <code>valM</code> into register <code>rA</code>.</li></ul></li></ul></li></ul><p><strong>Example 4</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/7.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 4 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><p><strong>Example 5</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/8.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 5 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><hr><h2 id="2-4-jXX-call-ret-cmovXX-Implementation"><a href="#2-4-jXX-call-ret-cmovXX-Implementation" class="headerlink" title="2.4 jXX call ret cmovXX Implementation"></a>2.4 <code>jXX</code> <code>call</code> <code>ret</code> <code>cmovXX</code> Implementation</h2><ul><li><strong>Control transfer</strong></li></ul><center><img src="/2022/01/08/Y86-64-learning-2/9.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Computations in sequential implementation of Y86-64 instructions(jXX, call, ret)(CS: APP)</div></center><center><img src="/2022/01/08/Y86-64-learning-2/10.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Computations in sequential implementation of Y86-64 instructions(cmovXX)(CS: APP)</div></center><ul><li><code>jXX Dest</code><ul><li>9-byte</li><li><code>7(PC)</code> | <code>fn</code> | <code>Dest(PC+1)</code></li><li><strong>Fetch</strong>: <ul><li><code>valC</code>: as the <strong>destination</strong> address for jump;</li><li><code>valP</code>: the address of <strong>next</strong> instruction for non-jump;</li></ul></li><li><strong>NO</strong> decode stage;</li><li><strong>Execute</strong>:<ul><li>Evaluate the <code>CC</code> with <code>ifun</code>(<strong>move condition OR jump condition</strong>);</li><li>Cnd = flag: <code>1</code> or <code>0</code><ul><li><code>1</code>: hold condition, <code>PC = valC, jump</code>;</li><li><code>0</code> : escape condition, <code>PC = valP, next</code>;</li></ul></li></ul></li><li>NO memory and register read or write;</li><li><strong>PC Update</strong>:<ul><li>PC $\leftarrow$ <code>Cnd?valC:valP</code>:<ul><li>if (Cnd == 1): PC = valC;</li><li>if (Cnd == 0): PC = valP;</li></ul></li></ul></li></ul></li><li><p><code>cmovXX rA, rB</code></p><ul><li>2-byte</li><li><code>2(PC)</code> | <code>fn</code> | <code>rA(PC+1)</code> | <code>rB</code></li><li>Combination of <code>rrmovq</code> and <strong>conditional instruction</strong>;</li></ul></li><li><p><code>call Dest</code></p><ul><li>9-byte</li><li><code>7(PC)</code> | <code>fn</code> | <code>Dest(PC+1)</code></li><li>Based on <code>pushq</code>;</li><li><strong>Write</strong> the <strong>next address</strong> <code>valP</code> into the memory, for <strong>return</strong>;</li></ul></li><li><code>ret</code><ul><li>1-byte</li><li><code>9(PC)</code> | <code>0</code></li><li>Based on <code>popq</code>;</li><li><strong>Read</strong> the <strong>next address</strong> <code>valM</code> from the memory, for <strong>jump</strong>;</li><li>Set <code>PC</code> to <code>valM</code>, return to the <strong>next instruction</strong> of call instruction;</li></ul></li></ul><p><strong>Example 6</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/11.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 6 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><p><strong>Example 7</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/12.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 7 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><p><strong>Example 8</strong>:</p><center><img src="/2022/01/08/Y86-64-learning-2/13.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Example 8 of Computations in sequential implementation of Y86-64 instructions(CS: APP)</div></center><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>B. Randal, D. R. O’Hallaron, <em>Computer systems : a programmer’s perspective</em>, Third edition. Boston: Pearson, 2016.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Y86-64相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>Y86-64</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Y86-64</tag>
      
      <tag>Computer System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</title>
    <link href="/2022/01/04/Y86-64-learning-1/"/>
    <url>/2022/01/04/Y86-64-learning-1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System 相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - 浮点数表示方法转换器 Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - 多进制整数转换器 Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64学习2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64学习2-Control</a></p></blockquote><hr><h1 id="1-Accessible-amp-Modifiable-State"><a href="#1-Accessible-amp-Modifiable-State" class="headerlink" title="1 Accessible &amp; Modifiable State"></a>1 Accessible &amp; Modifiable State</h1><p><strong>Y86-64 programmer-visible state</strong></p><blockquote><p>The programmer can <strong>access and modify</strong> these processor state.<br>Similar to x86-64, but <strong>more simpler and less compact</strong>.<br><span id="more"></span></p></blockquote><center><img src="/2022/01/04/Y86-64-learning-1/1.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 programmer-visible state(CS: APP)</div></center><blockquote><p>Comparing with the <strong>register</strong> part of x86-64:</p></blockquote><center><img src="/2022/01/04/Y86-64-learning-1/2.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Integer registers(CS: APP)</div></center><hr><h2 id="1-1-Y86-64-Program-Registers"><a href="#1-1-Y86-64-Program-Registers" class="headerlink" title="1.1 Y86-64 Program Registers"></a>1.1 Y86-64 Program Registers</h2><ul><li><strong>15</strong> Program Resister;</li><li>No <code>%r15</code>, to simplify the encoding;</li><li><strong>64-bit</strong> word, <strong>8 words</strong>;</li><li><code>%rsp</code> for Stack Pointer, NO fixed meaning or value for others.</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/3.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 Program Registers(CS: APP)</div></center><hr><h2 id="1-2-Condition-Codes"><a href="#1-2-Condition-Codes" class="headerlink" title="1.2 Condition Codes"></a>1.2 Condition Codes</h2><ul><li><strong>CC</strong>: Condition Code;</li><li>3 <strong>single-bit</strong> codes;</li><li><strong>ZF</strong>, <strong>SF</strong>, <strong>OF</strong>;</li><li><strong>ZF</strong>: Zero Flag. The most recent operation yielded <strong>zero</strong>.</li><li><strong>SF</strong>: Sign Flag. The most recent operation yielded a <strong>negative value</strong>.</li><li><strong>OF</strong>: Overflow Flag. The most recent operation caused a <strong>two’s-complement overflow</strong>—either negative or positive.</li></ul><hr><h2 id="1-3-Program-Counter"><a href="#1-3-Program-Counter" class="headerlink" title="1.3 Program Counter"></a>1.3 Program Counter</h2><ul><li><strong>PC</strong>: Program Counter;</li><li>Store the address of currently executing instruction.</li></ul><hr><h2 id="1-4-Memory"><a href="#1-4-Memory" class="headerlink" title="1.4 Memory"></a>1.4 Memory</h2><ul><li>Virtual memory;</li><li>In the Operand forms, only represented in <strong>base</strong> and <strong>displacement</strong>, NO index and scale in x86-64.</li></ul><hr><h2 id="1-5-Program-State"><a href="#1-5-Program-State" class="headerlink" title="1.5 Program State"></a>1.5 Program State</h2><ul><li><strong>Stat</strong>: Program State;</li><li>The overall state of program execution;</li><li><strong>Normal operation</strong> or <strong>exception</strong>.</li></ul><hr><h1 id="2-Y86-64-Instructions"><a href="#2-Y86-64-Instructions" class="headerlink" title="2 Y86-64 Instructions"></a>2 Y86-64 Instructions</h1><center><img src="/2022/01/04/Y86-64-learning-1/4.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 Instructions Set(CS: APP)</div></center><ul><li>A <strong>subset</strong> of x86-64 instruction set;</li><li><strong>8-byte</strong> integer operations;</li><li><strong>fewer</strong> address modes;</li><li><strong>smaller</strong> set of operations;</li><li>Each instruction set including:<ul><li>1-byte <strong><em>instruction specifier</em></strong> (e.g., <code>0|0</code> for <code>halt</code>), including(<code>op|fn</code>):<ul><li>4-bit <strong>operation code(<code>op</code>)</strong> and, </li><li>4-bit <strong>function code(<code>fn</code>)</strong> to specify a particular function ;</li></ul></li><li>(possibly) 1-byte <strong><em>register specifier</em></strong> (e.g., <code>rA|rB</code>, <code>F|rB</code>);</li><li>(possibly) 8-byte <strong><em>constant word</em></strong> (e.g., <code>V</code>, <code>D</code>, <code>Dest</code>);</li></ul></li><li>4 types of instruction: <strong>1-byte, 2-byte, 9-byte, and 10-byte instruction</strong>;<ul><li>1-byte: <code>halt</code>, <code>nop</code>, <code>ret</code> (only <strong><em>instruction specifier</em></strong>);</li><li>2-byte: <code>rrmovq rA, rB</code>, <code>OPq rA, rB</code>, <code>cmovXX rA, rB</code>, <code>pushq rA</code>, <code>popq rA</code> (only <strong><em>instruction specifier</em></strong> + <strong><em>register specifier</em></strong>);</li><li>9-byte: <code>jXX Dest</code>, <code>call Dest</code> (only <strong><em>instruction specifier</em></strong> + <strong><em>constant word</em></strong>);</li><li>10-byte: <code>irmovq V, D(rB)</code>, <code>rmmovq rA, D(rB)</code>, <code>mrmovq D(rB), rA</code> (<strong><em>instruction specifier</em></strong> + <strong><em>register specifier</em></strong> + <strong><em>constant word</em></strong>);</li></ul></li><li>Encoded in <strong>hexadecimal</strong> value.</li></ul><hr><h2 id="2-1-movq-Instructions"><a href="#2-1-movq-Instructions" class="headerlink" title="2.1 movq Instructions"></a>2.1 <code>movq</code> Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/5.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 movq instructions(CS: APP)</div></center><ul><li>subset of x86-64 movq instruction set;</li><li>Indicating the movement: <strong>source</strong> $\to$ <strong>destination</strong>;<ul><li><strong>Source</strong>: <em>first character</em> - immediate(<code>i</code>), register(<code>r</code>), memory(<code>m</code>);</li><li><strong>Destination</strong>: <em>second character</em> - register(<code>r</code>), memory(<code>m</code>);</li></ul></li><li>NO <strong>memory(<code>m</code>)</strong> location $\rightarrow$ another <strong>memory(<code>m</code>)</strong> location;</li><li>NO <strong>immediate(<code>i</code>)</strong> data $\rightarrow$ <strong>memory(<code>m</code>)</strong>;</li></ul><blockquote><p>The movement is from the <strong>first argument</strong> to the <strong>second argument</strong>, usually <code>rA(V)</code> $\to$ <code>rB</code>,<br>except <code>mrmovq D(rB), rA</code>, which is <code>rB</code> $\to$ <code>rA</code></p></blockquote><ul><li><p>The <strong>immediate value(<code>V</code>)</strong> and <strong>displacement(<code>D</code>)</strong> is <strong>8-byte</strong> constant word.</p></li><li><p>memory reference: only <strong>base</strong> and <strong>displacement</strong>(e.g., <code>D(rB)</code>, <code>rB</code> for <strong>base</strong>, <code>D</code> for <strong>displacement</strong>), NO second index register or scale;</p></li></ul><center><img src="/2022/01/04/Y86-64-learning-1/6.png" width="70%" height="70%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Operand forms(CS: APP) (Y86-64's in red box)</div></center><hr><h2 id="2-2-OPq-Integer-Operation-Instructions"><a href="#2-2-OPq-Integer-Operation-Instructions" class="headerlink" title="2.2 OPq Integer Operation Instructions"></a>2.2 <code>OPq</code> Integer Operation Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/8.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 OPq instructions(CS: APP)</div></center><center><img src="/2022/01/04/Y86-64-learning-1/7.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Integer arithmetic operations(CS: APP) (Y86-64's in red box)</div></center><ul><li>subset of x86-64 Integer arithmetic operations;</li><li>2-byte instruction;</li><li>4 instructions: <code>addq</code>, <code>subq</code>, <code>andq</code>, <code>xorq</code>;</li><li><strong>Only operate on register data</strong>, NOT on memory data;</li><li>Sets 3 conditional code <code>ZF</code>, <code>SF</code>, and <code>OF</code>.</li><li>Function code for <code>fn</code>:</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/19.png" width="20%" height="20%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function codes for Y86-64 instruction set(CS: APP)(Operation part)</div></center><hr><h2 id="2-3-jXX-Jump-Instructions"><a href="#2-3-jXX-Jump-Instructions" class="headerlink" title="2.3 jXX Jump Instructions"></a>2.3 <code>jXX</code> Jump Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/11.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 jXX instructions(CS: APP)</div></center><center><img src="/2022/01/04/Y86-64-learning-1/9.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Jump instructions(CS: APP) (Y86-64's in red box)</div></center><ul><li>subset of x86-64 Jump instructions;</li><li>9-byte instruction;</li><li>7 instructions: <code>jmp</code>, <code>je</code>, <code>jne</code>, <code>jg</code>, <code>jge</code>, <code>jl</code>, <code>jle</code>;</li><li>according to the <strong>conditional codes(CC)</strong>.</li><li>Function code for <code>fn</code>:</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/20.png" width="25%" height="25%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function codes for Y86-64 instruction set(CS: APP)(Branches part)</div></center><hr><h2 id="2-4-cmovXX-Conditional-Move-Instructions"><a href="#2-4-cmovXX-Conditional-Move-Instructions" class="headerlink" title="2.4 cmovXX Conditional Move Instructions"></a>2.4 <code>cmovXX</code> Conditional Move Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/12.png" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 jXX instructions(CS: APP)</div></center><center><img src="/2022/01/04/Y86-64-learning-1/10.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Conditional move instructions(CS: APP) (Y86-64's in red box)</div></center><ul><li>subset of x86-64 Conditional move instructions;</li><li>2-byte instruction;</li><li>7 instructions: <code>cmove</code>, <code>cmovne</code>, <code>cmovg</code>, <code>cmovge</code>, <code>cmovl</code>, <code>cmovle</code>;</li><li>same format with <strong>register-register</strong> move - <code>rrmovq</code>;</li><li>move occurs only if <strong>condition satisfied</strong>.</li><li>Function code for <code>fn</code>:</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/21.png" width="25%" height="25%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function codes for Y86-64 instruction set(CS: APP)(Moves part)</div></center><hr><h2 id="2-5-call-Instructions"><a href="#2-5-call-Instructions" class="headerlink" title="2.5 call Instructions"></a>2.5 <code>call</code> Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/13.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 call instructions(CS: APP)</div></center><ul><li>9-byte instruction;</li><li><strong>First</strong>, push the <strong>return address</strong> into the stack, the <strong>return address</strong> refers to the address of the instruction <strong>immediately after</strong> the <code>call</code> instruction;</li><li><strong>Second</strong>, jump to the <code>Dest</code> address by setting the <code>PC</code> to the destination address;</li></ul><hr><p><code>ret</code> instruction:</p><center><img src="/2022/01/04/Y86-64-learning-1/14.png" width="30%" height="30%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 ret instructions(CS: APP)</div></center><ul><li>1-byte instruction;</li><li>the instruction <strong>pop</strong> the address from stack, then set the <code>PC</code> to that address.</li></ul><hr><h2 id="2-6-pushq-amp-popq-Instructions"><a href="#2-6-pushq-amp-popq-Instructions" class="headerlink" title="2.6 pushq &amp; popq Instructions"></a>2.6 <code>pushq</code> &amp; <code>popq</code> Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/15.png" width="30%" height="30%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 pushq & popq instructions(CS: APP)</div></center><ul><li>2-byte instruction;</li><li>as same as in x86-64 Push and pop instructions:</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/16.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">x86-64 Push and pop instructions(CS: APP)</div></center><hr><h2 id="2-7-halt-Instructions"><a href="#2-7-halt-Instructions" class="headerlink" title="2.7 halt Instructions"></a>2.7 <code>halt</code> Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/17.png" width="30%" height="30%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 halt instruction(CS: APP)</div></center><ul><li>Stops instruction execution;</li><li>1-byte instruction.</li></ul><hr><h2 id="2-8-nop-Instructions"><a href="#2-8-nop-Instructions" class="headerlink" title="2.8 nop Instructions"></a>2.8 <code>nop</code> Instructions</h2><center><img src="/2022/01/04/Y86-64-learning-1/18.png" width="30%" height="30%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 nop instruction(CS: APP)</div></center><ul><li>Do nothing;</li><li>1-byte instruction.</li></ul><hr><h1 id="3-Encoding"><a href="#3-Encoding" class="headerlink" title="3 Encoding"></a>3 Encoding</h1><h2 id="3-1-Instruction-Specifier"><a href="#3-1-Instruction-Specifier" class="headerlink" title="3.1 Instruction Specifier"></a>3.1 Instruction Specifier</h2><blockquote><p>Having been mentioned in <em>Section 2</em>.</p></blockquote><p>Every instruction has a type specifier, which is the first byte.<br>It can be separated into two 4-bit parts, <strong>operation code</strong> and <strong>function code</strong>.</p><ul><li><strong>operation codes</strong> range from <strong>0 to 0xB</strong>.</li><li><strong>function code</strong> have special values in integer operation, branch, and move instructions; 0 for rest instructions:</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/22.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function codes for Y86-64 instruction set(CS: APP)</div></center><hr><h2 id="3-2-Register-Identifier"><a href="#3-2-Register-Identifier" class="headerlink" title="3.2 Register Identifier"></a>3.2 Register Identifier</h2><p>In Y86-64, some instruction has register operands, such as <code>rrmovq</code>, which associated with the Program Register, who also need to be encoded.</p><ul><li>Each Program Register has its <strong>Register Identifier</strong>, ranging from <strong>0 to 0xE</strong>.</li></ul><center><img src="/2022/01/04/Y86-64-learning-1/23.png" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y86-64 program register identifiers(CS: APP)</div></center><ul><li>The <strong>0xF</strong> register will not be accessed.</li><li>Some instruction <strong>do not require register specifier</strong>;</li><li>Some instruction <strong>require only one register specifier</strong>, such as <code>irmovq</code>, which need to set another register specifier to <strong>0xF</strong> for easy implementation.</li></ul><hr><h2 id="3-3-Constant-Word-Encoding"><a href="#3-3-Constant-Word-Encoding" class="headerlink" title="3.3 Constant Word Encoding"></a>3.3 Constant Word Encoding</h2><p>3 types of 8-byte <strong>constant word</strong>:</p><ul><li>immediate data(<code>V</code>);</li><li>displacement for address specifier(<code>D</code>);</li><li>destination for address specifier(<code>Dest</code>);</li></ul><blockquote><p>For the destination address in <strong>branch and call instructions</strong>, the destination is the <strong>absolute address</strong>, NOT the PC-related address in x86-64.</p></blockquote><ul><li>all constant integer is encoded in <strong>little-endian</strong> encoding, which means every <strong>byte</strong> should be <strong>reversed</strong> when encoding.</li></ul><blockquote><p><strong>little-endian</strong> means the LSP(right-most) byte appears first;<br>For 0x 0A 0B 0C 0D $\to$ 0D 0C 0B 0A (reversed)</p></blockquote><h2 id="3-4-Example"><a href="#3-4-Example" class="headerlink" title="3.4 Example"></a>3.4 Example</h2><p>To encode:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">.pos <span class="hljs-number">0x100</span>  <span class="hljs-comment"># Start code at address 0x100</span><br>    irmovq $<span class="hljs-number">15</span>,%rbx<br>    rrmovq %rbx,%rcx<br>loop:<br>    rmmovq %rcx,-<span class="hljs-number">3</span>(%rbx)<br>    addq %rbx,%rcx<br>    jmp loop<br></code></pre></td></tr></table></figure></p><p><em>Practice Problem 4.1 (CS: APP)</em></p><hr><p>Solution steps:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">        .pos <span class="hljs-number">0x100</span>  <span class="hljs-comment"># Start code at address 0x100</span><br><span class="hljs-number">0x100</span>       irmovq $<span class="hljs-number">15</span>,%rbx <span class="hljs-comment"># 10-byte instruction, next address +a(10)</span><br><span class="hljs-number">0x10a</span>       rrmovq %rbx,%rcx <span class="hljs-comment"># 2-byte instruction, next address +2</span><br>(<span class="hljs-number">0x10c</span>) loop:<br><span class="hljs-number">0x10c</span>       rmmovq %rcx,-<span class="hljs-number">3</span>(%rbx) <span class="hljs-comment"># 10-byte instruction, next address +a(10)</span><br><span class="hljs-number">0x116</span>       addq %rbx,%rcx <span class="hljs-comment"># 2-byte instruction, next address +2</span><br><span class="hljs-number">0x118</span>       jmp loop<br></code></pre></td></tr></table></figure><blockquote><p>the start position of each instruction is depended on the length of the previous one.</p></blockquote><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">0x100</span>       irmovq $<span class="hljs-number">15</span>,%rbx <br></code></pre></td></tr></table></figure><p><code>3|0|F|rB|V</code>:</p><p><code>rB</code>: <code>%rbx</code> $\to$ 0x3</p><p><code>V</code>: <code>$15</code> $\to$ 0x 00 00 00 00 00 00 00 0f $\to$ 0x 0f 00 00 00 00 00 00 00</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x100       30 f3 0f 00 00 00 00 00 00 00  # irmovq $15,%rbx <br></code></pre></td></tr></table></figure><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">0x10a</span>       rrmovq %rbx,%rcx<br></code></pre></td></tr></table></figure><p><code>2|0|rA|rB</code>:</p><p><code>rA</code>: <code>%rbx</code> $\to$ 3</p><p><code>rB</code>: <code>%rcx</code> $\to$ 1</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x10a       20 31  # rrmovq %rbx,%rcx<br></code></pre></td></tr></table></figure><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">0x10c</span>       rmmovq %rcx,-<span class="hljs-number">3</span>(%rbx)<br></code></pre></td></tr></table></figure><p><code>4|0|rA|rB|D</code></p><p><code>rA</code>: <code>%rcx</code> $\to$ 1</p><p><code>rB</code>: <code>%rbx</code> $\to$ 3</p><p><code>D</code>: -3 $\to$ 0000 0000 … 0011 $\to$ 1111 1111 … 1101 (2’s complement) $\to$ 0x ff ff ff ff ff ff ff fd $\to$ fd ff ff ff ff ff ff ff</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x10c       40 13 fd ff ff ff ff ff ff ff  # rmmovq %rcx,-3(%rbx)<br></code></pre></td></tr></table></figure><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">0x116</span>       addq %rbx,%rcx<br></code></pre></td></tr></table></figure><p><code>6|0|rA|rB</code></p><p><code>rA</code>: <code>%rbx</code> $\to$ 3</p><p><code>rB</code>: <code>%rcx</code> $\to$ 1</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x116       60 31  # addq %rbx,%rcx<br></code></pre></td></tr></table></figure><hr><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">0x118</span>       jmp loop<br></code></pre></td></tr></table></figure><p><code>7|0|Dest</code></p><p><code>Dest</code>: <code>loop</code> $\to$ 0x10a $\to$ 0x 00 00 00 00 00 00 01 0c $\to$ 0c 01 00 00 00 00 00 00</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x118       70 0c 01 00 00 00 00 00 00  # jmp loop<br></code></pre></td></tr></table></figure><hr><p>Answer:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">0x100       # .pos 0x100<br>0x100       30 f3 0f 00 00 00 00 00 00 00  # irmovq $15,%rbx <br>0x10a       20 31  # rrmovq %rbx,%rcx<br>0x10c       # loop:<br>0x10c       40 13 fd ff ff ff ff ff ff ff  # rmmovq %rcx,-3(%rbx)<br>0x116       60 31  # addq %rbx,%rcx<br>0x118       70 0c 01 00 00 00 00 00 00  # jmp loop<br></code></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>B. Randal, D. R. O’Hallaron, <em>Computer systems : a programmer’s perspective</em>, Third edition. Boston: Pearson, 2016.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Y86-64相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>Y86-64</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Y86-64</tag>
      
      <tag>Computer System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021 回顾 - 2021 Review</title>
    <link href="/2021/12/31/2021-review/"/>
    <url>/2021/12/31/2021-review/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>嗨，各位好。<br>今天是我来香港读书的第853天，两年零四个月。时光飞逝，2021年即将过去。这一年对于我来说是特别的一年，因此想用这篇文章回顾一下，并展望2022年，定下目标。<br><span id="more"></span><br>2021年最特别的事：</p><blockquote><p>结束了两年的副学士学习，并且开始了真正的大学4年本科学习生活。<br>（详情请见文章-<a href="https://ultrafish.cn/2021/07/04/second-year/">《第二年》</a>）</p></blockquote><hr><h1 id="2021-1"><a href="#2021-1" class="headerlink" title="2021.1"></a>2021.1</h1><p><strong>2021年年初</strong>，刚刚结束了上年年底多所学校的升学面试，之后每天都期待着面试的结果与录取通知。</p><p><strong>2021年1月18日，22日</strong>，终于，先后收到了<strong>香港浸会大学</strong>与<strong>香港理工大学</strong>的录取通知。</p><center><img src="/2021/12/31/2021-review/1.jpeg" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港浸会大学录取通知书</div></center><center><img src="/2021/12/31/2021-review/2.jpeg" width="40%" height="40%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港理工大学录取通知书</div></center><hr><h1 id="2021-2"><a href="#2021-2" class="headerlink" title="2021.2"></a>2021.2</h1><p><strong>2021年2月5日</strong>，副学士第二年第一学期成绩公布，<strong>学期GPA</strong>第一次跌下4.0，紧迫感油然而生。</p><center><img src="/2021/12/31/2021-review/3.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y2S1 GPA</div></center><hr><p><strong>2021年2月14日</strong>，拥有了人生第一台<strong>相机</strong> $SONY\alpha6400$，为我为数不多的兴趣充值。</p><center><img src="/2021/12/31/2021-review/4.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">SONY a6400</div></center><hr><p><strong>2021年2月18日</strong>，由于香港理工大学发放录取通知书太早，留给我做决定的时间又很少，其余学校的录取结果还迟迟不来。于是我<strong>选择了香港理工大学并给他们邮寄了签证申请的材料</strong>，这意味着就算其他学校之后再给我录取通知书，我只允许拿着由理大发的签证去理大读书。</p><center><img src="/2021/12/31/2021-review/5.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">邮寄存根</div></center><p>寄出的那一刻，感觉自己做了一个很大决定。这种感觉很微妙，很期待，但又充满了未知。</p><hr><h1 id="2021-4"><a href="#2021-4" class="headerlink" title="2021.4"></a>2021.4</h1><p><strong>2021年4月20日</strong>，为我的博客<a href="https://ultrafish.cn">UltraFish</a>创建了一个<strong>开发性页面</strong>-<a href="https://plus.ultrafish.cn">UltraFish Plus</a>。<br>跳出现成的框架，尝试一些<strong>可交互</strong>的内容。</p><blockquote><p>截止到本文章发布前，尝试了三个内容：<br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">浮点数表示方法 Floating point numbers representation (IEEE 754 single precision)</a><br><a href="https://plus.ultrafish.cn/Josephus-Problem">Python对约瑟夫问题的高效解决方法 Josephus Problem with Python</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">有符号二进制数表示方法 Signed binary number representation</a></p></blockquote><hr><h1 id="2021-5"><a href="#2021-5" class="headerlink" title="2021.5"></a>2021.5</h1><p><strong>2021年5月3日</strong>，完成了为期一年的<strong>毕业项目的演讲</strong>，这意味着两年的副学士学习要画上句号了。</p><center><img src="/2021/12/31/2021-review/6.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">毕业项目组员合影</div></center><hr><p><strong>2021年5月12日～27日</strong>，时隔近一年半，终于<strong>回到了内地</strong>，再经过两个星期的隔离，终于<strong>回到了家</strong>。</p><center><img src="/2021/12/31/2021-review/7.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">深圳隔离</div></center><center><img src="/2021/12/31/2021-review/8.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">回嘉</div></center><hr><h1 id="2021-6"><a href="#2021-6" class="headerlink" title="2021.6"></a>2021.6</h1><p><strong>2021年6月17日</strong>，收到了<strong>香港政府的Self-financing Post-secondary Scholarship Scheme(自资专上奖学金计划)</strong> 的全额奖学金。</p><center><img src="/2021/12/31/2021-review/13.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">奖学金</div></center><hr><p><strong>2021年6月18日</strong>，副学士第二年第二学期成绩公布，也是最后一个成绩，<strong>学期GPA</strong>又回到了4.0，给两年副学士成绩画上了圆满的句号。但皆为序章，还需努力。</p><center><img src="/2021/12/31/2021-review/12.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Y2S2 GPA</div></center><hr><h1 id="2021-7"><a href="#2021-7" class="headerlink" title="2021.7"></a>2021.7</h1><p><strong>2021年7月4日</strong>，我收到了香港入境事务处发来的<strong>签证</strong>，这意味着我真正成为了香港理工大学的学生。<br>于是我立即发表了文章-<a href="https://ultrafish.cn/2021/07/04/second-year/">《第二年》</a>，讲述了这两年多副学士的学习心路历程，并转发在我的朋友圈，取标题为 - 《什么？！你不是香港大学吗？怎么去香港理工大学了？》。向大家解释了我这一特殊又平凡的学习经历。</p><hr><p><strong>2021年7月27日</strong>，完成了博客<a href="https://ultrafish.cn/2021/07/27/blog3/">第三次版本大更新</a>。<br>包括，在<strong>UltraFish Plus</strong>上发布了<strong>第一个内容</strong>，给域名安装了<strong>SSL证书</strong>，以及更改了<strong>博客主题风格</strong>。</p><hr><h1 id="2021-8"><a href="#2021-8" class="headerlink" title="2021.8"></a>2021.8</h1><p>回家待了快3个月，<br><strong>2021年8月6日</strong>，前往深圳，<strong>准备回港</strong>。很不巧，由于内地疫情变化，根据当时政策，需要在香港居家隔离7天。</p><p><strong>2021年8月19日</strong>，搬进了<strong>香港理工大学学生宿舍</strong>，这是我第一次真正住进学校的宿舍。</p><center><img src="/2021/12/31/2021-review/9.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">宿舍</div></center><p><strong>2021年8月30日</strong>，开学，正式开始了我的<strong>本科4年的学习生活</strong>。<strong>31日</strong>，是我来香港的<strong>两周年</strong>。</p><hr><h1 id="2021-9-2021-12"><a href="#2021-9-2021-12" class="headerlink" title="2021.9-2021.12"></a>2021.9-2021.12</h1><p>在这一学期的学习中，学习了很多专业知识，深度和难度明显比副学士所学的提高了很多，对某些知识点也有了新的认识。<br>但也发现了自己的不足，改进了学习方法，不断尝试，不断调整。</p><p>对所学的有关知识，我也通过自学，总结和研究，发布了文章在我的博客中，如：</p><blockquote><p><strong>Java</strong>:<br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2-表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1-声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a></p><p><strong>Computational Thinking</strong>：<br><a href="https://ultrafish.cn/2021/11/04/domino-matching/">多米诺配对问题 Domino Matching with Python</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a></p><p><strong>Probability</strong>:<br><a href="https://ultrafish.cn/2021/12/12/probability-introduction-note/">Probability Introduction Note</a><br>数学中的概率是我在高中时最薄弱的内容，这学期数学第一次测验的失利也或多或少说明了这一点。但是<strong>克服恐惧最好的方法就是面对恐惧</strong>，我只能迎难而上，不断克服。</p></blockquote><hr><p><strong>2021年10月1日</strong>，国庆节，学校举行了 <strong><em>香港理工大学庆祝中华人民共和国成立七十二周年升旗仪式</em></strong>，久违的升国旗奏唱国歌。</p><center><img src="/2021/12/31/2021-review/14.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">升旗仪式</div></center><hr><p><strong>2021年11月18号</strong>，我们创客小组给2018年参加比赛获得冠军的作品申请的实用专利<strong>终于拿到了证书</strong>，实属不易。</p><center><img src="/2021/12/31/2021-review/11.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">一种多功能婴儿车 专利证书</div></center><hr><p><strong>2021年12月5日</strong>，<strong><em>东京2020奥运会内地奥运健儿与市民有约</em></strong> 活动在理大举行，有幸近距离看到了奥运健儿们。</p><center><img src="/2021/12/31/2021-review/10.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">马龙发言</div></center><hr><p><strong>2021年12月10日</strong>，第一学期正式结束，开始第二学期课程自学，总结成文章。<br>截止到本文章发布前，更新了相关文章：</p><blockquote><p><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a></p></blockquote><hr><h1 id="About-the-UltraFish"><a href="#About-the-UltraFish" class="headerlink" title="About the UltraFish"></a>About the UltraFish</h1><p>关于我的博客：<br>截止到本文章发布前，<strong>2021年</strong>我总共在我的博客UltraFish上发布了<strong>20</strong>篇<a href="https://ultrafish.cn/archives/">文章</a>，<strong>3</strong>个<a href="https://plus.ultrafish.cn">开发性页面</a>，<strong>1</strong>次博客<a href="https://ultrafish.cn/2021/07/27/blog3/">版本大更新</a>。</p><center><img src="/2021/12/31/2021-review/15.jpeg" width="60%" height="60%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">2021年文章数量</div></center><hr><h1 id="2022-Preview"><a href="#2022-Preview" class="headerlink" title="2022 Preview"></a>2022 Preview</h1><p><strong>2022年目标</strong>：</p><ul><li>[ ] <strong>保持长期健康及规律的饮食和睡眠</strong>。长期健康及规律的饮食和睡眠，辅以合适的运动与休息，是一切活动的基频(Fundamental Frequency)。</li><li>[ ] <strong>保持日程规划与反思</strong>。</li><li>[ ] <strong>保持高质量的学习</strong>。以<strong>原则</strong>为根本，以<strong>效率</strong>为基础，以<strong>质量</strong>为目标。</li><li>[ ] <strong>多阅读专业课程相关书籍，学习相关项目</strong>。学习，研究，并总结为博客文章。</li><li>[ ] <strong>提高博客更新频率</strong>。2022年至少更新<strong>30</strong>篇文章，多个开发性页面，继续维护网站。</li><li>[ ] <strong>参加一项课外活动</strong>。</li><li>[ ] <strong>拿到奖学金</strong>。</li><li>[ ] <strong>免隔离回到内地</strong>。希望香港与内地尽快通关，回家不用隔离。</li><li>[ ] <strong>进行年末总结并展望2023年</strong>。</li></ul><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2021回顾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R学习5-Graphics</title>
    <link href="/2021/12/24/R-learning-5/"/>
    <url>/2021/12/24/R-learning-5/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a></p></blockquote><hr><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>plot function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="1-1-High-level-graphics-function"><a href="#1-1-High-level-graphics-function" class="headerlink" title="1.1 High-level graphics function"></a>1.1 High-level graphics function</h2><blockquote><p>start a new graph, initialize graph window.</p></blockquote><p><code>plot()</code>: Plot function;</p><p><code>boxplot</code>: create box plot;</p><p><code>hist()</code>: create histogram;</p><p><code>qqnorm()</code>: Quantile-quantile(Q-Q) plot;</p><p><code>curve()</code>: function graph.</p><h2 id="1-2-Low-level-graphics-function"><a href="#1-2-Low-level-graphics-function" class="headerlink" title="1.2 Low-level graphics function"></a>1.2 Low-level graphics function</h2><blockquote><p>cannot start a new graph, add something to the graph, based on the High-level graphics function.</p></blockquote><p><code>points()</code>: add points;</p><p><code>lines()</code>: add lines;</p><p><code>abline</code>: add a straight line;</p><p><code>segments()</code>: add line segments;</p><p><code>polygon()</code>: add a closed polygon;</p><p><code>text()</code> add text.</p><blockquote><p>Call High-level graphics function first, then call the low one.</p></blockquote><hr><h1 id="2-Title-amp-Label"><a href="#2-Title-amp-Label" class="headerlink" title="2 Title &amp; Label"></a>2 Title &amp; Label</h1><p><strong>Parameter</strong>:</p><p><code>main</code>: set title;<br><code>xlab</code>: set x-axis label;<br><code>ylab</code>: set y-axis label.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;This is title&#x27;</span><span class="hljs-punctuation">,</span>xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x-lab&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;y-lab&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>OR<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>ann<span class="hljs-operator">=</span>False<span class="hljs-punctuation">)</span> <span class="hljs-comment"># ignore the annotation first</span><br><span class="hljs-operator">&gt;</span> title<span class="hljs-punctuation">(</span>main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;This is title&#x27;</span><span class="hljs-punctuation">,</span>xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x-lab&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;y-lab&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># use title() to set</span><br></code></pre></td></tr></table></figure></p><hr><h1 id="3-Grid"><a href="#3-Grid" class="headerlink" title="3 Grid"></a>3 Grid</h1><blockquote><ol><li>set <code>type=&quot;n&quot;</code> in <code>plot()</code> function to hide the graph;</li><li>use grid() function to show the grid;</li><li>use low-level functions to draw the graph again.</li></ol></blockquote><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;This is title&#x27;</span><span class="hljs-punctuation">,</span>xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x-lab&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;y-lab&#x27;</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> grid<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> points<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/2.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">grid()</div></center><hr><h1 id="4-Legend"><a href="#4-Legend" class="headerlink" title="4 Legend"></a>4 Legend</h1><p>legend function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">legend<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> labels<span class="hljs-punctuation">,</span> pch<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;type1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;type2&quot;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># Legend for points</span><br>legend<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> labels<span class="hljs-punctuation">,</span> lty<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;type1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;type2&quot;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># Legend for lines based on line type</span><br>legend<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> labels<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;type1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;type2&quot;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># Legend for lines based on line width</span><br>legend<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> labels<span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;type1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;type2&quot;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># Legend for colors</span><br></code></pre></td></tr></table></figure><p><code>x, y</code>: coordinates for legend box (top-left corner);<br><code>label</code>: vector of characters of legend;<br><em>last argument</em>: based on which species. </p><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;This is title&#x27;</span><span class="hljs-punctuation">,</span>xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x-lab&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;y-lab&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> legend<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;The Point&#x27;</span><span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/3.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">legend()</div></center><hr><h1 id="5-Scatter-Plot"><a href="#5-Scatter-Plot" class="headerlink" title="5 Scatter Plot"></a>5 Scatter Plot</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>x,y</code>: two parallel vectors.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>dfrm</code>: a two column data frame.</p><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">12</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><span class="hljs-number">16</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span><span class="hljs-number">60</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">25</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;xVal&#x27;</span><span class="hljs-operator">=</span>v1<span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;yVal&#x27;</span><span class="hljs-operator">=</span>v2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/1.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">plot(dfrm)</div></center><h2 id="5-1-Multiple-Group-Scatter-Plot"><a href="#5-1-Multiple-Group-Scatter-Plot" class="headerlink" title="5.1 Multiple-Group Scatter Plot"></a>5.1 Multiple-Group Scatter Plot</h2><p>Set <code>pch</code> parameter in <code>plot()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span>name<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Example</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm<br>   name xVal yVal<br><span class="hljs-number">1</span>     a    <span class="hljs-number">1</span>   <span class="hljs-number">12</span><br><span class="hljs-number">2</span>     a    <span class="hljs-number">2</span>   <span class="hljs-number">15</span><br><span class="hljs-number">3</span>     a    <span class="hljs-number">3</span>   <span class="hljs-number">16</span><br><span class="hljs-number">4</span>     a    <span class="hljs-number">4</span>    <span class="hljs-number">5</span><br><span class="hljs-number">5</span>     a    <span class="hljs-number">5</span>   <span class="hljs-number">30</span><br><span class="hljs-number">6</span>     b    <span class="hljs-number">6</span>   <span class="hljs-number">20</span><br><span class="hljs-number">7</span>     b    <span class="hljs-number">7</span>   <span class="hljs-number">50</span><br><span class="hljs-number">8</span>     b    <span class="hljs-number">8</span>   <span class="hljs-number">60</span><br><span class="hljs-number">9</span>     b    <span class="hljs-number">9</span>   <span class="hljs-number">10</span><br><span class="hljs-number">10</span>    b   <span class="hljs-number">10</span>   <span class="hljs-number">25</span><br><br><span class="hljs-operator">&gt;</span> with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>plot<span class="hljs-punctuation">(</span>xVal<span class="hljs-punctuation">,</span>yVal<span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span>name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>legend<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;for a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;for b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span>name<span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/4.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Multiple-Group</div></center><hr><h2 id="5-2-Regression-Line-of-Scatter-Plot"><a href="#5-2-Regression-Line-of-Scatter-Plot" class="headerlink" title="5.2 Regression Line of Scatter Plot"></a>5.2 Regression Line of Scatter Plot</h2><p>Use <code>lm()</code> and <code>abline()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> m <span class="hljs-operator">&lt;-</span> lm<span class="hljs-punctuation">(</span>v2<span class="hljs-operator">~</span>v1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>plot<span class="hljs-punctuation">(</span>xVal<span class="hljs-punctuation">,</span>yVal<span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span>name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>legend<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;for a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;for b&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>pch<span class="hljs-operator">=</span>name<span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> m <span class="hljs-operator">&lt;-</span> lm<span class="hljs-punctuation">(</span>v2<span class="hljs-operator">~</span>v1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/5.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Regression Line</div></center><hr><h1 id="6-Bar-Chart"><a href="#6-Bar-Chart" class="headerlink" title="6 Bar Chart"></a>6 Bar Chart</h1><p><code>barplot()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">barplot<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>height1<span class="hljs-punctuation">,</span>height2<span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> barplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Bar Chart&#x27;</span><span class="hljs-punctuation">,</span>names.arg<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;name&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;yVal&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># names.arg for the argument of x-axis</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/6.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Bar Chart</div></center><hr><h2 id="6-1-Coloring"><a href="#6-1-Coloring" class="headerlink" title="6.1 Coloring"></a>6.1 Coloring</h2><p><code>col</code> parameter of <code>barplot()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> barplot<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&#x27;red&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">barplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Bar Chart&#x27;</span><span class="hljs-punctuation">,</span>names.arg<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;name&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;yVal&#x27;</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;red&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/7.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Coloring</div></center><p><strong>Colour based on the data of graph:</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rel.hts <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span>v2 <span class="hljs-operator">-</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">/</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span> <span class="hljs-operator">-</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> grays <span class="hljs-operator">&lt;-</span> gray<span class="hljs-punctuation">(</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span> rel.hts<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> barplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">,</span> main<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Bar Chart&#x27;</span><span class="hljs-punctuation">,</span>names.arg<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            xlab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;name&#x27;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&#x27;yVal&#x27;</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span>grays<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/8.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Coloring</div></center><hr><h1 id="7-Line"><a href="#7-Line" class="headerlink" title="7 Line"></a>7 Line</h1><p>Use <code>plot()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/9.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Line</div></center><hr><h2 id="7-1-Line-Config"><a href="#7-1-Line-Config" class="headerlink" title="7.1 Line Config"></a>7.1 Line Config</h2><p><strong>Appearance of the line:</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;solid&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-punctuation">(</span>default<span class="hljs-punctuation">)</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;dashed&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">2</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;dotted&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">3</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;dotdash&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;longdash&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">5</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;twodash&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">6</span><br>lty<span class="hljs-operator">=</span><span class="hljs-string">&quot;blank&quot;</span> or lty<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-punctuation">(</span>inhibits drawing<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><strong>Width of the line:</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># default = 1</span><br></code></pre></td></tr></table></figure><p><strong>Colour of the line:</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># default = black</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-2-Multiple-Line"><a href="#7-2-Multiple-Line" class="headerlink" title="7.2 Multiple Line"></a>7.2 Multiple Line</h2><p>Use <code>xlim</code> and <code>ylim</code> to set the interval of graph first.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> xLim <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">range</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span>x2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> yLim <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">range</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>y1<span class="hljs-punctuation">,</span>y2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> xLim<span class="hljs-punctuation">,</span> ylim <span class="hljs-operator">=</span> yLim<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> lines<span class="hljs-punctuation">(</span>x2<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># then use low-level function to add another line</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-3-Vertical-amp-Horizontal-Line"><a href="#7-3-Vertical-amp-Horizontal-Line" class="headerlink" title="7.3 Vertical &amp; Horizontal Line"></a>7.3 Vertical &amp; Horizontal Line</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>v<span class="hljs-operator">=</span>a<span class="hljs-punctuation">)</span> <span class="hljs-comment"># vertical line at x = a</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>h<span class="hljs-operator">=</span>b<span class="hljs-punctuation">)</span> <span class="hljs-comment"># horizontal line at h = b</span><br></code></pre></td></tr></table></figure><p>For example:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>v<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>h<span class="hljs-operator">=</span><span class="hljs-number">40</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/10.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Vertical & Horizontal Line</div></center><hr><h1 id="8-Box-Plot"><a href="#8-Box-Plot" class="headerlink" title="8 Box Plot"></a>8 Box Plot</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> boxplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span> <span class="hljs-comment"># v2 is a numeric vector</span><br></code></pre></td></tr></table></figure><p>For example,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v2<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">12</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>  <span class="hljs-number">5</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">60</span> <span class="hljs-number">10</span> <span class="hljs-number">25</span><br><span class="hljs-operator">&gt;</span> boxplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/11.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Box Plot</div></center><h1 id="9-Histogram"><a href="#9-Histogram" class="headerlink" title="9 Histogram"></a>9 Histogram</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> hist<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span> <span class="hljs-comment"># v2 is a numeric vector</span><br></code></pre></td></tr></table></figure><p>For example:</p><center><img src="/2021/12/24/R-learning-5/12.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Histogram</div></center><hr><h2 id="9-1-Density-Estimated-Line"><a href="#9-1-Density-Estimated-Line" class="headerlink" title="9.1 Density Estimated Line"></a>9.1 Density Estimated Line</h2><p>Use the <code>density()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> hist<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">,</span>prob<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> lines<span class="hljs-punctuation">(</span>density<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/13.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Density Estimated Line</div></center><hr><h2 id="9-2-Discrete-Histogram"><a href="#9-2-Discrete-Histogram" class="headerlink" title="9.2 Discrete Histogram"></a>9.2 Discrete Histogram</h2><p>Use <code>plot()</code> function and set <code>type</code> parameter.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>table<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;h&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/14.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Discrete Histogram</div></center><hr><h1 id="10-Function-Graphics"><a href="#10-Function-Graphics" class="headerlink" title="10 Function Graphics"></a>10 Function Graphics</h1><p>Use <code>curve()</code> function:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> curve<span class="hljs-punctuation">(</span><span class="hljs-built_in">sin</span><span class="hljs-punctuation">,</span><span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/15.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">sin Graphics</div></center><p>OR</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> f <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><span class="hljs-operator">/</span>x<br><span class="hljs-operator">&gt;</span> curve<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">,</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>v<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> abline<span class="hljs-punctuation">(</span>h<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/16.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Function Graphics</div></center><hr><h1 id="11-Plot-Display"><a href="#11-Plot-Display" class="headerlink" title="11 Plot Display"></a>11 Plot Display</h1><p>Set <code>mfrow</code> parameter to divide the window into a Matrix,<br>then call <code>plot()</code> function to fill the window.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> par<span class="hljs-punctuation">(</span>mfrow<span class="hljs-operator">=</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>table<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;h&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>table<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;h&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> boxplot<span class="hljs-punctuation">(</span>v2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> plot<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><center><img src="/2021/12/24/R-learning-5/17.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Plot Display</div></center><blockquote><p><code>mfrow</code> parameter fills window <strong>row by row</strong>, while <code>mfcol</code> fills <strong>column by column</strong>.</p></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P. Teetor, <em>R Cookbook</em>. Sebastopol: O’Reilly Media, Incorporated, 2011.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>R语言相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R学习4-Data Frame</title>
    <link href="/2021/12/22/R-learning-4/"/>
    <url>/2021/12/22/R-learning-4/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a></p></blockquote><hr><h1 id="1-Creation-form-Column-Data"><a href="#1-Creation-form-Column-Data" class="headerlink" title="1 Creation form Column Data"></a>1 Creation form Column Data</h1><p>从列数据对象构造。</p><p>若转换对象为向量或者变量：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>v3<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><br><span id="more"></span><br>若为List：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> as.data.frame<span class="hljs-punctuation">(</span>l1<span class="hljs-punctuation">,</span>l2<span class="hljs-punctuation">,</span>l3<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">40</span><span class="hljs-punctuation">,</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v3 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">70</span><span class="hljs-punctuation">,</span><span class="hljs-number">80</span><span class="hljs-punctuation">,</span><span class="hljs-number">90</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>v3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm<br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>可添加列名：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;col1&#x27;</span><span class="hljs-operator">=</span>v1<span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;col2&#x27;</span><span class="hljs-operator">=</span>v2<span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;col3&#x27;</span><span class="hljs-operator">=</span>v3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm<br>  col1 col2 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span>   <span class="hljs-number">40</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span>   <span class="hljs-number">50</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span>   <span class="hljs-number">60</span>   <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure></p><hr><h1 id="2-Creation-form-Row-Data"><a href="#2-Creation-form-Row-Data" class="headerlink" title="2 Creation form Row Data"></a>2 Creation form Row Data</h1><p>从行数据对象构造。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> do.call<span class="hljs-punctuation">(</span>rbind<span class="hljs-punctuation">,</span>obs<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>rbind</code>方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> obs <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">,</span>v3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> rbind<span class="hljs-punctuation">(</span>obs<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">10</span>   <span class="hljs-number">20</span>   <span class="hljs-number">30</span><br><br><span class="hljs-operator">&gt;</span> rbind<span class="hljs-punctuation">(</span>obs<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>obs<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">10</span>   <span class="hljs-number">20</span>   <span class="hljs-number">30</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">40</span>   <span class="hljs-number">50</span>   <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>配合<code>do.call</code>方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> do.call<span class="hljs-punctuation">(</span>rbind<span class="hljs-punctuation">,</span>obs<span class="hljs-punctuation">)</span><br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">10</span>   <span class="hljs-number">20</span>   <span class="hljs-number">30</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">40</span>   <span class="hljs-number">50</span>   <span class="hljs-number">60</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">70</span>   <span class="hljs-number">80</span>   <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>若处理对象为List，需要先把对象转换：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> do.call<span class="hljs-punctuation">(</span>rbind<span class="hljs-punctuation">,</span>Map<span class="hljs-punctuation">(</span>as.data.frame<span class="hljs-punctuation">,</span>obs<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-Row-Appending"><a href="#3-Row-Appending" class="headerlink" title="3 Row Appending"></a>3 Row Appending</h1><p>首先需要构建一个行data frame，再把它添加到原有的data frame中去：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> newRow <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>col1<span class="hljs-operator">=</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span>col2<span class="hljs-operator">=</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span>col3<span class="hljs-operator">=</span><span class="hljs-number">300</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># new row creation</span><br><br><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> rbind<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>newRow<span class="hljs-punctuation">)</span> <span class="hljs-comment"># appending</span><br><span class="hljs-operator">&gt;</span> dfrm<br>  col1 col2 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span>   <span class="hljs-number">40</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span>   <span class="hljs-number">50</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span>   <span class="hljs-number">60</span>   <span class="hljs-number">90</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span>  <span class="hljs-number">200</span>  <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><p>也可以合在一起：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> rbind<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> data.frame<span class="hljs-punctuation">(</span>col1<span class="hljs-operator">=</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span>col2<span class="hljs-operator">=</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span>col3<span class="hljs-operator">=</span><span class="hljs-number">300</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h1 id="4-Preallocation"><a href="#4-Preallocation" class="headerlink" title="4 Preallocation"></a>4 Preallocation</h1><p>R可以预先分配Data Frame的结构。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 5<br><span class="hljs-operator">&gt;</span> df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>col1<span class="hljs-operator">=</span>numeric<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>col2<span class="hljs-operator">=</span>character<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>col3<span class="hljs-operator">=</span>numeric<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> df<br>  col1 col2 col3<br><span class="hljs-number">1</span>    <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br><span class="hljs-number">2</span>    <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br><span class="hljs-number">3</span>    <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br><span class="hljs-number">4</span>    <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br><span class="hljs-number">5</span>    <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-Column-Selection-by-Position"><a href="#5-Column-Selection-by-Position" class="headerlink" title="5 Column Selection by Position"></a>5 Column Selection by Position</h1><p><code>dfrm[[n]]</code>：选择第n列，并返回一个向量。</p><p><code>dfrm[c(n1,n2,n3,...)]</code>：返回指定几列，返回一个data frame。</p><p><code>dfrm[n]</code>：上述方法的特例，选择第n列，返回一个data frame。</p><p><code>dfrm[, n]</code>：选择第n列，并返回一个向量。</p><p><code>dfrm[, c(n1,n2,n3,...)]</code>：返回指定几列，返回一个data frame</p><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">10</span>  <span class="hljs-number">20</span>  <span class="hljs-number">30</span> <span class="hljs-number">100</span><br><br><span class="hljs-operator">&gt;</span> dfrm<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br>  col1<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span><br><br><span class="hljs-operator">&gt;</span> dfrm<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>  col1 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span>   <span class="hljs-number">90</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span>  <span class="hljs-number">300</span><br><br><span class="hljs-operator">&gt;</span> dfrm<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">40</span>  <span class="hljs-number">50</span>  <span class="hljs-number">60</span> <span class="hljs-number">200</span><br><br><span class="hljs-operator">&gt;</span> dfrm<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>  col2 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">40</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">50</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">60</span>   <span class="hljs-number">90</span><br><span class="hljs-number">4</span>  <span class="hljs-number">200</span>  <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><hr><h1 id="6-Column-Selection-by-Name"><a href="#6-Column-Selection-by-Name" class="headerlink" title="6 Column Selection by Name"></a>6 Column Selection by Name</h1><p>与上一节类似。</p><p><code>dfrm[[&quot;name&quot;]]</code>,<code>dfrm$name</code>：选择<code>name</code>列，并返回一个向量。</p><p><code>dfrm[c(&quot;name1&quot;,&quot;name2&quot;,&quot;name3&quot;,...)]</code>：返回指定几列，返回一个data frame。</p><p><code>dfrm[&quot;name&quot;]</code>：上述方法的特例，选择<code>name</code>列，返回一个data frame。</p><p><code>dfrm[, &quot;name&quot;]</code>：选择<code>name</code>列，并返回一个向量。</p><p><code>dfrm[, c(&quot;name1&quot;,&quot;name2&quot;,&quot;name3&quot;,...)]</code>：返回指定几列，返回一个data frame。</p><hr><h1 id="7-Column-amp-Row-Selection"><a href="#7-Column-amp-Row-Selection" class="headerlink" title="7 Column &amp; Row Selection"></a>7 Column &amp; Row Selection</h1><p>使用<code>subset()</code>方法。</p><h2 id="7-1-Row-Selection"><a href="#7-1-Row-Selection" class="headerlink" title="7.1 Row Selection"></a>7.1 Row Selection</h2><p>设置<code>select</code>参数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> select<span class="hljs-operator">=</span>colName<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> select<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>n1<span class="hljs-punctuation">,</span>n2<span class="hljs-punctuation">,</span>n3<span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm<br>  col1 col2 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span>   <span class="hljs-number">40</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span>   <span class="hljs-number">50</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span>   <span class="hljs-number">60</span>   <span class="hljs-number">90</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span>  <span class="hljs-number">200</span>  <span class="hljs-number">300</span><br><br><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> select<span class="hljs-operator">=</span>col1<span class="hljs-punctuation">)</span><br>  col1<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="7-2-Column-Selection"><a href="#7-2-Column-Selection" class="headerlink" title="7.2 Column Selection"></a>7.2 Column Selection</h2><p>设置<code>subset</code>参数，为<strong>逻辑表达式</strong>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> subset<span class="hljs-operator">=</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span> select<span class="hljs-operator">=</span>col1<span class="hljs-punctuation">,</span>subset<span class="hljs-operator">=</span><span class="hljs-punctuation">(</span>col1<span class="hljs-operator">&gt;</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  col1<br><span class="hljs-number">2</span>   <span class="hljs-number">20</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>此方法一般与上一节方法一起使用。</p><hr><h1 id="8-Column-Name-Changing"><a href="#8-Column-Name-Changing" class="headerlink" title="8 Column Name Changing"></a>8 Column Name Changing</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> colnames<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> newNames<br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm<br>  col1 col2 col3<br><span class="hljs-number">1</span>   <span class="hljs-number">10</span>   <span class="hljs-number">40</span>   <span class="hljs-number">70</span><br><span class="hljs-number">2</span>   <span class="hljs-number">20</span>   <span class="hljs-number">50</span>   <span class="hljs-number">80</span><br><span class="hljs-number">3</span>   <span class="hljs-number">30</span>   <span class="hljs-number">60</span>   <span class="hljs-number">90</span><br><span class="hljs-number">4</span>  <span class="hljs-number">100</span>  <span class="hljs-number">200</span>  <span class="hljs-number">300</span><br><br><span class="hljs-operator">&gt;</span> colnames<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;one&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;two&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm<br>  one two three<br><span class="hljs-number">1</span>  <span class="hljs-number">10</span>  <span class="hljs-number">40</span>    <span class="hljs-number">70</span><br><span class="hljs-number">2</span>  <span class="hljs-number">20</span>  <span class="hljs-number">50</span>    <span class="hljs-number">80</span><br><span class="hljs-number">3</span>  <span class="hljs-number">30</span>  <span class="hljs-number">60</span>    <span class="hljs-number">90</span><br><span class="hljs-number">4</span> <span class="hljs-number">100</span> <span class="hljs-number">200</span>   <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><hr><h1 id="9-Data-Frame-Editing"><a href="#9-Data-Frame-Editing" class="headerlink" title="9 Data Frame Editing"></a>9 Data Frame Editing</h1><ol><li>不重写方法：</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">edit<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> temp <span class="hljs-operator">&lt;-</span> edit<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> temp<br></code></pre></td></tr></table></figure><p>此方法不会对原有数据产生影响，会<strong>返回一个修改过后的数据</strong>。</p><p>会弹出修改界面：</p><center><img src="/2021/12/22/R-learning-4/1.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">R-edit()</div></center><hr><ol><li>重写方法：</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">fix<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>此方法是对<strong>原有数据进行修改</strong>，<strong>不能撤回</strong>！</p><p>会弹出修改界面：</p><center><img src="/2021/12/22/R-learning-4/2.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">R-fix()</div></center><hr><h1 id="10-NA-Removing"><a href="#10-NA-Removing" class="headerlink" title="10 NA Removing"></a>10 NA Removing</h1><p>移除data frame中的NA数据。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> na.omit<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rbind<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br><span class="hljs-number">4</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> na.omit<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><hr><h1 id="11-Column-Excluding-by-Name"><a href="#11-Column-Excluding-by-Name" class="headerlink" title="11 Column Excluding by Name"></a>11 Column Excluding by Name</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>select <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>colName<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>使用负号列名排除一列或几列数据，并返回data frame，不会对原数据有影响，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>select<span class="hljs-operator">=</span><span class="hljs-operator">-</span>v3<span class="hljs-punctuation">)</span><br>  v1 v2<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span><br><br><span class="hljs-operator">&gt;</span> dfrm<br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>可以一次排除多行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> subset<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>select<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span>v1<span class="hljs-punctuation">,</span><span class="hljs-operator">-</span>v3<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  v2<br><span class="hljs-number">1</span> <span class="hljs-number">40</span><br><span class="hljs-number">2</span> <span class="hljs-number">50</span><br><span class="hljs-number">3</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><hr><h1 id="12-Data-Frame-Combination"><a href="#12-Data-Frame-Combination" class="headerlink" title="12 Data Frame Combination"></a>12 Data Frame Combination</h1><h2 id="12-1-Column-Combination"><a href="#12-1-Column-Combination" class="headerlink" title="12.1 Column Combination"></a>12.1 Column Combination</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> cbind<span class="hljs-punctuation">(</span>dfrm1<span class="hljs-punctuation">,</span>dfrm2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm1 <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;v4&quot;</span><span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-number">110</span><span class="hljs-punctuation">,</span><span class="hljs-number">120</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm1<br>   v4<br><span class="hljs-number">1</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span> <span class="hljs-number">120</span><br><br><span class="hljs-operator">&gt;</span> dfrm3 <span class="hljs-operator">&lt;-</span> cbind<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>dfrm1<span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> dfrm3<br>  v1 v2 v3  v4<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><hr><h2 id="12-2-Row-Combination"><a href="#12-2-Row-Combination" class="headerlink" title="12.2 Row Combination"></a>12.2 Row Combination</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rbind<span class="hljs-punctuation">(</span>dfrm1<span class="hljs-punctuation">,</span>dfrm2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><span class="hljs-number">200</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> dfrm4 <span class="hljs-operator">&lt;-</span> rbind<span class="hljs-punctuation">(</span>dfrm3<span class="hljs-punctuation">,</span>v1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> dfrm4<br>   v1  v2  v3  v4<br><span class="hljs-number">1</span>  <span class="hljs-number">10</span>  <span class="hljs-number">40</span>  <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span>  <span class="hljs-number">20</span>  <span class="hljs-number">50</span>  <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span>  <span class="hljs-number">30</span>  <span class="hljs-number">60</span>  <span class="hljs-number">90</span> <span class="hljs-number">120</span><br><span class="hljs-number">4</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><hr><h1 id="13-Data-Frame-Merging"><a href="#13-Data-Frame-Merging" class="headerlink" title="13 Data Frame Merging"></a>13 Data Frame Merging</h1><p>基于相同的列名，或给予给定的列名，合并两个data frame，并返回。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> mf <span class="hljs-operator">&lt;-</span> merge<span class="hljs-punctuation">(</span>d1<span class="hljs-punctuation">,</span>d2<span class="hljs-punctuation">,</span>by<span class="hljs-operator">=</span><span class="hljs-string">&quot;mergeName&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm4<br>   v1  v2  v3  v4<br><span class="hljs-number">1</span>  <span class="hljs-number">10</span>  <span class="hljs-number">40</span>  <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span>  <span class="hljs-number">20</span>  <span class="hljs-number">50</span>  <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span>  <span class="hljs-number">30</span>  <span class="hljs-number">60</span>  <span class="hljs-number">90</span> <span class="hljs-number">120</span><br><span class="hljs-number">4</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span> <span class="hljs-number">200</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> dfrm<br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> merge<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>dfrm<span class="hljs-punctuation">)</span><br>  v1 v2 v3<br><span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span> <span class="hljs-number">20</span> <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span> <span class="hljs-number">30</span> <span class="hljs-number">60</span> <span class="hljs-number">90</span><br><br><span class="hljs-operator">&gt;</span> dfrm<br>  name v1 v2<br><span class="hljs-number">1</span>    A <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span>    B <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span>    C <span class="hljs-number">60</span> <span class="hljs-number">90</span><br><br><span class="hljs-operator">&gt;</span> dfrm3<br>  name v3 v4  v5<br><span class="hljs-number">1</span>    A <span class="hljs-number">10</span> <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span>    B <span class="hljs-number">20</span> <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span>    C <span class="hljs-number">30</span> <span class="hljs-number">90</span> <span class="hljs-number">120</span><br><br><span class="hljs-operator">&gt;</span> merge<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>dfrm3<span class="hljs-punctuation">,</span>by<span class="hljs-operator">=</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># given merge name</span><br>  name v1 v2 v3 v4  v5<br><span class="hljs-number">1</span>    A <span class="hljs-number">40</span> <span class="hljs-number">70</span> <span class="hljs-number">10</span> <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span>    B <span class="hljs-number">50</span> <span class="hljs-number">80</span> <span class="hljs-number">20</span> <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span>    C <span class="hljs-number">60</span> <span class="hljs-number">90</span> <span class="hljs-number">30</span> <span class="hljs-number">90</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><hr><h1 id="14-Data-Frame-Accessing"><a href="#14-Data-Frame-Accessing" class="headerlink" title="14 Data Frame Accessing"></a>14 Data Frame Accessing</h1><p>1.快速访问：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>colName<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm<br>  name v1 v2<br><span class="hljs-number">1</span>    A <span class="hljs-number">40</span> <span class="hljs-number">70</span><br><span class="hljs-number">2</span>    B <span class="hljs-number">50</span> <span class="hljs-number">80</span><br><span class="hljs-number">3</span>    C <span class="hljs-number">60</span> <span class="hljs-number">90</span><br><br><span class="hljs-operator">&gt;</span> with<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-string">&quot;C&quot;</span><br></code></pre></td></tr></table></figure><p>2.持续访问：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">attach<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>添加名称到搜索列表，无需提及data frame的名称即可访问其内容。</p><p>使用<code>detach()</code>方法从搜索列表中移除访问对象。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> attach<span class="hljs-punctuation">(</span>dfrm3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> name<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-string">&quot;C&quot;</span><br><br><span class="hljs-operator">&gt;</span> search<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># to show the search list</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.GlobalEnv&quot;</span>        <span class="hljs-string">&quot;dfrm3&quot;</span>             <span class="hljs-string">&quot;dfrm&quot;</span>             <br> <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:stats&quot;</span>     <span class="hljs-string">&quot;package:graphics&quot;</span>  <span class="hljs-string">&quot;package:grDevices&quot;</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:utils&quot;</span>     <span class="hljs-string">&quot;package:datasets&quot;</span>  <span class="hljs-string">&quot;package:methods&quot;</span>  <br><span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Autoloads&quot;</span>         <span class="hljs-string">&quot;package:base&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p><code>attach()</code>方法只是对数据的暂时拷贝，修改拷贝的数据不会对原数据有影响。因为只是在工作区创建了一个同名的本地变量，不会对原变量产生影响：</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> name<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-operator">&gt;</span> name <span class="hljs-operator">&lt;-</span> 0 <span class="hljs-comment"># edit to the copied data</span><br><span class="hljs-operator">&gt;</span> name<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0</span> <span class="hljs-comment"># changed</span><br><span class="hljs-operator">&gt;</span> dfrm3<br>  name v3 v4  v5 <span class="hljs-comment"># no change</span><br><span class="hljs-number">1</span>    A <span class="hljs-number">10</span> <span class="hljs-number">70</span> <span class="hljs-number">100</span><br><span class="hljs-number">2</span>    B <span class="hljs-number">20</span> <span class="hljs-number">80</span> <span class="hljs-number">110</span><br><span class="hljs-number">3</span>    C <span class="hljs-number">30</span> <span class="hljs-number">90</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><blockquote></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P. Teetor, <em>R Cookbook</em>. Sebastopol: O’Reilly Media, Incorporated, 2011.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>R语言相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R学习3-Vector List Matrix</title>
    <link href="/2021/12/21/R-learning-3/"/>
    <url>/2021/12/21/R-learning-3/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a></p></blockquote><hr><h1 id="1-Vector"><a href="#1-Vector" class="headerlink" title="1 Vector"></a>1 Vector</h1><p>在<a href="https://ultrafish.cn/2021/12/17/R-learning-1/">之前的文章</a>中提过，向量(Vector)是R的核心组成部分。<br><span id="more"></span></p><h2 id="1-1-Vector-Appending"><a href="#1-1-Vector-Appending" class="headerlink" title="1.1 Vector Appending"></a>1.1 Vector Appending</h2><p>两种方式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>addItem<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>addItem 可以为单个元素，也可以一个Vector。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> addItem<br></code></pre></td></tr></table></figure><p>此方法适用于加上一个单独的元素。</p><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span> v<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>第二种方法中，如下标超出向量范围也不会报错，R会自动用NA填充中间的缺失元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">15</span><br><span class="hljs-operator">&gt;</span> v<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><hr><h2 id="1-2-Vector-Inserting"><a href="#1-2-Vector-Inserting" class="headerlink" title="1.2 Vector Inserting"></a>1.2 Vector Inserting</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> append<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>insertItem<span class="hljs-punctuation">,</span>after<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>此方法在<code>v</code>向量第<code>after</code>位后插入<code>insertItem</code>元素，<strong>并返回一个新的向量</strong>。<br>若<code>after</code>为0，则插到向量开头。如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> append<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span> <span class="hljs-number">10</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span> append<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><hr><h1 id="2-List"><a href="#2-List" class="headerlink" title="2 List"></a>2 List</h1><p>List不同于Vector，List可以包含多种类型的元素，与大多数编程语言类似。</p><h2 id="2-1-List-Creation"><a href="#2-1-List-Creation" class="headerlink" title="2.1 List Creation"></a>2.1 List Creation</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>也可以创建空的List，后续添加元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>也可以在创建List的时候为其元素命名，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>one<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>two<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>three<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-operator">$</span>one<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-operator">$</span>two<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">$</span>three<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-2-List-Position-Indexing"><a href="#2-2-List-Position-Indexing" class="headerlink" title="2.2 List Position Indexing"></a>2.2 List Position Indexing</h2><p>两种方式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[[</span>n<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>选择第n位元素，并<strong>返回一个元素</strong>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>选择规定下标的元素，<strong>返回一个List</strong>。</p><blockquote><p>  <code>l[n]</code><br>    为第二种方法的特殊情况，也返回一个List，只包含第n位元素。</p></blockquote><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return an element</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return a List</span><br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># return a List</span><br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-3-List-Name-Indexing"><a href="#2-3-List-Name-Indexing" class="headerlink" title="2.3 List Name Indexing"></a>2.3 List Name Indexing</h2><p>三种方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;itemName&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>返回名为<code>itemName</code>的元素，若不存在则返回<code>NULL</code>.<br>(此方法有别于<code>l[&quot;itemName&quot;]</code>，类似于上节。)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-operator">$</span>itemName<br></code></pre></td></tr></table></figure><p>返回名为<code>itemName</code>的元素，若不存在则返回<code>NULL</code>.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>itemName1<span class="hljs-punctuation">,</span>itemName2<span class="hljs-punctuation">,</span>itemName3<span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>根据规定的名字返回一个List。</p><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>one<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>two<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>three<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-operator">$</span><span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">$</span>one<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-operator">$</span>three<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="2-4-Key-Value-List"><a href="#2-4-Key-Value-List" class="headerlink" title="2.4 Key-Value List"></a>2.4 Key-Value List</h2><p>类似于Dictionary, HashTable等。</p><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>one<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>two<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>three<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-operator">$</span>one<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-operator">$</span>two<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">$</span>three<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-operator">$</span>one<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-operator">$</span>two<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">$</span>three<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以通过key访问其对应的value，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="2-5-List-Element-Removing"><a href="#2-5-List-Element-Removing" class="headerlink" title="2.5 List Element Removing"></a>2.5 List Element Removing</h2><p>通过给元素赋值为<code>NULL</code>，即可移除此元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[[</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-operator">$</span>two<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-operator">$</span>three<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>或者一次移除多个元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-operator">$</span>one<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="2-6-Convert-List-to-Vector"><a href="#2-6-Convert-List-to-Vector" class="headerlink" title="2.6 Convert List to Vector"></a>2.6 Convert List to Vector</h2><p>由于一些方法只接受向量类型的参数，因此需要把List转换成Vector，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> ul <span class="hljs-operator">&lt;-</span> unlist<span class="hljs-punctuation">(</span>l<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br><br><span class="hljs-operator">&gt;</span> ul <span class="hljs-operator">&lt;-</span> unlist<span class="hljs-punctuation">(</span>l<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> ul<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="2-7-List-NULL-Element-Removing"><a href="#2-7-List-NULL-Element-Removing" class="headerlink" title="2.7 List NULL Element Removing"></a>2.7 List NULL Element Removing</h2><p>移除List中的NULL元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span>sapply<span class="hljs-punctuation">(</span>l<span class="hljs-punctuation">,</span> <span class="hljs-built_in">is.null</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> nl <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> nl<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-literal">NULL</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br><br><span class="hljs-operator">&gt;</span> nl<span class="hljs-punctuation">[</span>sapply<span class="hljs-punctuation">(</span>nl<span class="hljs-punctuation">,</span><span class="hljs-built_in">is.null</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span> nl<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="2-8-List-Element-Conditionally-Removing"><a href="#2-8-List-Element-Conditionally-Removing" class="headerlink" title="2.8 List Element Conditionally Removing"></a>2.8 List Element Conditionally Removing</h2><p>可以通过条件语句来移除某一或某些元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">l<span class="hljs-punctuation">[</span>CON<span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br><br><span class="hljs-operator">&gt;</span> l<span class="hljs-punctuation">[</span>l<span class="hljs-operator">&lt;</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span> l<br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-Matrix"><a href="#3-Matrix" class="headerlink" title="3 Matrix"></a>3 Matrix</h1><h2 id="3-1-Matrix-Creation"><a href="#3-1-Matrix-Creation" class="headerlink" title="3.1 Matrix Creation"></a>3.1 Matrix Creation</h2><p>两种方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>m<span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span>  <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>基于向量v，创建一个m*n的矩阵。</p><blockquote><p>注意：<br>此矩阵是默认<strong>逐列</strong>构造的</p></blockquote><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> m <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> m<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br><br><span class="hljs-operator">&gt;</span> zerom <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> zerom<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><br><span class="hljs-operator">&gt;</span> nam <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> nam<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span>   <span class="hljs-literal">NA</span><br></code></pre></td></tr></table></figure><p>如要逐行构造，需设置<code>byrow</code>参数为<code>TRUE</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rowm <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>byrow<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> rowm<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>第二种方法是直接把向量转化为矩阵，更加快捷，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="3-2-Matrix-Operation"><a href="#3-2-Matrix-Operation" class="headerlink" title="3.2 Matrix Operation"></a>3.2 Matrix Operation</h2><p><code>t(A)</code>: Matrix transposition of A</p><p><code>solve(A)</code>: Matrix inverse of A</p><p><code>A %*% B</code>: Matrix multiplication of A and B</p><p><code>A * B</code>: Element-wise multiplication of A and B</p><p><code>diag(A)</code>: An n-by-n diagonal <strong>identity</strong> matrix</p><h2 id="3-3-Matrix-Row-Column-Naming"><a href="#3-3-Matrix-Row-Column-Naming" class="headerlink" title="3.3 Matrix Row Column Naming"></a>3.3 Matrix Row Column Naming</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">rownames<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;name1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;name2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;name3&#x27;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><br>colnames<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;name1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;name2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;name3&#x27;</span><span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> m<br>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>    <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span> rownames<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> colnames<span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> m<br>    one two three<br>one   <span class="hljs-number">1</span>   <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br>two   <span class="hljs-number">2</span>   <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>可以通过行名和列名访问对应的元素，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> m<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="3-4-Matrix-Row-Column-Selecting"><a href="#3-4-Matrix-Row-Column-Selecting" class="headerlink" title="3.4 Matrix Row Column Selecting"></a>3.4 Matrix Row Column Selecting</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> m<span class="hljs-punctuation">[</span>a<span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># ath row</span><br><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> m<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">]</span> <span class="hljs-comment"># bth column</span><br></code></pre></td></tr></table></figure><p>以上两个方法返回的是向量，若要返回单行矩阵或者单列矩阵，则需设置<code>drop</code>参数为<code>FALSE</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> vm <span class="hljs-operator">&lt;-</span> m<span class="hljs-punctuation">[</span>a<span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># ath row</span><br><span class="hljs-operator">&gt;</span> vm <span class="hljs-operator">&lt;-</span> m<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span> <span class="hljs-comment"># bth column</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> m<br>    one two three<br>one   <span class="hljs-number">1</span>   <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br>two   <span class="hljs-number">2</span>   <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br><br><span class="hljs-operator">&gt;</span> m<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br>  one   two three <br>    <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span> <br><span class="hljs-operator">&gt;</span> m<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br>one two <br>  <span class="hljs-number">3</span>   <span class="hljs-number">4</span> <br><br><span class="hljs-operator">&gt;</span> m<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br>    one two three<br>one   <span class="hljs-number">1</span>   <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span> m<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br>    two<br>one   <span class="hljs-number">3</span><br>two   <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P. Teetor, <em>R Cookbook</em>. Sebastopol: O’Reilly Media, Incorporated, 2011.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>R语言相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Basic Note</title>
    <link href="/2021/12/18/Python-basic-note/"/>
    <url>/2021/12/18/Python-basic-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><hr><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p>Course note of <strong>COMP1002 Computational Thinking and Problem Solving</strong>, The Hong Kong Polytechnic University, 2021.</p><hr><h1 id="1-Identifiers"><a href="#1-Identifiers" class="headerlink" title="1. Identifiers"></a>1. Identifiers</h1><blockquote><p>Begin with a <strong>letter or underscore (“_”)</strong>, CAN NOT start with <strong>digits</strong>;<br>Followed by any sequence of <strong>letters</strong>, <strong>digits</strong>, or <strong>underscores(“_”)</strong> ;<br> “-”, “.” and many other symbols are not allowed;<br><strong>Case sensitive</strong>;<br>CANNOT be Python’s keywords<br><span id="more"></span><br><img src="/2021/12/18/Python-basic-note/py-keywords.png" alt="Python’s keywords"></p></blockquote><hr><h1 id="2-Basic-Data-Types"><a href="#2-Basic-Data-Types" class="headerlink" title="2. Basic Data Types"></a>2. Basic Data Types</h1><h2 id="2-1-Rounding-functions"><a href="#2-1-Rounding-functions" class="headerlink" title="2.1 Rounding functions"></a>2.1 Rounding functions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-comment">#1</span><br><span class="hljs-built_in">round</span>(x,n) <span class="hljs-comment"># built-in （“四舍五入” 不完全是）round to n decimal places</span><br><span class="hljs-comment">#2</span><br>math.ceil(x) <span class="hljs-comment"># round up</span><br>math.ceil(<span class="hljs-number">4.5</span>) = <span class="hljs-number">5</span><br><span class="hljs-comment">#3</span><br>math.floor(x) <span class="hljs-comment"># round down</span><br>math.floor(<span class="hljs-number">5.45</span>) = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>When using the floating point number representation, most decimal fractions can’t be represented exactly as a float, there may be infinite 0 and 1s.</strong></p></blockquote><h2 id="2-2-String"><a href="#2-2-String" class="headerlink" title="2.2 String"></a>2.2 String</h2><ol><li><p>Expressed inside <strong>double quotes or single quotes</strong>, usually single quote for char, double quote for string, but both ok.</p></li><li><p>A string can be empty. </p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">ord</span>() <span class="hljs-comment"># returns the numeric (ordinal) code of a single character</span><br><span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>) = <span class="hljs-number">65</span><br> <br><span class="hljs-built_in">chr</span>() <span class="hljs-comment"># converts a numeric code to the corresponding character</span><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>) = <span class="hljs-string">&#x27;A&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>ASCII table<br><img src="/2021/12/18/Python-basic-note/ascii.png" alt></p></li><li><p>Escape character</p></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">Code</th><th style="text-align:center">Result</th></tr></thead><tbody><tr><td style="text-align:center">\‘</td><td style="text-align:center">Single Quote</td></tr><tr><td style="text-align:center">\“</td><td style="text-align:center">Double Quote</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">New Line</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">Tab</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">Carriage Return</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">Backspace</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">Form Feed</td></tr><tr><td style="text-align:center">\\</td><td style="text-align:center">Backslash</td></tr><tr><td style="text-align:center">\ooo</td><td style="text-align:center">ASCII character represented by $ooo_{oct}$, e.g. “\063” = “3”. </td></tr><tr><td style="text-align:center">\xhh</td><td style="text-align:center">ASCII character represented by $hh_{hex}$, e.g. “\x41” = “A”. </td></tr><tr><td style="text-align:center">\uhhhh</td><td style="text-align:center">Unicode character represented by $hhhh_{hex}$, e.g. “\u2190” = “&lt;-“,“\u5927” = “⼤”, “\u3042” = “あ”, “\u3184” = “ㆄ”.</td></tr></tbody></table></div><h2 id="2-3-Expression"><a href="#2-3-Expression" class="headerlink" title="2.3 Expression"></a>2.3 Expression</h2><ol><li><p>Simultaneous Assignment</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 RHS and assign them to the variables on the LHS. </span><br>&lt;var&gt;, &lt;var&gt;, … = &lt;expr&gt;, &lt;expr&gt;, … <br><span class="hljs-comment"># 2</span><br>x, y = y, x <span class="hljs-comment"># swap</span><br><span class="hljs-comment"># 3</span><br><span class="hljs-built_in">sum</span>, diff = x+y, x-y <br><span class="hljs-comment"># 4</span><br>x, y = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input the first and second numbers separated by a comma: &quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p>Expressions Print</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>+<span class="hljs-string">&quot;B&quot;</span>+<span class="hljs-string">&quot;C&quot;</span>)<br>ABC<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>)<br>A B C<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure></li><li><p>Python built-in numeric operations</p></li></ol><p><img src="/2021/12/18/Python-basic-note/built-in-unm-op.png" alt="Python built-in numeric operations"></p><ol><li>Operator precedence and associativity</li></ol><p><img src="/2021/12/18/Python-basic-note/op-pre-asso.png" alt="Operator precedence and associativity"></p><h2 id="2-4-Data-types"><a href="#2-4-Data-types" class="headerlink" title="2.4 Data types"></a>2.4 Data types</h2><ol><li> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-built_in">type</span>(x) <span class="hljs-comment"># returns the data type of x which could be a literal or variable. </span><br><br><span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">float</span>(x) <span class="hljs-comment"># explicit type conversion</span><br><br><span class="hljs-comment"># [Example]</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">2.2</span>) <span class="hljs-comment"># OK</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;22&quot;</span>) <span class="hljs-comment"># OK</span><br><span class="hljs-number">22</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;2.2&quot;</span>) <span class="hljs-comment"># Error!</span><br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: invalid literal <span class="hljs-keyword">for</span> <span class="hljs-built_in">int</span>() <span class="hljs-keyword">with</span> base <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;2.2&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">2</span>) <span class="hljs-comment"># OK</span><br><span class="hljs-number">2.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">1.2</span>) <span class="hljs-comment"># OK </span><br><span class="hljs-number">1.2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;2.2&quot;</span>) <span class="hljs-comment"># OK!</span><br><span class="hljs-number">2.2</span><br></code></pre></td></tr></table></figure></li><li> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-built_in">eval</span>() <span class="hljs-comment"># The arguments are a string</span><br><span class="hljs-comment"># The expression argument is parsed and evaluated as a Python expression</span><br><br><span class="hljs-comment">#[Example]</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1.2&quot;</span>)<br><span class="hljs-number">1.2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1+2&quot;</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-number">1</span>)<br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-built_in">eval</span>() arg <span class="hljs-number">1</span> must be a string, <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">or</span> code <span class="hljs-built_in">object</span><br><span class="hljs-comment"># must be a String</span><br><br>x, y = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input the first and second numbers separated by a comma: &quot;</span>))<br><span class="hljs-comment"># can not use int()</span><br></code></pre></td></tr></table></figure></li><li> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6</span>+<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>+<span class="hljs-number">3.0</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; <span class="hljs-comment"># !!!</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>+<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.00</span>+<span class="hljs-number">3.00</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6</span>*<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>*<span class="hljs-number">3.0</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>*<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6</span>/<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; <span class="hljs-comment"># !!!</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>/<span class="hljs-number">3.0</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-number">6.0</span>/<span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; <span class="hljs-comment"># !!!</span><br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="3-Condition"><a href="#3-Condition" class="headerlink" title="3. Condition"></a>3. Condition</h1><p>boolean value: <code>True</code>, <code>False</code>, both in upper case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">True</span>))<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">False</span>))<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol><li>Relational Operators</li></ol><p>Can be used for <strong>Number comparison</strong> and <strong>Lexicographical ordering for string comparison</strong></p><p><img src="/2021/12/18/Python-basic-note/relation-op.png" alt="Relational Operators"></p><ol><li><p><code>in</code> operator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>] <br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>] <br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>] <br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>] <br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;peter paul and mary&quot;</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;p&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;peter paul and mary&quot;</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li><li><p>Boolean operators<br><img src="/2021/12/18/Python-basic-note/boolean-op.png" alt="Boolean operators"></p></li><li><p>Operator Precedence<br><img src="/2021/12/18/Python-basic-note/op-pre-2.png" alt="Operator Precedence"></p></li></ol><hr><h1 id="4-Iteration"><a href="#4-Iteration" class="headerlink" title="4. Iteration"></a>4. Iteration</h1><p>for loop:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;var&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;: <br>&lt;body&gt;<br></code></pre></td></tr></table></figure></p><p>while loop:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;condition&gt;:<br>&lt;body&gt;<br></code></pre></td></tr></table></figure></p><ol><li><code>range(10)</code>: [0,10)<blockquote><p>range (<strong>inclusive start</strong>, <strong>exclusive stop</strong>, <strong>step</strong>)</p></blockquote></li></ol><p><code>break</code>: immediately exit the deepest enclosing loop;<br><code>continue</code>: immediately skip the current time of loop, go to the next time of loop;</p><ol><li>Post-test loop<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">repeat<br><span class="hljs-comment"># do sth</span><br>until x &gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>NO post-test loop in Python.</li></ol><hr><h1 id="5-String-Data-Type"><a href="#5-String-Data-Type" class="headerlink" title="5. String Data Type"></a>5. String Data Type</h1><ol><li><p>String</p><blockquote><p>a sequence of characters enclosed within quotation marks (“) or apostrophes (‘).<br>String object are <strong>immutable</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">myName = <span class="hljs-string">&quot;Dennis Liu&quot;</span> <br>myName[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment"># Error!</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>String indexing<br> First character is indexed by 0,<br> <code>&lt;string&gt;[&lt;expr&gt;]</code>:value of <code>expr</code> determines which character is selected from the <code>string</code></p></li><li><p>String slicing<br> <code>&lt;string&gt;[&lt;start&gt;:&lt;end&gt;]</code>: [inclusive start, exclusive end)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>[:<span class="hljs-number">5</span>] = <span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br>   <span class="hljs-built_in">str</span>[<span class="hljs-number">5</span>:] = <span class="hljs-built_in">str</span>[<span class="hljs-number">5</span>:&lt;end&gt;]<br><br>   <span class="hljs-comment">#start from left to end at right</span><br><br><span class="hljs-built_in">str</span>[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]√<br>   <span class="hljs-built_in">str</span>[-<span class="hljs-number">1</span>:-<span class="hljs-number">3</span>]x<br><br><span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]√<br><span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>:<span class="hljs-number">1</span>]x<br></code></pre></td></tr></table></figure></li><li><p>String operations<br><img src="/2021/12/18/Python-basic-note/str-op.png" alt="String operations"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Liu&#x27;</span><br>  <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">7</span>] <span class="hljs-comment"># Error!</span><br>IndexError: string index out of <span class="hljs-built_in">range</span><br>  <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">7</span>] <span class="hljs-comment"># OK!</span><br><span class="hljs-string">&#x27;Liu&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">7</span>:] <span class="hljs-comment"># OK!</span><br><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>String methods</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">split()<br>lower()<br>upper()<br>append()<br>capitalize()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>student = <span class="hljs-string">&quot;first_name last_names student_ID&quot;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>student.split()<br>[<span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_names&#x27;</span>, <span class="hljs-string">&#x27;student_ID&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>student.lower()<br><span class="hljs-string">&#x27;first_name last_names student_id&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>student.upper()<br><span class="hljs-string">&#x27;FIRST_NAME LAST_NAMES STUDENT_ID&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>student.capitalize()<br><span class="hljs-string">&#x27;First_name last_names student_id&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="6-String-formatting"><a href="#6-String-formatting" class="headerlink" title="6. String formatting"></a>6. String formatting</h1><p><code>&quot;&#123;&lt;index&gt;:&lt;width&gt;.&lt;precision&gt;&lt;type&gt;&#125;&quot;.format(&lt;values&gt;)</code></p><ul><li><code>index</code>: indicate <strong>which</strong> parameter to insert here</li><li><code>width</code>: the <strong>number of spaces </strong>for printing the parameter </li><li><code>precision</code>: the number of <strong>decimal places</strong></li><li><code>f</code>: will print out 0 to <strong>fill up</strong> the number of decimal places.</li></ul><p><img src="/2021/12/18/Python-basic-note/py-format.png" alt="String formatting"></p><hr><h1 id="7-List"><a href="#7-List" class="headerlink" title="7. List"></a>7. List</h1><blockquote><p>a sequence(order) of arbitrary objects of any date type</p></blockquote><ol><li>List operations</li></ol><p><img src="/2021/12/18/Python-basic-note/list-op.png" alt="List operations"></p><ol><li><p>Common Sequence Operations<br><img src="/2021/12/18/Python-basic-note/commmon-seq-op.png" alt="Common Sequence Operations"></p></li><li><p>Turning a list into a string</p><blockquote><p><code>s.join(list)</code>: concatenate <code>list</code> into a string, using <code>s</code> as a <strong>separator</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-string">&quot;Hong-Va&quot;</span>, <span class="hljs-string">&quot;Leong&quot;</span>] <br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;Dennis Liu&quot;</span>.join(aList) <br><span class="hljs-string">&#x27;Hong-VaDennis LiuLeong&#x27;</span><br>  <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot; &quot;</span>.join(aList)<br><span class="hljs-string">&#x27;Hong-Va Leong&#x27;</span><br>  <br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&quot;</span>.join(aList)<br><span class="hljs-string">&#x27;ABCD&#x27;</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><hr><h1 id="8-Tuple"><a href="#8-Tuple" class="headerlink" title="8. Tuple"></a>8. Tuple</h1><ol><li><p>An <strong><em>immutable</em></strong> linear data structure(has order).</p></li><li><p>Tuples of one element <strong>must include a comma</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">1</span>,)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>(<span class="hljs-number">1</span>,)<br></code></pre></td></tr></table></figure></li><li><p><strong>NO</strong> <code>append()</code>, <code>insert()</code>, <code>sort()</code>, <code>reverse()</code>, and <code>del()</code> on a tuple</p></li></ol><hr><h1 id="9-Dictionary"><a href="#9-Dictionary" class="headerlink" title="9. Dictionary"></a>9. Dictionary</h1><ol><li>A <code>dictionary</code> is a <strong>mutable</strong>, associative data structure of variable length.</li></ol><ul><li>The <strong>key</strong> can be of any <strong>immutable</strong> type. </li><li>The <strong>values</strong> can be of <strong>any type</strong> and are unordered.</li></ul><ol><li>Dictionary operators<br><img src="/2021/12/18/Python-basic-note/dic-op.png" alt="Dictionary operators"></li></ol><p><code>items()</code>: Returns all the key-values pairs as a list of tuples, <code>&lt;class &#39;dict_items&#39;&gt;</code><br><code>keys()</code>: Returns all the keys as a list, <code>&lt;class &#39;dict_keys&#39;&gt;</code><br><code>values()</code>: Returns all the values as a list, <code>&lt;class &#39;dict_values&#39;&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dictA = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&quot;c&quot;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dictA.items()<br>dict_items([(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>)])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dictA.keys()<br>dict_keys([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dictA.values()<br>dict_values([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br></code></pre></td></tr></table></figure><p>Returns are <strong>view object</strong> and <strong>iterable</strong>.</p><hr><h1 id="10-Set"><a href="#10-Set" class="headerlink" title="10. Set"></a>10. Set</h1><ol><li>A <strong>mutable</strong> collection of <strong>non-mutable objects</strong> which are elements of the set. </li><li>Element: any <strong>non-mutable types</strong> (<strong>Numbers, strings, tuples</strong> are allowed, but NOT <strong>lists or sets</strong>)</li><li><strong>NO order</strong> in set.</li><li><strong>NO duplicate</strong> elements.</li><li><p>Empty set: <code>set()</code>, NOT <code>&#123;&#125;</code> (a empty dictionary)</p></li><li><p>Set operator<br><img src="/2021/12/18/Python-basic-note/set-op.png" alt="Set operator"></p><p><code>|</code> = <code>intersection()</code><br><code>&amp;</code> = <code>union()</code><br><code>-</code> = <code>difference()</code><br><code>^</code> = <code>symmetric_difference()</code></p></li></ol><hr><h1 id="11-Function"><a href="#11-Function" class="headerlink" title="11. Function"></a>11. Function</h1><ol><li>non-value-returning function</li></ol><blockquote><p><strong>no <code>return</code></strong> statement, but has <strong>side effect</strong><br><strong>side effect</strong> is an action other than returning a function value, such as displaying output on the screen</p></blockquote><ol><li><p>value-returning function</p><blockquote><p>has <code>return</code> statement</p></blockquote></li><li><p>allows a function to return more than one value (in terms of a <code>tuple</code>) </p></li><li>Positional and keyword arguments<blockquote><p><strong>positional argument</strong>: based on the <strong>position</strong> in the argument list;<br><strong>keyword argument</strong>:  specified by parameter <strong>name</strong></p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f(parameter = argument)<br>f(x = <span class="hljs-number">1</span>) <span class="hljs-comment"># keyword argument</span><br>f(<span class="hljs-number">1</span>) <span class="hljs-comment"># positional argument</span><br><br>f(na,n2,n3)<br>f(n1=<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># Error: SyntaxError: positional argument follows keyword argument</span><br>f(n1=<span class="hljs-number">1</span>,n2=<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># Error </span><br>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,n3=<span class="hljs-number">3</span>) <span class="hljs-comment"># OK</span><br></code></pre></td></tr></table></figure><ol><li><p>The use of <strong>global variables</strong> is considered <strong>BAD</strong> programming practice.</p></li><li><p>docstring</p></li></ol><p><code>function_name.__doc__</code> to get the docstring of a function.</p><blockquote><p>a string literal denoted by <strong>triple quotes</strong> used in Python for providing the specification of certain program elements.<br>MUST be indented at the <strong>same level</strong>.<br>The <strong>first block</strong> of quoted text to appear in the module. </p></blockquote><hr><h1 id="12-File-Processing"><a href="#12-File-Processing" class="headerlink" title="12. File Processing"></a>12. File Processing</h1><p><code>file = open(&quot;test.txt&quot;,&quot;r&quot;)</code></p><p><img src="/2021/12/18/Python-basic-note/open-mode.png" alt></p><p>  <code>&lt;filevar&gt;.read()</code>: </p><ul><li>returns the <strong>entire remaining contents</strong> of the file as a single (possibly large, multi-line) <strong>string</strong>.</li></ul><p><code>&lt;filevar&gt;.readline()</code>: </p><ul><li>returns the <strong>just one next line</strong> of the file. This is all text up to and <strong>including the next newline character</strong>.</li></ul><p><code>&lt;filevar&gt;.readlines()</code>: </p><ul><li>returns a <strong>list</strong> of the <strong>remaining lines</strong> in<br>the file. Each list <strong>item is a single line</strong> including the <strong>newline characters</strong>.</li></ul><p><code>&lt;filevar&gt;.close()</code></p><ul><li>It is important to close the file.</li></ul><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Slides of COMP1002 Computational Thinking and Problem Solving, The Hong Kong Polytechnic University</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Python</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python Note</tag>
      
      <tag>Basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R学习2-I/O</title>
    <link href="/2021/12/18/R-learning-2/"/>
    <url>/2021/12/18/R-learning-2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a></p></blockquote><hr><h1 id="1-Formatted-Print"><a href="#1-Formatted-Print" class="headerlink" title="1 Formatted Print"></a>1 Formatted Print</h1><h2 id="1-1-print"><a href="#1-1-print" class="headerlink" title="1.1 print()"></a>1.1 <code>print()</code></h2><p><code>print(x,digits=y)</code></p><p><code>digits</code>参数用来声明有多少位数字，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.141593</span><br><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">,</span>digits<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="1-2-cat"><a href="#1-2-cat" class="headerlink" title="1.2 cat()"></a>1.2 <code>cat()</code></h2><p>在<code>cat()</code>中先使用<code>format()</code>方法声明其digits参数，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> cat<span class="hljs-punctuation">(</span>format<span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">,</span>digits<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><h2 id="1-3-options"><a href="#1-3-options" class="headerlink" title="1.3 options()"></a>1.3 <code>options()</code></h2><p>使用此方法会改变工作区内所有输出的格式，因此并不推荐使用，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">pi</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.141593</span><br><span class="hljs-operator">&gt;</span> options<span class="hljs-punctuation">(</span>digits<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">pi</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><hr><h1 id="2-Write-to-File"><a href="#2-Write-to-File" class="headerlink" title="2 Write to File"></a>2 Write to File</h1><p><code>&gt; cat(&quot;something to write&quot;, file=&quot;filename&quot;)</code></p><p>此方法默认重写文件，若要在原文件后面加上内容，需要设置<code>append</code>参数为<code>TRUE</code>，如下：</p><p><code>&gt; cat(&quot;something to write&quot;, file=&quot;filename&quot;, append=TRUE)</code></p><p>或者可以使用变量名代替文件名，方便多次使用，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">f <span class="hljs-operator">&lt;-</span> file<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename.txt&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;w&quot;</span><span class="hljs-punctuation">)</span><br>cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;something to write&quot;</span><span class="hljs-punctuation">,</span> file<span class="hljs-operator">=</span>f<span class="hljs-punctuation">)</span><br>cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;write something&quot;</span><span class="hljs-punctuation">,</span> file<span class="hljs-operator">=</span>f<span class="hljs-punctuation">)</span><br>close<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>此方法默认<code>append=TRUE</code>。</p><p>或者使用<strong>有参</strong><code>sink()</code>方法，可以使所有的<code>print</code>和<code>cat</code>方法输出到指定的文件内，完成输出后，使用<strong>无参</strong><code>sink()</code>方法，可以关闭输出文件并恢复输出到console，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> sink<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># Begin write to file</span><br>...<br><span class="hljs-comment"># write something</span><br>...<br><span class="hljs-operator">&gt;</span> sink<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># End writing to file, back to console</span><br></code></pre></td></tr></table></figure><blockquote><p>若要查看当前目录下有哪些文件，使用<code>&gt; list.files()</code>来查看，<br>或者<code>&gt; list.files(all.files=TRUE)</code>来查看包括<strong>隐藏</strong>的所有文件。</p></blockquote><hr><h1 id="3-Read-from-Fixed-Width-File"><a href="#3-Read-from-Fixed-Width-File" class="headerlink" title="3 Read from Fixed-Width File"></a>3 Read from Fixed-Width File</h1><p>使用<code>read.fwf()</code>方法，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> records <span class="hljs-operator">&lt;-</span> read.fwf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-punctuation">,</span> widths<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>w1<span class="hljs-punctuation">,</span> w2<span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> wn<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br>Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br>Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br>Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br>Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> records <span class="hljs-operator">&lt;-</span> read.fwf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;fixed-width.txt&quot;</span><span class="hljs-punctuation">,</span> widths<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> records<br>V1 V2 V3 V4<br><span class="hljs-number">1</span> Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br><span class="hljs-number">2</span> Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br><span class="hljs-number">3</span> Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br><span class="hljs-number">4</span> Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br><span class="hljs-number">5</span> Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><blockquote><p>此处的-1表示忽略宽度为1的列.</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> records <span class="hljs-operator">&lt;-</span> read.fwf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;fixed-width.txt&quot;</span><span class="hljs-punctuation">,</span> widths<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br><span class="hljs-operator">+</span> col.names<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Last&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;First&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Born&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Died&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> records<br>Last First Born Died<br><span class="hljs-number">1</span> Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br><span class="hljs-number">2</span> Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br><span class="hljs-number">3</span> Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br><span class="hljs-number">4</span> Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br><span class="hljs-number">5</span> Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><p>亦可设置<code>col.names</code>属性，为输出加上标题，如上。</p><hr><h1 id="4-Read-from-Table"><a href="#4-Read-from-Table" class="headerlink" title="4 Read from Table"></a>4 Read from Table</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>被读取文件需满足：</p><blockquote><ol><li>一行为一条记录；</li><li>一行中的数据由一个字符隔开，如space,tab,colon,comma.</li><li>每一行由相同的单元数量。</li></ol></blockquote><p>如：</p><p>Data：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br>Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br>Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br>Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br>Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;statisticians.txt&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br>V1 V2 V3 V4<br><span class="hljs-number">1</span> Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br><span class="hljs-number">2</span> Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br><span class="hljs-number">3</span> Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br><span class="hljs-number">4</span> Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br><span class="hljs-number">5</span> Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><p>输出的表格会自动带上行号列号。</p><p>可以通过行号列号访问到对应的单元，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>dfrm<span class="hljs-operator">$</span>V1<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;factor&quot;</span><br></code></pre></td></tr></table></figure><p>此方法会对<code>NA</code>数据直接输出为”NA”, 若要自定义，则可以修改<code>na.strings</code>属性，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename.txt&quot;</span><span class="hljs-punctuation">,</span> na.strings<span class="hljs-operator">=</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>若被读取的数据自带标题行，则可以通过设置<code>header</code>属性为<code>TRUE</code>，使输出结果使用自带的标题行，如下：</p><p>Data:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">lastname firstname born died<br>Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br>Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br>Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br>Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br>Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> dfrm <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;statisticians.txt&quot;</span><span class="hljs-punctuation">,</span> header<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> stringsAsFactor<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span>dfrm<span class="hljs-punctuation">)</span><br>lastname firstname born died<br><span class="hljs-number">1</span> Fisher R.A. <span class="hljs-number">1890</span> <span class="hljs-number">1962</span><br><span class="hljs-number">2</span> Pearson Karl <span class="hljs-number">1857</span> <span class="hljs-number">1936</span><br><span class="hljs-number">3</span> Cox Gertrude <span class="hljs-number">1900</span> <span class="hljs-number">1978</span><br><span class="hljs-number">4</span> Yates Frank <span class="hljs-number">1902</span> <span class="hljs-number">1994</span><br><span class="hljs-number">5</span> Smith Kirstine <span class="hljs-number">1878</span> <span class="hljs-number">1939</span><br></code></pre></td></tr></table></figure><p>此方法会自动忽略被读文件中被’#’修饰的注释行。</p><hr><h1 id="5-Read-from-CSV"><a href="#5-Read-from-CSV" class="headerlink" title="5 Read from CSV"></a>5 Read from CSV</h1><p>若CSV文件有标题行，则：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> tbl <span class="hljs-operator">&lt;-</span> read.csv<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><p>若无标题行，则：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> tbl <span class="hljs-operator">&lt;-</span> read.csv<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filename&quot;</span>，header<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><p>类似于<code>read.table(&quot;filename&quot;)</code>方法，也会忽略注释行，若不要忽略，则设置参数<code>comment.char=&quot;&quot;</code>。</p><hr><h1 id="6-Write-to-CSV"><a href="#6-Write-to-CSV" class="headerlink" title="6 Write to CSV"></a>6 Write to CSV</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> write.csv<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> file<span class="hljs-operator">=</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-punctuation">,</span> row.names<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>设置<code>row.names=FALSE</code>，取消行标题的显示。否则显示为设置的名字，默认为数字。<br>设置<code>col.names=FALSE</code>，取消列标题的显示。</p><blockquote><p><strong>注意：此方法只能重写原文件，不能在原来文件后加上内容。</strong><br><strong>若有此需求，使用<code>write.table()</code>方法。</strong></p></blockquote><hr><h1 id="7-Read-from-Web"><a href="#7-Read-from-Web" class="headerlink" title="7 Read from Web"></a>7 Read from Web</h1><p>R可以从网络上读取txt，csv等文件，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> tbl <span class="hljs-operator">&lt;-</span> read.csv<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;http://www.example.com/download/data.csv&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> tbl <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ftp://ftp.example.com/download/data.txt&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h1 id="8-Read-from-HTML"><a href="#8-Read-from-HTML" class="headerlink" title="8 Read from HTML"></a>8 Read from HTML</h1><p>R可以从网络上读取HTML文件，需要用到<code>XML</code>包，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> library<span class="hljs-punctuation">(</span>XML<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> url <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&#x27;http://www.example.com/data/table.html&#x27;</span><br><span class="hljs-operator">&gt;</span> tbls <span class="hljs-operator">&lt;-</span> readHTMLTable<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>并且可以设置此方法的which属性来选取读取的页数，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> tbl <span class="hljs-operator">&lt;-</span> readHTMLTable<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">,</span> which<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h1 id="9-Complex-Reading"><a href="#9-Complex-Reading" class="headerlink" title="9 Complex Reading"></a>9 Complex Reading</h1><h2 id="9-1-readLines"><a href="#9-1-readLines" class="headerlink" title="9.1 readLines()"></a>9.1 <code>readLines()</code></h2><p>此方法从文件中读取每一行，并将其返回成字符串数组，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> lines <span class="hljs-operator">&lt;-</span> readLines<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;file.txt&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>也可以设置具体的读取行数，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> lines <span class="hljs-operator">&lt;-</span> readLines<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;file.txt&quot;</span><span class="hljs-punctuation">,</span> n<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="9-2-scan"><a href="#9-2-scan" class="headerlink" title="9.2 scan()"></a>9.2 <code>scan()</code></h2><p>此方法可以返回包括满足要求的片段列表，如下：</p><p>Data:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-number">2355.09</span> <span class="hljs-number">2246.73</span> <span class="hljs-number">1738.74</span> <span class="hljs-number">1841.01</span> <span class="hljs-number">2027.85</span><br></code></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> singles <span class="hljs-operator">&lt;-</span> scan<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;singles.txt&quot;</span><span class="hljs-punctuation">,</span> what<span class="hljs-operator">=</span>numeric<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> singles<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2355.09</span> <span class="hljs-number">2246.73</span> <span class="hljs-number">1738.74</span> <span class="hljs-number">1841.01</span> <span class="hljs-number">2027.85</span><br></code></pre></td></tr></table></figure><p>第二个<code>what</code>参数用作规定读取的片段内容，如下：</p><blockquote><p><code>what=numeric(0)</code>: number.<br><code>what=integer(0)</code>: integer.<br><code>what=complex(0)</code>: complex number.<br><code>what=character(0)</code>: character string.<br><code>what=logical(0)</code>: logical value.</p></blockquote><p>此方法也有其他的参数可以设置，如下：</p><blockquote><p><code>n=number</code>:<br>Stop after reading this many tokens. (Default: stop at end of file.)</p><p><code>nlines=number</code>:<br>Stop after reading this many input lines. (Default: stop at end of file.)</p><p><code>skip=number</code>:<br>Number of input lines to skip before reading data.</p><p><code>na.strings=list</code>:<br>A list of strings to be interpreted as NA.</p></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P. Teetor, <em>R Cookbook</em>. Sebastopol: O’Reilly Media, Incorporated, 2011.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>R语言相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R学习1-基础</title>
    <link href="/2021/12/17/R-learning-1/"/>
    <url>/2021/12/17/R-learning-1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/17/R-learning-1/">R学习1-基础</a><br><a href="https://ultrafish.cn/2021/12/18/R-learning-2/">R学习2-I/O</a><br><a href="https://ultrafish.cn/2021/12/21/R-learning-3/">R学习3-Vector List Matrix</a><br><a href="https://ultrafish.cn/2021/12/22/R-learning-4/">R学习4-Data Frame</a><br><a href="https://ultrafish.cn/2021/12/24/R-learning-5/">R学习5-Graphics</a></p></blockquote><hr><h1 id="1-R-Start"><a href="#1-R-Start" class="headerlink" title="1 R Start"></a>1 R Start</h1><p><a href="https://www.r-project.org/">R: The R Project for Statistical Computing官网地址: https://www.r-project.org/</a><br><span id="more"></span></p><blockquote><ol><li>进入网站后点击 <strong>CRAN</strong>；</li><li>选择对应地区的mirror，如：<a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/">TUNA Team, Tsinghua University</a></li><li>下载对应系统的安装包并安装。</li><li>打开R应用，显示R Console界面，如下图：</li></ol></blockquote><center><img src="/2021/12/17/R-learning-1/1.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">R Console</div></center><p>输入命令后按下回车，测试如下：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><p>在R中，输出的结果为向量(Vector)，上述例子中结果为只有一个元素向量，因此结果<code>2</code>被标记为<code>[1]</code>，指向量的第一个元素。</p><hr><h1 id="2-Print-Out"><a href="#2-Print-Out" class="headerlink" title="2 Print Out"></a>2 Print Out</h1><p>在输入完命令后按下回车，R会自动调用<code>print()</code>方法来输出结果在console中，用户也可以使用<code>print()</code>或者<code>cat()</code>方法来输出。</p><h2 id="2-1-print"><a href="#2-1-print" class="headerlink" title="2.1 print()"></a>2.1 <code>print()</code></h2><p>如下：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.141593</span><br></code></pre></td></tr></table></figure></p><p>但是<code>print()</code>方法有限制，其一次只能输出一个对象，不支持同时输出多个对象，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;pi&quot;</span><span class="hljs-punctuation">)</span><br>Error <span class="hljs-keyword">in</span> print.default<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;pi&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> invalid printing digits <span class="hljs-operator">-</span><span class="hljs-number">2147483648</span><br>In addition<span class="hljs-operator">:</span> Warning message<span class="hljs-operator">:</span><br>In print.default<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;pi&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> NAs introduced by coercion<br><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pi is: &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">)</span><br>Error <span class="hljs-keyword">in</span> print.default<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pi is: &quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">pi</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> invalid <span class="hljs-string">&#x27;quote&#x27;</span> argument<br></code></pre></td></tr></table></figure><p>如要输出多个对象，则可以使用多个<code>print()</code>语句，并用分号(;)隔开:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> print<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pi is: &quot;</span><span class="hljs-punctuation">)</span>;print<span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">)</span>;print<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;pi is: &quot;</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.141593</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.&quot;</span><br></code></pre></td></tr></table></figure><p>另一种方法就是使用<code>cat()</code>方法。</p><hr><h2 id="2-2-cat"><a href="#2-2-cat" class="headerlink" title="2.2 cat()"></a>2.2 <code>cat()</code></h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pi is:&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">pi</span><span class="hljs-operator">*</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">pi</span> is<span class="hljs-operator">:</span> <span class="hljs-number">6.283185</span> . <br></code></pre></td></tr></table></figure><p>此方法可以把多个对象结合起来连续输出，注意<code>cat()</code>方法输出时默认用空格隔开每个对象，并不是换行符(\n), 因此建议在此输出方法末尾加上换行符(\n)。</p><hr><h1 id="3-Variables"><a href="#3-Variables" class="headerlink" title="3 Variables"></a>3 Variables</h1><h2 id="3-1-Assignment"><a href="#3-1-Assignment" class="headerlink" title="3.1 Assignment"></a>3.1 Assignment</h2><ol><li>变量赋值符:<code>&lt;-</code> （由一个less-than character<code>&lt;</code> 和 hyphen<code>-</code>连接而成，<strong>中间无空格</strong>）</li></ol><p>如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> 1<br>y <span class="hljs-operator">&lt;-</span> 2<span class="hljs-operator">^</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>变量无需定义即可赋值</p><ol><li>强变量赋值符: <code>&lt;&lt;-</code><br>如：</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;&lt;-</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>此符号把变量值赋值给一个全局变量(global variable)，而不是局部变量(local variable)</p><blockquote><p>注意：<br><code>=</code>和<code>-&gt;</code>符号也支持变量的赋值，但是并不推荐使用，前者容易和<strong>比较符</strong>产生歧义，后者在表达式过长时不便于阅读。</p></blockquote><hr><h2 id="3-2-List-Variables"><a href="#3-2-List-Variables" class="headerlink" title="3.2 List Variables"></a>3.2 List Variables</h2><p>使用<code>ls()</code>或<code>ls.str()</code>方法来列出目前工作区定义了那些变量和方法。</p><h3 id="3-2-1-ls"><a href="#3-2-1-ls" class="headerlink" title="3.2.1 ls()"></a>3.2.1 <code>ls()</code></h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 1<br><span class="hljs-operator">&gt;</span> y <span class="hljs-operator">&lt;-</span> 2<br><span class="hljs-operator">&gt;</span> z <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> f <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">)</span> n<span class="hljs-operator">^</span><span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-string">&quot;z&quot;</span><br></code></pre></td></tr></table></figure><p>此方法会返回一个字符串向量，包含了定义的<strong>变量名和方法名</strong>。<br>若工作区内没有定义的变量名或者方法名，则：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>character<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="3-2-2-ls-str"><a href="#3-2-2-ls-str" class="headerlink" title="3.2.2 ls.str()"></a>3.2.2 <code>ls.str()</code></h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> ls.str<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>f <span class="hljs-operator">:</span> <span class="hljs-keyword">function</span> <span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">)</span>  <br>x <span class="hljs-operator">:</span>  num <span class="hljs-number">1</span><br>y <span class="hljs-operator">:</span>  num <span class="hljs-number">2</span><br>z <span class="hljs-operator">:</span>  num <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>此方法除返回名字外，也会返回变量的值。</p><p>但是<code>ls()</code>方法不会返回名字以点(.)开头的变量，如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> .var <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-string">&quot;z&quot;</span><br></code></pre></td></tr></table></figure><p>如需要返回所有变量，则需要设置<code>ls()</code>的<code>all.name</code>参数为<code>TRUE</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span>all.names<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.Random.seed&quot;</span> <span class="hljs-string">&quot;.var&quot;</span>         <span class="hljs-string">&quot;f&quot;</span>            <span class="hljs-string">&quot;x&quot;</span>            <span class="hljs-string">&quot;y&quot;</span>            <span class="hljs-string">&quot;z&quot;</span>   <br></code></pre></td></tr></table></figure><hr><h2 id="3-3-Remove-Variables"><a href="#3-3-Remove-Variables" class="headerlink" title="3.3 Remove Variables"></a>3.3 Remove Variables</h2><p><code>rm()</code>方法可以从工作区移除不需要的变量或者方法，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> rm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x<br>Error<span class="hljs-operator">:</span> object <span class="hljs-string">&#x27;x&#x27;</span> not found<br><br><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-string">&quot;z&quot;</span><br><span class="hljs-operator">&gt;</span> rm<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> y<br>Error<span class="hljs-operator">:</span> object <span class="hljs-string">&#x27;y&#x27;</span> not found<br><span class="hljs-operator">&gt;</span> z<br>Error<span class="hljs-operator">:</span> object <span class="hljs-string">&#x27;z&#x27;</span> not found<br></code></pre></td></tr></table></figure><p>变量或方法一旦被移除，则不可以撤回。</p><p>也可以设置<code>rm()</code>方法的<code>list</code>参数为<code>ls()</code>，则可以移除整个工作区的变量以及方法，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 1<br><span class="hljs-operator">&gt;</span> y <span class="hljs-operator">&lt;-</span> 2<br><span class="hljs-operator">&gt;</span> z <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>character<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意！</strong><br><strong>谨慎使用<code>rm(list=ls())</code>方法。</strong><br><strong>不要在分享给他人的R文件中使用此方法，会有删除全部内容的风险！</strong></p></blockquote><hr><h1 id="4-Vector-Creation"><a href="#4-Vector-Creation" class="headerlink" title="4 Vector Creation"></a>4 Vector Creation</h1><p><strong>向量(Vector)</strong>是R的核心组成部分，其可以包含数字，字符串，逻辑值，但不可以是混合体。</p><p>使用<code>c(...)</code>语句可以初始化一个向量，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>也可以通过此语句合并两个向量，组成一个新的向量，如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> vc <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>v2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> vc<br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>若用户尝试合并两个不同类型的向量，则R会尝试把它们转换成相同类型的向量，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> b <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">c</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">c</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;1&quot;</span>     <span class="hljs-string">&quot;2&quot;</span>     <span class="hljs-string">&quot;3&quot;</span>     <span class="hljs-string">&quot;one&quot;</span>   <span class="hljs-string">&quot;two&quot;</span>   <span class="hljs-string">&quot;three&quot;</span><br></code></pre></td></tr></table></figure><p>上面例子中，R就把numeric的123转换成了character类型。</p><p>使用<code>mode()</code>方法可以查看变量的类型，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> mode<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;character&quot;</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-Basic-Statistics"><a href="#5-Basic-Statistics" class="headerlink" title="5 Basic Statistics"></a>5 Basic Statistics</h1><p>R中一些基础的数据分析方法：</p><p><code>mean()</code>：计算均值<br><code>median()</code>：计算中位数<br><code>sd()</code>：计算标准差<br><code>var()</code>：计算方差</p><p>如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span> mean<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.428571</span><br><span class="hljs-operator">&gt;</span> median<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span> sd<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1.718249</span><br><span class="hljs-operator">&gt;</span> var<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2.952381</span><br></code></pre></td></tr></table></figure><p>若数据中出现了<code>NA</code>(not available)，可能会造成方法返回<code>NA</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> n <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> n<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span> mean<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">NA</span><br></code></pre></td></tr></table></figure><p>可以设置上述几个方法的<code>na.rm</code>属性为<code>TRUE</code>，以让R忽略<code>NA</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> n <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> n<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span> mean<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span>na.rm<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.428571</span><br></code></pre></td></tr></table></figure><hr><h1 id="6-Sequences"><a href="#6-Sequences" class="headerlink" title="6 Sequences"></a>6 Sequences</h1><h2 id="6-1-n-m-expression"><a href="#6-1-n-m-expression" class="headerlink" title="6.1 n:m expression"></a>6.1 <code>n:m</code> expression</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span><span class="hljs-operator">:</span><span class="hljs-number">0</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span>  <span class="hljs-number">9</span>  <span class="hljs-number">8</span>  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>  <span class="hljs-number">5</span>  <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><br> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span> <span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span>  <span class="hljs-number">9</span>  <span class="hljs-number">8</span>  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>  <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>此方法的步长只能为1或-1。</p><h2 id="6-2-seq-function"><a href="#6-2-seq-function" class="headerlink" title="6.2 seq()function"></a>6.2 <code>seq()</code>function</h2><p>此方法有三个参数，规定起点，终点以及步长，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> seq<span class="hljs-punctuation">(</span>from<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>to<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>by<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span> seq<span class="hljs-punctuation">(</span>from<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>to<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>by<span class="hljs-operator">=</span><span class="hljs-operator">-</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者可以规定序列的长度，R会自动计算出适合的步长，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> seq<span class="hljs-punctuation">(</span>from<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>to<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>length.out<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10.0</span>  <span class="hljs-number">5.5</span>  <span class="hljs-number">1.0</span><br><span class="hljs-operator">&gt;</span> seq<span class="hljs-punctuation">(</span>from<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>to<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>length.out<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1.00</span>  <span class="hljs-number">3.25</span>  <span class="hljs-number">5.50</span>  <span class="hljs-number">7.75</span> <span class="hljs-number">10.00</span><br><span class="hljs-operator">&gt;</span> seq<span class="hljs-punctuation">(</span>from<span class="hljs-operator">=</span><span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span>to<span class="hljs-operator">=</span><span class="hljs-number">10.5</span><span class="hljs-punctuation">,</span>length.out<span class="hljs-operator">=</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">3.3</span>  <span class="hljs-number">5.1</span>  <span class="hljs-number">6.9</span>  <span class="hljs-number">8.7</span> <span class="hljs-number">10.5</span><br></code></pre></td></tr></table></figure><p>小数也适用起点与终点。</p><h2 id="6-3-rep-function"><a href="#6-3-rep-function" class="headerlink" title="6.3 rep()function"></a>6.3 <code>rep()</code>function</h2><p>此方法会重复输出指明的值，并返回一个向量，如下：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>numeric<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">pi</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3.141593</span> <span class="hljs-number">3.141593</span> <span class="hljs-number">3.141593</span><br></code></pre></td></tr></table></figure></p><hr><h1 id="7-Comparing"><a href="#7-Comparing" class="headerlink" title="7 Comparing"></a>7 Comparing</h1><p>R中的比较符有<code>==,!=,&lt;,&gt;,&lt;=,&gt;=</code>，比较表达式返回<code>TRUE</code>或者<code>FALSE</code>。</p><p>可以进行单个值之间的比较，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><span class="hljs-operator">&lt;</span><span class="hljs-number">2</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-operator">==</span><span class="hljs-number">1</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">pi</span> <span class="hljs-operator">!=</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">pi</span><span class="hljs-operator">==</span><span class="hljs-built_in">pi</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">==</span> x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">pi</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>也可以进行向量间的比较，返回一个布尔类型的向量，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">==</span>b<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">!=</span>b<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">&lt;</span>b<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">&gt;</span>b<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>也可以进行向量和单个值的比较，R会让单个值逐个和向量中的元素进行比较，返回一个布尔类型的向量，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">==</span> x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">&lt;</span>x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">&gt;</span>x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> a<span class="hljs-operator">!=</span>x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span><br></code></pre></td></tr></table></figure><p><code>any</code>方法：<br>向量中存在任何一个<code>TRUE</code>就返回<code>TRUE</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">any</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">==</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">any</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">&lt;</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p><code>all</code>方法：<br>向量中所有都为<code>TRUE</code>才返回<code>TRUE</code>，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> x <span class="hljs-operator">&lt;-</span> 3<br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">all</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">==</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">all</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">==</span>a<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><hr><h1 id="8-Vector-Elements"><a href="#8-Vector-Elements" class="headerlink" title="8 Vector Elements"></a>8 Vector Elements</h1><blockquote><p><strong>注意：</strong><br><strong>在R中，向量的下标从1开始，不是0！</strong></p></blockquote><ol><li><p><code>v[x]</code></p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><br>numeric<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[n:m]</code><br>为闭区间，两端都包括。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>若想访问向量的第1位到第n+1位元素，应为<code>v[1:(n+1)]</code>，并不是<code>v[1:n+1]</code>。</p></blockquote></li></ol><ol><li><p><code>v[c(a,b,c,...)]</code><br>通过<strong>data vector</strong>访问。</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[-x]</code><br>忽略某些元素。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p><code>v[x&lt;y]</code><br>通过逻辑表达式选取，若<code>TRUE</code>则选取，若<code>FALSE</code>则忽略。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span>v<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span> v<span class="hljs-punctuation">[</span>v <span class="hljs-operator">%%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure></li><li><p><code>names()</code><br> 通过<code>names()</code>方法，给某一向量的元素加上<code>names</code>属性，并通过此属性访问到对应的值。</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> value <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>value<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;two&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> value<br>  one   two three <br>    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span> <br><span class="hljs-operator">&gt;</span> value<span class="hljs-punctuation">[</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">]</span><br>one <br>  <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> value<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;one&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;three&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>  one three <br>    <span class="hljs-number">1</span>     <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="9-Operator-Precedence"><a href="#9-Operator-Precedence" class="headerlink" title="9 Operator Precedence"></a>9 Operator Precedence</h1><center><img src="/2021/12/17/R-learning-1/2.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Operator precedence - P. Teetor, R Cookbook</div></center><blockquote><p>自上而下为<strong>高优先级</strong>至<strong>低优先级</strong></p></blockquote><hr><h1 id="10-Functions"><a href="#10-Functions" class="headerlink" title="10 Functions"></a>10 Functions</h1><p>R中有自定义函数，语法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>p1<span class="hljs-punctuation">,</span>p2<span class="hljs-punctuation">,</span>...<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    expr1<br>    expr2<br>    ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> v <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> addOne <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-built_in">return</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> addOne<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span> addOne<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>可以使用lapply()方法调用方法，如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> lapply<span class="hljs-punctuation">(</span>v<span class="hljs-punctuation">,</span>addOne<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br><br><span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><hr><h1 id="11-R-Editor-Window"><a href="#11-R-Editor-Window" class="headerlink" title="11 R Editor Window"></a>11 R Editor Window</h1><p>除了在R的console中编辑代码，也可以在编辑窗口中全部编写完成再运行，如下：</p><blockquote><p>新建一个编辑窗口，输入全部代码；<br>鼠标放在某一行，按下cmd+enter，执行此行代码；<br>或选中某几行或全部代码，按下cmd+enter，执行选中的代码。</p></blockquote><center><img src="/2021/12/17/R-learning-1/3.png" width="60%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">R Editor Window</div></center><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P. Teetor, <em>R Cookbook</em>. Sebastopol: O’Reilly Media, Incorporated, 2011.</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>初次接触R语言，相关的知识会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Limits and Continuity Note</title>
    <link href="/2021/12/14/limits-continuity-note/"/>
    <url>/2021/12/14/limits-continuity-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><hr><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><hr><h1 id="1-Limits"><a href="#1-Limits" class="headerlink" title="1. Limits"></a>1. Limits</h1><h2 id="1-1-Definition-of-Limits"><a href="#1-1-Definition-of-Limits" class="headerlink" title="1.1 Definition of Limits"></a>1.1 Definition of Limits</h2><blockquote><p>Limit of $f(x)$ as x approaches $c$ is the number $L$:</p><script type="math/tex; mode=display">\lim_{x\to c}f(x)=L</script><p>$f(x)$ is defined on open interval about $c$ (exclusive)<br>$\forall \epsilon \gt 0, \;\exists \delta &gt; 0$ such that $\forall x$,</p><script type="math/tex; mode=display">0\lt |x-c| \lt \delta \implies |f(x)-L| \lt \epsilon</script><span id="more"></span></blockquote><p><strong>To find a $\delta$ for a Given $f,L,c$ and $\epsilon \gt 0$</strong>:</p><blockquote><ol><li>solve $|f(x)-L| \lt \epsilon$ to get a open interval $(a,b)$ containing $c$;</li><li>Find a $\delta \gt 0$ placing the interval $(c-\delta, c+\delta)$ centered at $c$ inside the interval $(a,b)$.</li></ol></blockquote><h2 id="1-2-Theorems-of-Limits"><a href="#1-2-Theorems-of-Limits" class="headerlink" title="1.2 Theorems of Limits"></a>1.2 Theorems of Limits</h2><p>if $f(x) = x$ (identity function),</p><script type="math/tex; mode=display">\lim_{x\to c}f(x)=\lim_{x\to c}x = c</script><p>if $f(x) = k$ (constant function),</p><script type="math/tex; mode=display">\lim_{x\to c}f(x)=\lim_{x\to c}k = k</script><hr><h3 id="1-2-1-Limits-Laws"><a href="#1-2-1-Limits-Laws" class="headerlink" title="1.2.1 Limits Laws"></a>1.2.1 Limits Laws</h3><p>Set</p><script type="math/tex; mode=display">\lim_{x\to c}f(x)=L\;and\;\lim_{x\to c}g(x)=M</script><ol><li><strong><em>Sum Rule</em></strong>: <script type="math/tex">\lim_{x\to c}(f(x)+g(x))=L+M</script></li><li><strong><em>Difference Rule</em></strong>: <script type="math/tex">\lim_{x\to c}(f(x)-g(x))=L-M</script></li><li><strong><em>Constant Multiple Rule</em></strong>: <script type="math/tex">\lim_{x\to c}(k\cdot f(x))=k\cdot L</script></li><li><strong><em>Product Rule</em></strong>: <script type="math/tex">\lim_{x\to c}(f(x)\cdot g(x))=L\cdot M</script></li><li><strong><em>Quotient Rule</em></strong>: <script type="math/tex">\lim_{x\to c}\frac{f(x)}{g(x)}=\frac{L}{M}\;(M\ne0)</script></li><li><strong><em>Power Rule</em></strong>: <script type="math/tex">\lim_{x\to c}[f(x)]^n=L^n\; (n \in Z^+)</script></li><li><strong><em>Root Rule</em></strong>: <script type="math/tex">\lim_{x\to c}\sqrt[n]{f(x)}=\sqrt[n]L\; (n \in Z^+)</script></li></ol><hr><h3 id="1-2-2-Limits-of-Polynomials"><a href="#1-2-2-Limits-of-Polynomials" class="headerlink" title="1.2.2 Limits of Polynomials"></a>1.2.2 Limits of Polynomials</h3><script type="math/tex; mode=display">P(x) = a_nx^n + a_{n-1}x^{n-1}+ ... + a_0</script><p>then,</p><script type="math/tex; mode=display">\lim_{x\to c}P(x)=P(c) = a_nc^n + a_{n-1}c^{n-1}+ ... + a_0</script><hr><h3 id="1-2-3-Limits-of-Rational-Functions"><a href="#1-2-3-Limits-of-Rational-Functions" class="headerlink" title="1.2.3 Limits of Rational Functions"></a>1.2.3 Limits of Rational Functions</h3><p>Polynomials $P(x)$, $Q(x)$ and $Q(x) \ne 0$:</p><script type="math/tex; mode=display">\lim_{x\to c}\frac{P(x)}{Q(x)}=\frac{P(c)}{Q(c)}</script><blockquote><p>If the denominator is 0, cancel the common factors in the numerator and denominator, then use that theorem.<br><strong>To find the common factor:</strong><br>If Polynomials $Q(x)$ and $Q(c) = 0$, if $P(c) = 0$ too, then the common factor is $(x-c)$</p></blockquote><hr><h3 id="1-2-4-Sandwich-Theorem"><a href="#1-2-4-Sandwich-Theorem" class="headerlink" title="1.2.4 Sandwich Theorem"></a>1.2.4 Sandwich Theorem</h3><p>$\forall x,\;g(x)\le f(x)\lt h(x)$ in some open interval containing $c$, except at $x=c$, </p><script type="math/tex; mode=display">\lim_{x\to c}g(x)=\lim_{x\to c}h(x)=L</script><p>Then, </p><script type="math/tex; mode=display">\lim_{x\to c}f(x)=L</script><hr><h3 id="1-2-5"><a href="#1-2-5" class="headerlink" title="1.2.5"></a>1.2.5</h3><p>$\forall x,\;f(x)\le g(x)$ in some open interval containing $c$, except at $x=c$ and both limits exist, </p><script type="math/tex; mode=display">\lim_{x\to c}f(x)\le \lim_{x\to c}g(x)</script><hr><h1 id="2-One-Sided-Limits"><a href="#2-One-Sided-Limits" class="headerlink" title="2. One-Sided Limits"></a>2. One-Sided Limits</h1><h2 id="2-1-Definition-of-One-Sided-Limits"><a href="#2-1-Definition-of-One-Sided-Limits" class="headerlink" title="2.1 Definition of One-Sided Limits"></a>2.1 Definition of One-Sided Limits</h2><blockquote><ol><li><strong>Right-hand limits</strong><br>$f(x)$ defined on $(c,b)$, where $c\lt b$, $f(x)$ has right-hand limits $L$ at $c$: <script type="math/tex">\lim_{x\to c^+}f(x)=L</script><br>if, $\forall \epsilon \gt 0$, $\exists \delta \gt 0$ such that $\forall x$: <script type="math/tex">c\lt x \lt c+\delta \implies |f(x)-L|\lt \epsilon</script></li><li><strong>Left-hand limits</strong><br>$f(x)$ defined on $(a,c)$, where $a\lt c$, $f(x)$ has left-hand limits $M$ at $c$: <script type="math/tex">\lim_{x\to c^-}f(x)=M</script><br>if, $\forall \epsilon \gt 0$, $\exists \delta \gt 0$ such that $\forall x$: <script type="math/tex">c-\delta\lt x \lt c \implies |f(x)-M|\lt \epsilon</script></li></ol></blockquote><h2 id="2-2-Theorem-of-One-Sided-Limits"><a href="#2-2-Theorem-of-One-Sided-Limits" class="headerlink" title="2.2 Theorem of One-Sided Limits"></a>2.2 Theorem of One-Sided Limits</h2><h3 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2.2.1"></a>2.2.1</h3><script type="math/tex; mode=display">\lim_{x\to c}f(x)=L \iff \lim_{x\to c^+}f(x)=L \;\;\;and\;\;\; \lim_{x\to c^-}f(x)=L</script><hr><h3 id="2-2-2-Limits-of-the-Ratio-sin-theta-theta-as-theta-rightarrow-0"><a href="#2-2-2-Limits-of-the-Ratio-sin-theta-theta-as-theta-rightarrow-0" class="headerlink" title="2.2.2 Limits of the Ratio $sin \theta/\theta$ as $\theta \rightarrow 0$"></a>2.2.2 Limits of the Ratio $sin \theta/\theta$ as $\theta \rightarrow 0$</h3><script type="math/tex; mode=display">\lim_{\theta \to 0} \frac{\sin{\theta}}{\theta}=1</script><p>($\theta$ in radians)</p><hr><h1 id="3-Continuity"><a href="#3-Continuity" class="headerlink" title="3. Continuity"></a>3. Continuity</h1><h2 id="3-1-Definition-of-Continuity-of-f-x"><a href="#3-1-Definition-of-Continuity-of-f-x" class="headerlink" title="3.1 Definition of Continuity of f(x)"></a>3.1 Definition of Continuity of f(x)</h2><ol><li>$f$ is continuous at $c$ if: <script type="math/tex; mode=display">\lim_{x\to c}f(x)=f(c)</script></li><li>$f$ is right-continuous at $c$ if: <script type="math/tex; mode=display">\lim_{x\to c^+}f(x)=f(c)</script></li><li>$f$ is left-continuous at $c$ if: <script type="math/tex; mode=display">\lim_{x\to c^-}f(x)=f(c)</script></li></ol><hr><h2 id="3-2-Continuity-Test"><a href="#3-2-Continuity-Test" class="headerlink" title="3.2 Continuity Test"></a>3.2 Continuity Test</h2><p>$f$ is continuous at $c$ $\iff$</p><ol><li>$f(c)$ exits ($c$ in the domain) and,</li><li>$\lim_{x\to c}f(x)$ exits and,</li><li>$\lim_{x\to c}f(x)=f(c)$</li></ol><hr><h2 id="3-3-Theorem-of-Continuity"><a href="#3-3-Theorem-of-Continuity" class="headerlink" title="3.3 Theorem of Continuity"></a>3.3 Theorem of Continuity</h2><h3 id="3-3-1-Properties-of-Continuous-Functions"><a href="#3-3-1-Properties-of-Continuous-Functions" class="headerlink" title="3.3.1 Properties of Continuous Functions"></a>3.3.1 Properties of Continuous Functions</h3><p>If $f$ and $g$ are continuous at $x=c$, then the combination using 1.2.1 Limits Laws are continuous at $x=c$.</p><hr><h3 id="3-3-2-Polynomials-Continuity"><a href="#3-3-2-Polynomials-Continuity" class="headerlink" title="3.3.2 Polynomials Continuity"></a>3.3.2 Polynomials Continuity</h3><p>Polynomials</p><script type="math/tex; mode=display">P(x) = a_nx^n + a_{n-1}x^{n-1}+ ... + a_0</script><p>is continuous, for $\lim_{x\to c}P(x)=P(c)$.</p><hr><h3 id="3-3-3-Rational-Functions-Continuity"><a href="#3-3-3-Rational-Functions-Continuity" class="headerlink" title="3.3.3 Rational Functions Continuity"></a>3.3.3 Rational Functions Continuity</h3><p>Rational Functions<br>Polynomials $P(x)$, $Q(x)$ and $Q(x) \ne 0$:</p><script type="math/tex; mode=display">\lim_{x\to c}\frac{P(x)}{Q(x)}=\frac{P(c)}{Q(c)}</script><p>is continuous.</p><hr><h3 id="3-3-4-Inverse-Function-Continuity"><a href="#3-3-4-Inverse-Function-Continuity" class="headerlink" title="3.3.4 Inverse Function Continuity"></a>3.3.4 Inverse Function Continuity</h3><p>The inverse function of any function continuous on an interval is continuous over its domain.</p><hr><h3 id="3-3-5-Composite-of-Continuous-Functions"><a href="#3-3-5-Composite-of-Continuous-Functions" class="headerlink" title="3.3.5 Composite of Continuous Functions"></a>3.3.5 Composite of Continuous Functions</h3><p>$f$ is continuous at $c$ and $g$ is continuous at $f(c)\implies$ the composite $g\circ f$ is continuous at $c$.</p><hr><h3 id="3-3-6-Limits-of-Continuous-Functions"><a href="#3-3-6-Limits-of-Continuous-Functions" class="headerlink" title="3.3.6 Limits of Continuous Functions"></a>3.3.6 Limits of Continuous Functions</h3><p>$g$ is continuous at $b$ and $\lim_{x\to c}f(x)=b$,</p><script type="math/tex; mode=display">\lim_{x\to c}g(f(x))=g(b)=g(\lim_{x\to c}f(x))</script><hr><h3 id="3-3-7-The-Intermediate-Value-Theorem-for-Continuous-Functions"><a href="#3-3-7-The-Intermediate-Value-Theorem-for-Continuous-Functions" class="headerlink" title="3.3.7 The Intermediate Value Theorem for Continuous Functions"></a>3.3.7 The Intermediate Value Theorem for Continuous Functions</h3><p>If $f$ is continuous on interval $[a,b]$, and if $y_0$ is any value between $f(a)$ and $f(b)$, then $y_0=f(c)$ for some $c$ in $[a,b]$.</p><center><img src="/2021/12/14/limits-continuity-note/1.png" width="50%" height="50%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Intermediate Value Theorem - Thomas' calculus: early transcendentals (Thirteenth edition)</div></center><hr><h1 id="4-Infinity-Limits-amp-Asymptotes"><a href="#4-Infinity-Limits-amp-Asymptotes" class="headerlink" title="4. Infinity Limits &amp; Asymptotes"></a>4. Infinity Limits &amp; Asymptotes</h1><h2 id="4-1-Definition-of-Infinity-Limits"><a href="#4-1-Definition-of-Infinity-Limits" class="headerlink" title="4.1 Definition of Infinity Limits"></a>4.1 Definition of Infinity Limits</h2><blockquote><ol><li>$f(x)$ has limit $L$ as x approaches infinity: <script type="math/tex">\lim_{x\to \infty}f(x)=L</script><br>if, $\forall \epsilon \gt 0$, $\exists M $ such that $\forall x$: <script type="math/tex">x \gt M \implies |f(x)-L|\lt \epsilon</script></li><li>$f(x)$ has limit $L$ as x approaches minus infinity: <script type="math/tex">\lim_{x\to -\infty}f(x)=L</script><br>if, $\forall \epsilon \gt 0$, $\exists N $ such that $\forall x$: <script type="math/tex">x \lt N \implies |f(x)-L|\lt \epsilon</script></li></ol></blockquote><script type="math/tex; mode=display">\lim_{x\to \pm \infty}k=k \;\; and \;\; \lim_{x\to \pm \infty}\frac{1}{x}=0</script><h2 id="4-2-Theorems-for-Infinity-Limits"><a href="#4-2-Theorems-for-Infinity-Limits" class="headerlink" title="4.2 Theorems for Infinity Limits"></a>4.2 Theorems for Infinity Limits</h2><h3 id="4-2-1-Limit-Laws"><a href="#4-2-1-Limit-Laws" class="headerlink" title="4.2.1 Limit Laws"></a>4.2.1 Limit Laws</h3><p>All Limit Laws in 1.2.1 are also applied to Infinity Limits.</p><hr><h3 id="4-2-2-limits-at-infinity-of-rational-Functions"><a href="#4-2-2-limits-at-infinity-of-rational-Functions" class="headerlink" title="4.2.2 limits at infinity of rational Functions"></a>4.2.2 limits at infinity of rational Functions</h3><blockquote><p>Divide the numerator and denominator by the <strong>highest power of $x$</strong> in the denominator, then depends on the degrees of the polynomials involved.</p></blockquote><hr><h2 id="4-3-Horizontal-Asymptotes"><a href="#4-3-Horizontal-Asymptotes" class="headerlink" title="4.3 Horizontal Asymptotes"></a>4.3 Horizontal Asymptotes</h2><blockquote><p>A line $y = b$ is the Horizontal Asymptotes of $y=f(x)$, if </p><script type="math/tex; mode=display">\lim_{x\to \infty}f(x)=b\;\;or\;\;\lim_{x\to -\infty}f(x)=b</script></blockquote><hr><h2 id="4-4-Oblique-Asymptotes"><a href="#4-4-Oblique-Asymptotes" class="headerlink" title="4.4 Oblique Asymptotes"></a>4.4 Oblique Asymptotes</h2><blockquote><p>If the degree of the numerator of a rational function is <strong>1 greater than</strong> the degree of the denominator, the graph has an oblique or slant line asymptote.</p></blockquote><hr><h2 id="4-5-Vertical-Asymptotes"><a href="#4-5-Vertical-Asymptotes" class="headerlink" title="4.5 Vertical Asymptotes"></a>4.5 Vertical Asymptotes</h2><blockquote><p>A line $y = a$ is the Vertical Asymptotes of $y=f(x)$, if </p><script type="math/tex; mode=display">\lim_{x\to a^+}f(x)=\pm \infty\;\;or\;\;\lim_{x\to a^-}f(x)=\pm \infty</script></blockquote><hr><h2 id="4-6-Infinite-Limits"><a href="#4-6-Infinite-Limits" class="headerlink" title="4.6 Infinite Limits"></a>4.6 Infinite Limits</h2><h3 id="4-6-1-Definitions-of-Infinite-Limits"><a href="#4-6-1-Definitions-of-Infinite-Limits" class="headerlink" title="4.6.1 Definitions of Infinite Limits"></a>4.6.1 Definitions of Infinite Limits</h3><blockquote><ol><li>$f(x)$ approaches infinity limits as $x$ approaches $c$:<script type="math/tex; mode=display">\lim_{x\to c}f(x)=\infty=\lim_{x\to 0^+}\frac{1}{x}</script>if, $\forall B \gt 0$, $\exists \delta $ such that $\forall x$: <script type="math/tex; mode=display">0\lt |x-c|\lt \delta \implies f(x)\gt B</script></li><li>$f(x)$ approaches minus infinity limits as $x$ approaches $c$:<script type="math/tex; mode=display">\lim_{x\to c}f(x)=-\infty=\lim_{x\to 0^-}\frac{1}{x}</script>if, $\forall -B \lt 0$, $\exists \delta $ such that $\forall x$:<script type="math/tex; mode=display">0\lt |x-c|\lt \delta \implies f(x)\lt -B</script></li></ol></blockquote><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Weir, Hass, Thomas, Hass, Joel, &amp; Thomas, George B. (2014). <em>Thomas’ calculus: early transcendentals</em> (Thirteenth edition). Pearson.</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math Note</tag>
      
      <tag>Limits</tag>
      
      <tag>Continuity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introductory Probability Course Note</title>
    <link href="/2021/12/12/introductory-probability-course-note/"/>
    <url>/2021/12/12/introductory-probability-course-note/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/12/12/introductory-probability-course-note/">Introductory Probability Course Note</a><br><a href="https://ultrafish.cn/2021/12/18/Python-basic-note/">Python Basic Note</a><br><a href="https://ultrafish.cn/2021/12/14/limits-continuity-note/">Limits and Continuity Note</a><br><a href="https://ultrafish.cn/2022/04/28/calculus-for-engineers-course-note/">Calculus for Engineers Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-data-analytics-course-note/">Introduction to Data Analytics Course Note</a><br><a href="https://ultrafish.cn/2022/04/30/introduction-to-computer-systems-course-note/">Introduction to Computer Systems Course Note</a></p></blockquote><hr><p><strong><em>个人笔记，仅供参考</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p>Course note of <strong>AMA1104 Introductory Probability</strong>, The Hong Kong Polytechnic University, 2021.</p><hr><h2 id="1-Probability"><a href="#1-Probability" class="headerlink" title="1. Probability"></a>1. Probability</h2><h3 id="1-1-Permutations-Rule"><a href="#1-1-Permutations-Rule" class="headerlink" title="1.1 Permutations Rule"></a>1.1 Permutations Rule</h3><span id="more"></span><script type="math/tex; mode=display">_{n}P_r =P^n_r = n(n-1)(n-2)...(n-r+1) = \frac{n!}{(n-r)!}</script><hr><h3 id="1-2-Combinations-Rule"><a href="#1-2-Combinations-Rule" class="headerlink" title="1.2 Combinations Rule"></a>1.2 Combinations Rule</h3><script type="math/tex; mode=display">_{n}C_r =C^n_r =\binom{n}{r}= \frac{n!}{r!(n-r)!}= \frac{n(n-1)(n-2)...(n-r+1)}{r!}</script><hr><h3 id="1-3-Collectively-Exhaustive"><a href="#1-3-Collectively-Exhaustive" class="headerlink" title="1.3 Collectively Exhaustive"></a>1.3 Collectively Exhaustive</h3><blockquote><p>A set of events is ${A_1, A_2,…, A_n}$ said to be <em>collectively exhaustive</em> if <strong><em>one of the events must occur</em></strong> (list all events), then the sample space is</p></blockquote><script type="math/tex; mode=display">S = A_1 \cup A_2 \cup ... \cup A_n</script><hr><h3 id="1-4-Joint-Probability"><a href="#1-4-Joint-Probability" class="headerlink" title="1.4 Joint Probability"></a>1.4 Joint Probability</h3><blockquote><p>The <strong><em>probability</em></strong> of the <strong><em>intersection</em></strong> of two events is called their joint probability, which is:</p></blockquote><script type="math/tex; mode=display">P(A\;and\;B) \;\mathrm or\;P(A \cap B)</script><hr><h3 id="1-5-Union-Probability"><a href="#1-5-Union-Probability" class="headerlink" title="1.5 Union Probability"></a>1.5 Union Probability</h3><blockquote><p>The <strong><em>probability</em></strong> of the <strong><em>union</em></strong> of two events is called their union probability, which is:</p></blockquote><script type="math/tex; mode=display">P(A \cup B) = P(A)+P(B)-P(A \cap B)</script><hr><h3 id="1-6-Mutually-Exclusive"><a href="#1-6-Mutually-Exclusive" class="headerlink" title="1.6 Mutually Exclusive"></a>1.6 Mutually Exclusive</h3><blockquote><p>Two events are said to be mutually exclusive if, when <strong><em>one of the two events occurs</em></strong> in an experiment, <strong><em>the other cannot occur</em></strong>, which is:</p></blockquote><script type="math/tex; mode=display">P(A\cap B) = 0</script><blockquote><p>If the events, A and B, are <strong><em>mutually exclusive</em></strong>, the probability that <strong><em>either event occurs</em></strong> is</p></blockquote><script type="math/tex; mode=display">P(A\cup B) = P(A)+P(B) \\ =P(A)+P(B)-P(A \cap B)\; \mathrm where\; P(A \cap B)=0</script><hr><h3 id="1-7-Conditional-Probability"><a href="#1-7-Conditional-Probability" class="headerlink" title="1.7 Conditional Probability"></a>1.7 Conditional Probability</h3><blockquote><p>The probability of an event $A$ given that <strong><em>an event $B$ has occurred</em></strong>, is called the conditional probability of $A$ given $B$ and is denoted by the symbol $P(A|B)$ and read as ‘the probability of $A$ given that $B$ has already occurred.</p><p>If $A$ and $B$ are two events with $P(A)\neq 0$ and $P(B)\neq 0$,then</p></blockquote><script type="math/tex; mode=display">P(A|B)=\frac{P(A\cap B)}{P(B)}\;\; and\;\;P(B|A)=\frac{P(B\cap A)}{P(A)}</script><p>The probability that <strong><em>both of the two events $A$ and $B$ occur</em></strong> is</p><script type="math/tex; mode=display">P(A\cap B) = P(A)\cdot P(B|A)= P(B)\cdot P(A|B)</script><hr><h3 id="1-8-Independent"><a href="#1-8-Independent" class="headerlink" title="1.8 Independent"></a>1.8 Independent</h3><blockquote><p>Two events $A$ and $B$ are said to be <strong>independent</strong> if the occurrence of one <strong><em>does not affect</em></strong> the probability of the occurrence of the other. </p><p>$A$ and $B$ are independent events if:</p></blockquote><script type="math/tex; mode=display">P(A|B)=P(A)\; \mathrm and \; P(B|A)=P(B)</script><blockquote><p>If two events $A$ and $B$ are independent, then:</p></blockquote><script type="math/tex; mode=display">P(A\cap B)=P(A)\cdot P(B)\\ \because P(A|B)=\frac{P(A\cap B)}{P(B)}=P(A)</script><hr><h3 id="1-9-Law-of-Total-Probability"><a href="#1-9-Law-of-Total-Probability" class="headerlink" title="1.9 Law of Total Probability"></a>1.9 Law of Total Probability</h3><blockquote><p>Assume that $B_1,B_2,…,B_n$ are <strong><em>collectively exhaustive</em></strong> events where $P(B_i)\gt 0$, for $i=1,2,…,n$ and $B_i$ and $B_j$ are <strong><em>mutually exclusive</em></strong> events for $i\neq j$.<br>Then for any event $A$:</p></blockquote><script type="math/tex; mode=display">P(A)=P(B_1\cap A)+P(B_2\cap A)+...+P(B_n\cap A) \\ =P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+...+P(B_n)P(A|B_n)</script><hr><h3 id="1-10-Bayes’-Theorem"><a href="#1-10-Bayes’-Theorem" class="headerlink" title="1.10 Bayes’ Theorem"></a>1.10 Bayes’ Theorem</h3><blockquote><p>Suppose that $B_1,B_2,…,B_n$ are n <strong><em>exhaustive</em></strong> events and <strong><em>exhaustive</em></strong> events, then:</p></blockquote><script type="math/tex; mode=display">P(B_k|A)=\frac{P(B_k \cap A)}{P(A)} \\ =\frac{P(B_k)P(A|B_k)}{P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+...+P(B_n)P(A|B_n)}</script><blockquote><p>$\because P(B_k\cap A) = P(B_k)\cdot P(A|B_k) \; based\;on\;the\;Conditional\;Probability$</p><p>$P(A)=P(B_1)P(A|B_1)+P(B_2)P(A|B_2)+…+P(B_n)P(A|B_n) \; \mathrm based\;on\;the\;Law\;of\;Total \;probability$</p></blockquote><hr><h2 id="2-Probability-Distribution"><a href="#2-Probability-Distribution" class="headerlink" title="2. Probability Distribution"></a>2. Probability Distribution</h2><h3 id="2-1-Discrete-Random-Variable"><a href="#2-1-Discrete-Random-Variable" class="headerlink" title="2.1 Discrete Random Variable"></a>2.1 Discrete Random Variable</h3><h4 id="2-1-1-Probability-Distribution"><a href="#2-1-1-Probability-Distribution" class="headerlink" title="2.1.1 Probability Distribution"></a>2.1.1 Probability Distribution</h4><blockquote><ul><li>$0\le P(X)\le 1$ for each value of $x$;</li><li>$\sum P(X)=1$;</li><li>$P(x)=P(X=x)$</li></ul></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=\sum x \cdot P(x)</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = \sum (x-\mu )^2\cdot P(x)</script><script type="math/tex; mode=display">OR\;\;\sigma^2 =Var(X) =\biggl(\sum x^2 \cdot P(x)\biggl) - \mu^2</script><script type="math/tex; mode=display">Var(X) =E(X^2)-E(X)^2</script><hr><h4 id="2-1-2-Binomial-Probability-Distribution"><a href="#2-1-2-Binomial-Probability-Distribution" class="headerlink" title="2.1.2 Binomial Probability Distribution"></a>2.1.2 Binomial Probability Distribution</h4><p>$X\sim Bin(n,p)$</p><script type="math/tex; mode=display">P(x)=P(X =x)=\binom{n}{x} p^x(1-p)^{n-x}\\x=0,1,2,...,n</script><blockquote><p>$n$ = <strong>total</strong> number of trials<br>$p$ = <strong>probability of success</strong><br>$x$ = <strong>number of successes</strong> in $n$ trials</p></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=np</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = np(1-p)</script><hr><h4 id="2-1-3-Poisson-Probability-Distribution"><a href="#2-1-3-Poisson-Probability-Distribution" class="headerlink" title="2.1.3 Poisson Probability Distribution"></a>2.1.3 Poisson Probability Distribution</h4><p>$X\sim Poisson(\lambda)$</p><script type="math/tex; mode=display">P(x)=P(X =x)=\frac{\lambda^xe^{-\lambda}}{x!}\\x=0,1,2,...,n</script><blockquote><p>where $\lambda$ is the <strong>mean number</strong> of occurrences in that interval</p></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=\lambda</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = \lambda</script><p><strong><em>Poisson Approximation to the Binomial Distribution</em></strong>:<br>when the number of <strong>trials $n$ is large</strong> and at the same time <strong>the probability $p$ is small</strong> (generally such that <strong>$\mu=np\le7$</strong> )</p><script type="math/tex; mode=display">P(x)=P(X =x)=\frac{(np)^xe^{-np}}{x!}</script><blockquote><p>$X$ = <strong>number of success</strong> from n independent trials<br>$p$ = <strong>probability of success</strong><br>$\lambda = \mu = np$</p></blockquote><hr><h4 id="2-1-4-Negative-Binomial-Probability-Distribution"><a href="#2-1-4-Negative-Binomial-Probability-Distribution" class="headerlink" title="2.1.4 Negative Binomial Probability Distribution"></a>2.1.4 Negative Binomial Probability Distribution</h4><blockquote><p>The probability of performing $k$ independent trials <strong><em>until</em></strong> a total of $r$ successes is accumulated</p></blockquote><p>$X \sim NegBin (r,p)$</p><script type="math/tex; mode=display">P(X = k)=\binom{k-1}{r-1}p^r(1-p)^{k-r}\\(where\;k = r,r+1,...)</script><blockquote><script type="math/tex; mode=display">\binom{k-1}{r-1}:\;sample\;just\;1\;before\;success\;all\\p^r = p^{r-1}\times p\; (final\;trial)</script><p>$p$ = probability of <strong>each trial being a success</strong><br>$k$ = independent trials, <strong>NOT fixed</strong>.<br>$r$ = number of successes, <strong>is fixed</strong>.</p></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=\frac{r}{p}</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = \frac{r(1-p)}{p^2}</script><hr><h4 id="2-1-5-Geometric-Probability-Distribution"><a href="#2-1-5-Geometric-Probability-Distribution" class="headerlink" title="2.1.5 Geometric Probability Distribution"></a>2.1.5 Geometric Probability Distribution</h4><blockquote><p>The probability that the first occurrence of success requires k independent trials.<br>(i.e. $X \sim NegBin (1,p)$)</p></blockquote><p>$X \sim Geo (p)$</p><script type="math/tex; mode=display">P(X = k)=(1-p)^{k-1}p\\(where\;k \gt 1)</script><blockquote><p>$p$ = probability of <strong>each trial being a success</strong><br>$k$ = independent trials, <strong>NOT fixed</strong>.</p></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=\frac{1}{p}</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = \frac{1-p}{p^2}</script><hr><h4 id="2-1-6-Hypergeometric-Probability-Distribution"><a href="#2-1-6-Hypergeometric-Probability-Distribution" class="headerlink" title="2.1.6 Hypergeometric Probability Distribution"></a>2.1.6 Hypergeometric Probability Distribution</h4><blockquote><p>When sampling is <strong><em>without replacement</em></strong>, and <strong>the number of elements $N$ in the population is small</strong> (or when the sample elements $N$ in the population is small (or when the sample size $n$ is large relative to $N$), the number of “successes” in a random sample of $n$ items has a <strong>hypergeometric probability distribution</strong>.</p></blockquote><p>$X\sim Hp(x)$:</p><script type="math/tex; mode=display">P(x)=P(X =x)=\frac{\binom{r}{x}\binom{N-r}{n-x}}{\binom{N}{n}}</script><blockquote><p>$N$ = <strong>number of elements</strong> in the population<br>$r$ = <strong>number of successes</strong> in the population<br>$n$ = <strong>sample size</strong> (draw from $N$)<br>$x$ = number of <strong>successes in the sample</strong> (successful draw from $N$)</p></blockquote><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">\mu =E(X)=\frac{nr}{N}</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">\sigma^2 =Var(X) = n\bigg(\frac{r}{N}\bigg)\bigg(\frac{N-r}{N}\bigg)\bigg(\frac{N-n}{N-1}\bigg)</script><blockquote><p>where the $\bigg(\frac{N-n}{N-1}\bigg)$ is the finite population correction factor</p></blockquote><hr><h3 id="2-2-Continuous-Random-Variable"><a href="#2-2-Continuous-Random-Variable" class="headerlink" title="2.2 Continuous Random Variable"></a>2.2 Continuous Random Variable</h3><h4 id="2-2-1-Probability-Distribution"><a href="#2-2-1-Probability-Distribution" class="headerlink" title="2.2.1 Probability Distribution"></a>2.2.1 Probability Distribution</h4><blockquote><p>$P(X=c) = 0$<br>$P(X\lt c)=P(X\le c)$</p></blockquote><h4 id="2-2-2-Normal-Distribution"><a href="#2-2-2-Normal-Distribution" class="headerlink" title="2.2.2 Normal Distribution"></a>2.2.2 Normal Distribution</h4><p>PDF:</p><script type="math/tex; mode=display">f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{-(x-\mu )^2/2\sigma^2}</script><blockquote><p>$X$ follows a normal distribution with mean $\mu$ and $\sigma$(<strong>standard deviation</strong>), $\sigma^2$(<strong>Variance</strong>)</p></blockquote><p><strong>$X\sim N(\mu,\sigma^2)$</strong></p><p><strong>Mean or Expected value:</strong></p><script type="math/tex; mode=display">E(X)=\mu</script><p><strong>Variance:</strong></p><script type="math/tex; mode=display">Var(X) =\sigma^2\\Var(X) =E(X^2)-E(X)^2</script><hr><h4 id="2-2-3-Standard-Normal-Distribution"><a href="#2-2-3-Standard-Normal-Distribution" class="headerlink" title="2.2.3 Standard Normal Distribution"></a>2.2.3 Standard Normal Distribution</h4><blockquote><p>Normal Distribution with $\mu = 0$ and $\sigma=1$</p><p><strong>$Z\sim N(0,1)$</strong></p><p>Standardizing a Normal Distribution: converting an X value to a Z value</p></blockquote><script type="math/tex; mode=display">Z=\frac{X-\mu}{\sigma}\; (Not\;\sigma^2)</script><blockquote><p>where $X\sim N(\mu,\sigma^2)$</p></blockquote><script type="math/tex; mode=display">Z=\frac{X-\mu}{\sigma} \Rightarrow X = \mu+Z\sigma</script><p><strong><em>Normal Distribution as an Approximation to Binomial Distribution</em></strong>:</p><p>when both</p><script type="math/tex; mode=display">np\gt5 \; and\;n(1-p)\gt5</script><p>3 Steps:</p><blockquote><ol><li>Get $\mu$ and $\sigma$ for binomial distribution;</li></ol></blockquote><script type="math/tex; mode=display">\mu = np\;,\sigma=\sqrt{np(1-p)}\;,\sigma^2=np(1-p)</script><blockquote><ol><li><p>Convert the discrete random variable to a <strong>continuous random variable</strong>;</p></li><li><p>Compute the required probability using the <strong>normal distribution</strong></p></li></ol></blockquote><hr><h2 id="3-Sampling-Distribution-amp-Estimation"><a href="#3-Sampling-Distribution-amp-Estimation" class="headerlink" title="3. Sampling Distribution &amp; Estimation"></a>3. Sampling Distribution &amp; Estimation</h2><h3 id="3-1-Sampling-Distribution-of-the-Sample-Mean"><a href="#3-1-Sampling-Distribution-of-the-Sample-Mean" class="headerlink" title="3.1 Sampling Distribution of the Sample Mean"></a>3.1 Sampling Distribution of the Sample Mean</h3><p><strong>Sampling Distribution of $\bar{X}$</strong></p><p><strong>Mean</strong></p><script type="math/tex; mode=display">\mu_{\bar{X}}= \mu</script><p><strong>Standard Error</strong></p><script type="math/tex; mode=display">\sigma_{\bar{X}}=\frac{\sigma}{\sqrt{n}}</script><blockquote><p>When $n/N \gt 0.05$ ($N$ for population size):</p><script type="math/tex; mode=display">\sigma_{\bar{X}} = \frac{\sigma}{\sqrt{n}} \cdot\sqrt{\frac{N-n}{N-1}}</script></blockquote><p><strong>Shape</strong></p><script type="math/tex; mode=display">\bar{X}\sim N(\mu,(\frac{\sigma}{\sqrt{n}})^2)</script><hr><h3 id="3-2-Sampling-Distribution-of-the-Sample-Proportion"><a href="#3-2-Sampling-Distribution-of-the-Sample-Proportion" class="headerlink" title="3.2 Sampling Distribution of the Sample Proportion"></a>3.2 Sampling Distribution of the Sample Proportion</h3><p><strong>Sampling Distribution of $\bar{p}$</strong></p><p><strong>Mean</strong></p><script type="math/tex; mode=display">\mu_{\bar{X}}= p</script><p><strong>Standard Error</strong></p><script type="math/tex; mode=display">\sigma_{\bar{p}}=\sqrt{\frac{p(1-p)}{n}}</script><blockquote><p>When $n/N \gt 0.05$ ($N$ for population size):</p><script type="math/tex; mode=display">\sigma_{\bar{p}} = \sqrt{\frac{p(1-p)}{n}} \cdot\sqrt{\frac{N-n}{N-1}}</script></blockquote><p><strong>Shape</strong></p><script type="math/tex; mode=display">\bar{X}\sim N(p,(\sqrt{\frac{p(1-p)}{n}})^2)</script><hr><h3 id="3-3-Sampling-Distribution-of-the-Sample-Variance"><a href="#3-3-Sampling-Distribution-of-the-Sample-Variance" class="headerlink" title="3.3 Sampling Distribution of the Sample Variance"></a>3.3 Sampling Distribution of the Sample Variance</h3><p><strong>Sampling Distribution of $s^2$</strong></p><p>For </p><script type="math/tex; mode=display">s^2=\frac{1}{n-1}\sum_{i=1}^n(x_i-\bar{x})^2=\frac{\sum x^2-n(\bar{x})^2}{n-1}=\frac{\sum x^2-\frac{(\sum x)^2}{n}}{n-1}</script><p>So,</p><script type="math/tex; mode=display">\frac{(n-1)s^2}{\sigma^2}=\frac{1}{\sigma^2}\sum_{i=1}^n(x_i-\bar{x})^2</script><p>where</p><script type="math/tex; mode=display">\chi^2_{n-1} \sim \frac{(n-1)s^2}{\sigma^2}</script><blockquote><p>has a chi-square($\chi^2$) distribution with $n-1$ degrees of freedom</p></blockquote><p><strong>Mean</strong></p><script type="math/tex; mode=display">\mu_{s^2}= \sigma^2</script><p><strong>Variance</strong></p><script type="math/tex; mode=display">Var(s^2)=\frac{2\sigma^4}{n-1}</script><hr><h3 id="3-4-Confidence-interval-of-population-mean-mu-with-known-Variance"><a href="#3-4-Confidence-interval-of-population-mean-mu-with-known-Variance" class="headerlink" title="3.4 Confidence interval of population mean $\mu$ with known Variance"></a>3.4 Confidence interval of population mean $\mu$ with known Variance</h3><script type="math/tex; mode=display">\bar{X}\pm Z_{\alpha/2}\frac{\sigma}{\sqrt{n}}</script><blockquote><p>a $(1-\alpha)100\%$ C.I.<br>$\sigma$: population standard deviation<br>$n$: sample size<br>$Z_{\alpha/2}$ from the standard normal distribution table with $\alpha/2$ probability.</p></blockquote><hr><h3 id="3-5-Confidence-interval-of-population-mean-mu-with-unknown-Variance"><a href="#3-5-Confidence-interval-of-population-mean-mu-with-unknown-Variance" class="headerlink" title="3.5 Confidence interval of population mean $\mu$ with unknown Variance"></a>3.5 Confidence interval of population mean $\mu$ with unknown Variance</h3><script type="math/tex; mode=display">\bar{X}\pm t_{\alpha/2,n-1}\frac{s}{\sqrt{n}}</script><blockquote><p>a $(1-\alpha)100\%$ C.I.<br>$s$: sample standard deviation<br>$n$: sample size<br>$t_{\alpha/2,n-1}$ from $t$ distribution table with $\alpha/2$ probability and $n-1$ degrees of freedom</p></blockquote><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Slides of AMA1104 Introductory Probability, The Hong Kong Polytechnic University.</p><hr><p><strong><em>个人笔记，仅供参考，转载请标明出处</em></strong><br><strong><em>FOR REFERENCE ONLY</em></strong></p><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math Note</tag>
      
      <tag>Probability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多米诺配对问题 Domino Matching with Python</title>
    <link href="/2021/11/04/domino-matching/"/>
    <url>/2021/11/04/domino-matching/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h3 id="1-Preview"><a href="#1-Preview" class="headerlink" title="1. Preview"></a>1. Preview</h3><p><strong>Domino Matching(多米诺配对)</strong> 问题来自于我的一门名为 <em>Computational Thinking and Problem Solving (计算思维和问题解决 )</em> 的课，主要培养我们的计算思维。<br><span id="more"></span></p><center><img src="/2021/11/04/domino-matching/1.png" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>情景：</p><blockquote><p>如上图所示，有四块多米诺骨牌（1～4），每块都有<strong>上和下两部分组成</strong>，上下两部分的成分是相同的（同为字母、同为数字…），每块多米诺骨牌都<strong>存在无数块</strong>。</p></blockquote><p>问题：</p><blockquote><p>从提供的一组多米诺骨牌（如上图中的4块）中选取多米诺骨牌，并将它们<strong>水平（如麻将般）组合</strong>起来，<strong>可重复选取</strong>，要求最后的<strong>组合体</strong>的<strong>上面部分和下面部分相同</strong>。问，此组多米诺骨牌能否组成要求的组合体，若能，组合的顺序如何？</p></blockquote><p>示例：</p><center><img src="/2021/11/04/domino-matching/2.png" width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌配对体 Matched Domino</div></center><hr><p>示例：</p><center><img src="/2021/11/04/domino-matching/7.png" width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌配对体 Matched Domino</div></center><hr><h3 id="2-Computational-Thinking"><a href="#2-Computational-Thinking" class="headerlink" title="2. Computational Thinking"></a>2. Computational Thinking</h3><p>我们可能会对每一种组合进行尝试，但在此过程中会有一些影响组合决定的条件。</p><h4 id="2-1-Two-Conditions"><a href="#2-1-Two-Conditions" class="headerlink" title="2.1 Two Conditions"></a>2.1 Two Conditions</h4><p>当<strong>尝试</strong>把下一个多米诺骨牌连接到现有的组合体时，即将产生的新组合体会有<strong>两个检查条件</strong>：</p><blockquote><ol><li>其是否为<strong>完全</strong>配对体(Matched Domino)，也就是最后我们希望得到的配对体。</li><li>其是否为<strong>部分</strong>配对体(Partially Matched Domino)，检查将其添加到组合体后，此时的组合体能否有成为配对体的可能。</li></ol></blockquote><p>例如：</p><center><img src="/2021/11/04/domino-matching/3.png" width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">完全配对体 Matched Domino</div></center><center><img src="/2021/11/04/domino-matching/41.png" width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">部分配对体 Partially Matched Domino</div></center><center><img src="/2021/11/04/domino-matching/6.png" width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">非部分配对体 Non-Partially Matched Domino<br>(非完全配对体 Non-Matched Domino)</div></center><hr><blockquote><p>在第一个例子中，若将[21,1]多米诺骨牌连接到原有组合体后，使原有组合体变成<strong>完全配对体 (Matched Domino)</strong>，因此[21,1]多米诺骨牌为下一个连接的选择，并且其为最后一块多米诺骨牌。</p><p>在第二个例子中，若将[2,1]多米诺骨牌连接到原有组合体后，会使原有组合体变成<strong>部分配对体 (Partially Matched Domino)</strong>，因此[2,1]多米诺骨牌可以作为下一个连接的选择。</p><p>在第三个例子中，若将[12,1]多米诺骨牌连接到原有组合体后，会使原有组合体变成<strong>非部分配对体 (Non-Partially Matched Domino)</strong>，因此[12,1]多米诺骨牌不能作为下一个连接的选择。</p></blockquote><p>通过这两个检查条件，可以判断哪些多米诺骨牌可以成为下一个连接的选择。</p><hr><h4 id="2-2-Starting-Domino"><a href="#2-2-Starting-Domino" class="headerlink" title="2.2 Starting Domino"></a>2.2 Starting Domino</h4><p>万事开头难。<br>上面明确了选择多米诺骨牌的中间过程，但是还需要确定第一块多米诺骨牌的选择。</p><p>可以明确的是，最后的组合体上下两部分一定是相同的。因此，第一块多米诺骨牌的上下两部分肯定是部分相同的。也就是说第一块多米诺骨牌的“组合体”肯定是<strong>部分配对体 (Partially Matched Domino)</strong>。</p><p>例如：</p><center><img src="/2021/11/04/domino-matching/1.png" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>上图所示的一组多米诺骨牌中，只有3号是<strong>部分配对体 (Partially Matched Domino)</strong>，因此只有其可以作为第一块多米诺骨牌。</p><hr><center><img src="/2021/11/04/domino-matching/71.png" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>上图所示的一组多米诺骨牌中，只有1号是<strong>部分配对体 (Partially Matched Domino)</strong>，因此只有其可以作为第一块多米诺骨牌。</p><hr><h4 id="4-3-Process"><a href="#4-3-Process" class="headerlink" title="4.3 Process"></a>4.3 Process</h4><p>根据以上思考，可以产生对此问题的处理步骤：</p><blockquote><ol><li>找到<strong>第一块多米诺骨牌</strong>；</li><li>若找不到能作为第一块的多米诺骨牌，则这一组多米诺骨牌不能组成组合体，程序结束；</li><li>向现有组合体连接任意一块多米诺骨牌；</li><li>若其可以组成<strong>完全配对体 (Matched Domino)</strong>，则<strong>完成配对</strong>，得到最后的组合体，程序结束；</li><li>若其可以组成<strong>部分配对体 (Partially Matched Domino)</strong>，则<strong>重复步骤</strong>2；</li><li>若其可以组成<strong>非部分配对体 (Non-Partially Matched Domino)</strong>，则将其<strong>移出</strong>现有组合体，并<strong>重复步骤2</strong>，尝试<strong>不同</strong>的多米诺骨牌；</li><li>若任何一块多米诺骨牌都不能连接到第一块多米诺骨牌后，则程序结束。</li></ol></blockquote><hr><h3 id="3-Problem-Solving-with-Python-Code"><a href="#3-Problem-Solving-with-Python-Code" class="headerlink" title="3. Problem Solving with Python Code"></a>3. Problem Solving with Python Code</h3><p>以下为多米诺配对问题 (Domino Matching) 的 Python 解决方法。</p><p><a href="https://github.com/zhangwengyu999/Domino_Matching_Problem.git">代码链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Made by Mike_Zhang</span><br><span class="hljs-comment"># Domino Matching</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatchedDomino</span>(<span class="hljs-params">inDomino</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    function to check whether this Domino is matched</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: Domino to check</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - True: it is matched</span><br><span class="hljs-string">        - False : it is NOT matched</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    upperList = []<br>    lowerList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDomino:<br>        upperList.append(d[<span class="hljs-number">0</span>])<br>        lowerList.append(d[<span class="hljs-number">1</span>])<br>    upper = <span class="hljs-string">&quot;&quot;</span>.join(upperList)<br>    lower = <span class="hljs-string">&quot;&quot;</span>.join(lowerList)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(upper)==<span class="hljs-built_in">len</span>(lower)):<br>        <span class="hljs-keyword">if</span> (upper == lower):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isPartialMatched</span>(<span class="hljs-params">inDomino</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    function to check whether a part of this Domino is matched, part refers to the longest part of a Domino having same lenth of upper half and lower half part</span><br><span class="hljs-string">    e.g., [[&quot;a&quot;,&quot;ab&quot;],[&quot;b&quot;,&quot;ca&quot;]] is Partially Matched, [[&quot;a&quot;,&quot;ab&quot;],[&quot;b&quot;,&quot;ca&quot;],[&quot;ca&quot;,&quot;a&quot;],[&quot;abc&quot;,&quot;c&quot;]] is NOT Partially Matched</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: Domino to check</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    return: </span><br><span class="hljs-string">        - mark:</span><br><span class="hljs-string">            - True: Partially Matched</span><br><span class="hljs-string">            - False: NOT Partially Matched</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    upperList = []<br>    lowerList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDomino:<br>        upperList.append(d[<span class="hljs-number">0</span>])<br>        lowerList.append(d[<span class="hljs-number">1</span>])<br>    upper = <span class="hljs-string">&quot;&quot;</span>.join(upperList)<br>    lower = <span class="hljs-string">&quot;&quot;</span>.join(lowerList)<br>    i = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(upper),<span class="hljs-built_in">len</span>(lower))-<span class="hljs-number">1</span><br>    mark = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span>(mark == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> i &gt;= <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">if</span> (upper[i] != lower[i]):<br>            mark = <span class="hljs-literal">False</span><br>        i=i-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> mark<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getStartDominoList</span>(<span class="hljs-params">inDominoList</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    function to get a list of Dominos that each one is partially matched Domino</span><br><span class="hljs-string">    e.g. getStartDominoList([[&quot;010&quot;,&quot;0&quot;],[&quot;111&quot;,&quot;000&quot;],[&quot;001&quot;,&quot;0101&quot;],[&quot;11&quot;,&quot;10110&quot;]]) = [[&quot;010&quot;,&quot;0&quot;]]</span><br><span class="hljs-string">    getStartDominoList([[&quot;b&quot;,&quot;ca&quot;],[&quot;abc&quot;,&quot;c&quot;],[&quot;a&quot;,&quot;ab&quot;],[&quot;ca&quot;,&quot;a&quot;]]) = [[&quot;a&quot;,&quot;ab&quot;]]</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    the first Domino in a matched Domino must be selected from that list of Dominos</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDominoList: a list of Dominos to check</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - a list of required Dominos</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    resultList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDominoList:<br>        <span class="hljs-keyword">if</span> (isPartialMatched([d])):<br>            resultList.append(d)<br>    <span class="hljs-keyword">return</span> resultList<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isNextDominoValid</span>(<span class="hljs-params">inDomino,inNext,Dominos</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    the CORE function </span><br><span class="hljs-string">    to recursively check whether next Domino can generate a matched Domino after appending to the original Domino,</span><br><span class="hljs-string">    and finally modify the original Domino to a matched Domino, if can generate.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: the original Domino</span><br><span class="hljs-string">        - inNext: the next Domino </span><br><span class="hljs-string">        - Dominos: all given Dominos</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - flag: </span><br><span class="hljs-string">            - True: can generate a matched Domino</span><br><span class="hljs-string">            - False: can NOT generate a matched Domino</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    flag = <span class="hljs-literal">False</span><br>    inDomino.append(inNext)<br>    <span class="hljs-keyword">if</span> (isMatchedDomino(inDomino) == <span class="hljs-literal">True</span>):<br>        flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> (isPartialMatched(inDomino) == <span class="hljs-literal">False</span>):<br>        flag = <span class="hljs-literal">False</span><br>        inDomino.pop()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> Dominos:<br>            <span class="hljs-keyword">if</span> (isNextDominoValid(inDomino,d,Dominos)):<br>                flag = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    Dominos = [[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ca&quot;</span>],[<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>],[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>],[<span class="hljs-string">&quot;ca&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>]]<br>    <span class="hljs-comment">#Dominos = [[&quot;010&quot;,&quot;0&quot;],[&quot;111&quot;,&quot;000&quot;],[&quot;001&quot;,&quot;0101&quot;],[&quot;11&quot;,&quot;10110&quot;]]</span><br>    <span class="hljs-comment">#Dominos = [[&quot;001&quot;,&quot;00&quot;],[&quot;0&quot;,&quot;100&quot;]]</span><br><br>    flag = <span class="hljs-literal">False</span><br>    resultDominos = <span class="hljs-built_in">list</span>()<br>    startDominoList = getStartDominoList(Dominos)<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(startDominoList) == <span class="hljs-number">0</span>):<br>        flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> startDomino <span class="hljs-keyword">in</span> startDominoList:<br>            tmpList = <span class="hljs-built_in">list</span>()<br>            tmpList.append(startDomino)<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> Dominos:<br>                <span class="hljs-keyword">if</span> (isNextDominoValid(tmpList,d,Dominos)):<br>                    resultDominos = tmpList<br>                    flag = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">True</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, exist a solution:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(resultDominos)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No, not exist any solutions&quot;</span>)<br><br>main()<br><span class="hljs-comment"># Domino Matching</span><br><span class="hljs-comment"># Made by Mike_Zhang</span><br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>解决多米诺配对问题的方法有很多种，我的方法并非最优解，欢迎大家尝试。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Domino Matching</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础Java异常处理 Basic Exception handling in Java</title>
    <link href="/2021/10/08/Java-learning-3/"/>
    <url>/2021/10/08/Java-learning-3/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><span id="more"></span><h3 id="1-Exception"><a href="#1-Exception" class="headerlink" title="1. Exception"></a>1. Exception</h3><p>在运行程序的时候，经常会遇到很多异常(Exception)被抛出，使得程序不受我们的控制，因此在设计代码的时候会经常考虑很多情况，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span>)&#123;<br>    object.doSth();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;Error!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是很多时候我们并不能考虑到所有的异常情况，或者不能表达出这种异常，这会导致某个步骤因为异常而没有完成。</p><p>当一个成员方法抛出异常时，此方法不会返回任何值，只会抛出一个包含了异常信息的对象，并且此方法会立即终止。调用次方法的代码不会继续执行，而会用一种异常处理机制来寻找能够处理此异常的异常处理方法。</p><p>此时程序应该做：</p><blockquote><ol><li>使程序回到一个安全的状态并让用户执行其他程序；或者，</li><li>使用户保存所有步骤并且温柔地终止次程序。</li></ol></blockquote><p>因此需要有一种异常处理方法来把产生异常的地方转移到某一能过处理此异常的异常处理器。</p><hr><h4 id="1-2-Exception-classification"><a href="#1-2-Exception-classification" class="headerlink" title="1.2 Exception classification"></a>1.2 Exception classification</h4><p>异常(Exception)对象所属的类是从<code>Throwable</code>类继承来的，因此除了Java所定义的异常外，用户还可以通过继承来定义自己的异常。<br>以下为<code>Throwable</code>类的层级关系图：</p><center><img src="/2021/10/08/Java-learning-3/1.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Exception hierarchy in Java - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><code>Throwable</code>类有两个子类，<code>Error</code>和<code>Exception</code>。</p><blockquote><ol><li><p><code>Error</code>类描述的是在运行时的内部错误和资源穷尽情况。程序员<strong>不该抛出</strong>这类对象的错误，对应措施很少。</p></li><li><p><code>Exception</code>类也有两个子类，<code>IOException</code>和<code>RuntimeException</code>。<code>RuntimeException</code>的产生是由于程序员<strong>自己在编写代码时产生了错误</strong>。<code>IOException</code>是由于<strong>客观因素</strong>产生的，如I/O的错误。</p><blockquote><p><code>RuntimeException</code>包含：<br>不当的转型；<br>数组的out-of-bounds错误；<br>访问一个空指针(null pointer)等</p><p><code>IOException</code>包括：<br>在EOF(End of file)之后继续读取；<br>打开一个不存在的文件；<br>从一个不存在的类中寻找对象等</p></blockquote></li></ol></blockquote><p>记住：<strong>“如果产生了一个<code>RuntimeException</code>，这就是你的错。”</strong></p><p>Java规定所有从<code>Error</code>类或者<code>RuntimeException</code>类继承来的<code>Exception</code>对象都是<strong>Unchecked exception</strong>。其余的被称为<strong>Checked exception</strong>。</p><p>Java编译器会根据你提供的异常处理器去检查所有的<strong>Checked exception</strong>。</p><hr><h3 id="2-Throwing-exception"><a href="#2-Throwing-exception" class="headerlink" title="2. Throwing exception"></a>2. Throwing exception</h3><h4 id="2-1-Checked-exception-declaration"><a href="#2-1-Checked-exception-declaration" class="headerlink" title="2.1 Checked exception declaration"></a>2.1 Checked exception declaration</h4><p>在Java中，成员方法在监测到其不能处理的情况后可以抛出异常。成员方法不仅仅可以<strong>返回值给编译器</strong>，也可以<strong>给编译器抛出异常</strong>。<br>此类方法语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException<br></code></pre></td></tr></table></figure><p>这个方法说明在创建此对象时，不仅仅可以产生一个<code>FileInput</code>对象，也可以在此对象产生错误的时候抛出一个<code>FileNotFoundException</code>异常。如果在创建对象的过程中产生了错误，那次对象不会被初始化，只会抛出一个异常。同时，系统也会去寻找一个能处理<code>FileNotFoundException</code>异常的异常处理器。</p><p>异常会在一下四种情况中被抛出：</p><blockquote><ol><li>引用一个会抛出Checked exception的方法，如上面的<code>FileInput</code>方法；</li><li>当检测到异常时通过<code>throw</code>语句抛出Checked exception；</li><li>在编写程序时产生了错误，如<code>RuntimeException</code>；</li><li>运行程序时的客观环境错误，如JVM的错误。</li></ol></blockquote><p>当遇到到前两点抛出的错误时，必须有相对应的异常处理器去处理这些异常，因为可以抛出异常的方法都是有可能陷入死循环的，必须有相应的处理措施。</p><p>在以上例子中，使用了<code>exception specification</code>去定义了一个可抛出异常的方法，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputClass</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException&#123; <br>        <span class="hljs-comment">//exception specification:throws FileNotFoundException</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>当然，一个方法也可能抛出不止一种类型的异常，需要在定义时<strong>列出所有异常类型，并用逗号隔开</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputClass</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException，EOFException&#123; <br>        <span class="hljs-comment">// ...</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，一方法必须声明其所有的可能抛出的Checked exception。Unchecked exception是你不能控制的 (Error) 或者是你应该避免的 (RuntimeExcwption)。如果一个方法没有全部定义出其可能抛出的Checked exception，编译器会报错。</p><hr><h4 id="2-2-Exception-throwing"><a href="#2-2-Exception-throwing" class="headerlink" title="2.2 Exception throwing"></a>2.2 Exception throwing</h4><p>异常声明完成后，需要在方法体中抛出(throw)异常。<br>一般过程为：</p><blockquote><ol><li>寻找合适的异常类型；</li><li>创建此类异常的对象；</li><li>抛出异常对象。</li></ol></blockquote><p>首先需要寻找并定义异常的类型，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EOFException</span>();<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EOFException</span>();<br><span class="hljs-keyword">throw</span> e;<br></code></pre></td></tr></table></figure><p>再抛出异常，<br>结合到例子中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">readData</span><span class="hljs-params">(Scanner in)</span> <span class="hljs-keyword">throws</span> EOFException<br>&#123;<br>    <span class="hljs-comment">//. . .</span><br>    <span class="hljs-keyword">while</span> (. . .)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!in.hasNext()) <span class="hljs-comment">// EOF encountered</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n &lt; len)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EOFException</span>();<br>        &#125;<br>        <span class="hljs-comment">//. . .</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>EOFException()</code>同时有一个有参构造方法，参数为字符串类型，可以更好的的描述此异常的含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is an End of file Exception!&quot;</span>;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EOFException</span>(i);<br></code></pre></td></tr></table></figure><hr><h4 id="2-3-Create-exception-class"><a href="#2-3-Create-exception-class" class="headerlink" title="2.3 Create exception class"></a>2.3 Create exception class</h4><p>当遇到的异常类型并不在标准异常类中时，可以创建我们自己的异常类。只需要从父类<code>Exception</code>或者其子类<strong>继承</strong>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileChildException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EOFException</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EOFException</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EOFException</span><span class="hljs-params">(String i)</span>&#123;<br>        <span class="hljs-built_in">super</span>(i);<br>    &#125;<br>&#125;<br><br>String <span class="hljs-title function_">readData</span><span class="hljs-params">(Scanner in)</span> <span class="hljs-keyword">throws</span> FileChildException<br>&#123;<br>    <span class="hljs-comment">//. . .</span><br>    <span class="hljs-keyword">while</span> (. . .)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!in.hasNext()) <span class="hljs-comment">// EOF encountered</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n &lt; len)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileChildException</span>();<br>        &#125;<br>        <span class="hljs-comment">//. . .</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FileChildException</code>子类一般会有一个<strong>默认的无参构造方法</strong>，以及一个<strong>有参的构造方法</strong>以表明此异常的具体信息。父类<code>Throwable</code>的方法<code>toString()</code>可以返回前面定义在有参构造方法里的信息。</p><hr><h3 id="3-Catching-exception"><a href="#3-Catching-exception" class="headerlink" title="3. Catching exception"></a>3. Catching exception</h3><p>如果一个异常被抛出后没有对应的处理措施，则包含其的程序就回被终止，并且在终端输出异常的类型以及stack trace。</p><p>为获取一个异常并提供异常处理方法，可以使用try-catch语句块，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果try语句块中抛出了定义在catch中类型的异常，则：</p><blockquote><ol><li>跳过try语句块中剩余的语句；</li><li>执行catch语句块中的语句。</li></ol></blockquote><p>如果try语句块中没有抛出任何异常，则catch语句块就会被跳过。<br>如果一个方法中的try语句块抛出了一个没有定义在catch中的异常，则立即跳出此方法，不会执行后面的语句。</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String filename)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename);<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            process input<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException exception)<br>    &#123;<br>        exception.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>read()</code>方法可能会抛出<code>IOException</code>异常，一旦异常被抛出，程序就回跳过其后的<code>while</code>循环，直接进入<code>catch</code>中的语句，最后输出<code>StackTrace</code>.</p><p>同时我们也可以直接把异常声明在方法头中，一旦方法体中有异常，直接让此方法抛出异常，并不用去catch，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename);<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>)<br>    &#123;<br>        process input<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，<strong>明确该如何处理某一异常</strong>情况下<strong>使用try-catch方法</strong>，<strong>否则</strong>就把异常在方法头中声明，<strong>抛出给方法</strong>。</p><p>注意：</p><blockquote><p>当一子类继承没有抛出异常的父类后，必须在子类方法中抓取所有的<code>check exception</code>，不允许在子类方法的方法头后使用<code>throws</code>关键字声明异常。</p></blockquote><p>也可以抓取多个exception，分开进行异常处理，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(UnknownHostException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以进行结合 (Java7)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(FileNotFoundException ｜ UnknownHostException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是使用这种结构的异常类之间不能有继承关系。</p><p>在抓取到异常后，也可以受用异常类的方法去获取异常对象的信息：</p><p>得到异常对象的更多信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">e.getMessage();<br></code></pre></td></tr></table></figure><br>得到具体的错误信息，或者异常对象的所属类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">e.getClass.getName();<br></code></pre></td></tr></table></figure></p><p><code>retry</code>语句可以使<code>try</code>语句块再次运行一遍，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span>&#123;      <span class="hljs-comment">// pseudo code</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasFailed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(!hasFailed)&#123;<br>            <span class="hljs-comment">// do the normal thing, which may trigger</span><br>            <span class="hljs-comment">// an exception </span><br>        &#125;      <br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// do something safe </span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(ExceptionType et)&#123;<br>        <span class="hljs-comment">// log exception</span><br>        hasFailed = <span class="hljs-literal">true</span>;<br>        retry; <span class="hljs-comment">// resumes from the beginning of try &#125;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h4 id="3-1-NDECC"><a href="#3-1-NDECC" class="headerlink" title="3.1 NDECC"></a>3.1 NDECC</h4><p>当一个异常被抛出，程序就会寻找<strong>能够</strong>处理此异常的<strong>nearest dynamically enclosing catch clause(NDECC)</strong>，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">h</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;g();&#125;<br>    <span class="hljs-keyword">catch</span>(ET3 e)&#123; ... &#125; <span class="hljs-comment">// c1</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;f();&#125;<br>    <span class="hljs-keyword">catch</span>(ET2 e)&#123; ... &#125; <span class="hljs-comment">// c2</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">try</span>&#123;statement;&#125;<br>    <span class="hljs-keyword">catch</span>(ET1 e)&#123; ... &#125; <span class="hljs-comment">// c3</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>讨论以下种情况：</p><blockquote><ol><li><code>statement</code>语句抛出了<code>ET1</code>类的异常，并且处于c3的语句能够处理此异常，则进行处理；</li><li><code>statement</code>语句抛出了<code>ET2</code>类的异常，并且处于c3的语句不能够处理此异常，则处于c2的语句进行处理；</li><li><code>statement</code>语句抛出了<code>ET3</code>类的异常，并且处于c3的语句不能够处理此异常，则处于c1的语句进行处理；</li></ol></blockquote><p>注意：</p><blockquote><p>若<code>ET1</code>类是<code>ET</code>类的子类，则<code>ET</code>类的<code>catch clause</code>可以处理<code>ET1</code>类的异常。</p></blockquote><h4 id="3-2-Rethrowing-excepltion"><a href="#3-2-Rethrowing-excepltion" class="headerlink" title="3.2 Rethrowing excepltion"></a>3.2 Rethrowing excepltion</h4><p>重新抛出异常通常有两种情况：<br>1.改变异常的类型；</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>    access the database<br>&#125; <br><span class="hljs-keyword">catch</span> (SQLException e)<br>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;database error: &quot;</span> + e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>2.只记录异常，不改变异常的类型，再次抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>    access the database<br>&#125; <br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>    logger.log(level, message, e);<br>    <span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4-The-finally-statement"><a href="#4-The-finally-statement" class="headerlink" title="4. The finally statement"></a>4. The finally statement</h3><p>当一个方法抛出异常后，它就回终止运行之后的代码并跳出此方法。但有时需要此方法运行完成，此时就需要用到<code>finally</code>关键字。</p><p>不管有无异常抛出，<code>finally</code>语句块中的内容都会被执行。</p><p>看以下例子，来自C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019（优秀的Java参考书，十分推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(. . .);<br><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-comment">// code that might throw exceptions</span><br>    <span class="hljs-comment">// 2</span><br>&#125; <br><span class="hljs-keyword">catch</span> (IOException e)<br>&#123;<br>    <span class="hljs-comment">// 3</span><br>    <span class="hljs-comment">// show error message</span><br>    <span class="hljs-comment">// 4</span><br>&#125; <br><span class="hljs-keyword">finally</span><br>&#123;<br>    <span class="hljs-comment">// 5</span><br>    in.close();<br>&#125; <br><span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>讨论以下几种情况：</p><blockquote><ol><li><strong><em>没有</em>抛出异常</strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，再执行<code>finally</code>语句块中的代码，最后执行<code>finally</code>语句块后的第一行代码。顺序为<strong>1，2，5，6</strong>；</p></blockquote></li><li><strong><em>抛出</em>异常并被catch语句 <em>获取</em></strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，直到抛出异常的那行代码，其后的代码都会被跳过。再执行<code>catch</code>语句块中的代码，最后执行<code>finally</code>代码块中的代码。之后再分两类情况：</p><blockquote><p><strong>catch代码块中<em>没有</em> 异常抛出</strong>：<br>在上述过程后，最后执行<code>finally</code>语句块后的第一行代码。顺序为<strong>1，3，4，5，6</strong>；</p><p><strong>catch代码块中<em>有</em> 异常抛出</strong>：<br>catch语句块中只会运行到抛出异常的那行代码，之后的代码会被跳过。此异常被抛出后，会抛出至引用此方法的方法。顺序为<strong>1，3，5</strong>；</p></blockquote></blockquote></li><li><strong>抛出异常并<em>没有</em> 被catch语句获取</strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，直到抛出异常的那行代码，其后的代码都会被跳过。再执行<code>finally</code>代码块中的代码。异常被抛出至引用此方法的方法。 顺序为<strong>1，5</strong>。</p></blockquote></li></ol></blockquote><hr><h3 id="6-Standard-exception-in-Java"><a href="#6-Standard-exception-in-Java" class="headerlink" title="6. Standard exception in Java"></a>6. Standard exception in Java</h3><p>参考：<br><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html">Exception (Java SE 11 &amp; JDK 11) - docs.oracle.com</a></p><iframe height="850" width="100%" src="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html" frameborder="0" allowfullscreen> </iframe><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.<br>“Java API Reference,” <em>docs.oracle.com</em>. <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html</a> (accessed Oct. 08, 2021).</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本章只介绍了Java异常抛出的基本内容。如Rethrowing and Chaining Exceptions、try-with-Resources Statement、Stack Trace等内容会持续更新。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程之接口 Java OOP Interface</title>
    <link href="/2021/10/05/Java-oop-interface/"/>
    <url>/2021/10/05/Java-oop-interface/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed!&quot;</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Equilateral Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Triangle x)</span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewRightTriangle);; <span class="hljs-comment">// 打印直角三角形</span><br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewIsoscelesRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewEquilateralTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例是在在之前文章<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a>与<a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a>中提到了，运用了OOP的两大特性。</p><p>看以下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Shape&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Shape printed.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Rectangle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Rectangle printed.&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Circle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Circle printed.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Triangle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintAbsShape</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Shape s)</span>&#123;<br>        s.print();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是仔细观察发现，<strong>第一个例子中的父类<code>Triangle</code>与第二个例子中的父类<code>Shape</code>中的方法始终没有被引用</strong>，显得十分多余。因为此<code>Shape</code>父类本来就是提供一个<strong>入口</strong>，并让其子类继承并对其方法进行重写等操作。<br>因此父类中的方法不需要被定义的十分具象，只需要告诉衍生类方法的大概模样就足够了，因此父类可以变的 <strong>抽象(abstract)</strong> 或者只成为一个连通子类的 <strong>接口(interface)</strong>。</p><hr><h3 id="Abstract-class-amp-method"><a href="#Abstract-class-amp-method" class="headerlink" title="Abstract class &amp; method"></a>Abstract class &amp; method</h3><p>在Java中，通过修饰符<code>abstract</code>来修饰一个方法为<strong>抽象的</strong>。此修饰的方法是<strong>残缺的，不完整的</strong>，<strong>只包含方法的声明并没有方法体</strong>，语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>把<code>abstract</code>应用到上面的例子中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// abstract 类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Rectangle&quot;</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Circle&quot;</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Triangle&quot;</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Right Triangle&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Isosceles Triangle&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Equilateral Triangle&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Equilateral Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintAbsShape</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Shape s)</span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesTriangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>包含<code>abstract</code>方法的类被称为<code>abstract</code>类，此类必须<strong>被修饰为<code>abstract</code></strong>。<code>abstract</code>类允许在其类中创建<strong>0个，一个或者多个</strong><code>abstract</code>方法，</p></li><li><p><code>abstract</code>类中的<strong>所有<code>abstract</code>方法需要被其子类重写</strong>以完成方法体。当某一子类继承<code>abstract</code>父类后，如要使用此子类创造对象，必须完成子类中所有从父类<code>abstract</code>方法继承来方法的定义。<strong><code>static</code>方法、<code>private</code>实例方法、构造方法不能被重写</strong></p><ul><li>若<strong>不对父类中所有的<code>abstract</code>方法进行重写</strong>，则此子类也包含了从父类继承的<code>abstract</code>方法，<strong>则其也是<code>abstract</code>类</strong>，也需要修饰为<code>abstract</code>。</li></ul></li><li><p><strong>不允许直接用abstract类来创建实例</strong>，只可以来定义类型。以下不允许：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Shape</span> <span class="hljs-variable">aShape</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>(); <span class="hljs-comment">// Error!</span><br></code></pre></td></tr></table></figure></li><li><p>子类<strong>可以重写父类中的非<code>abstract</code>方法</strong>并定义为<code>abstract</code>，可以使此父类中的方法在子类中失效。</p></li><li>一个<code>abstract</code>类的父类可能是非<code>abstract</code>类。</li></ul><hr><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul><li><code>interface</code>把<code>abstract</code>类更进一步的抽象，使这个类变得<strong>完全<code>abstract</code></strong>。</li><li>在此类中只声明<strong>方法名</strong>、<strong>参数列表</strong>和<strong>返回值类型</strong>，<strong>没有方法体</strong>，只提供方法的<strong>形式</strong>，没有定义<strong>方法体</strong>。<ul><li>对于实例成员(Instance members)：<ul><li>不可以定义属性；</li><li>都被<code>public</code>和<code>abstract</code>修饰（隐性修饰，关键字可省略）；</li></ul></li><li>对于静态成员(Static members)：<ul><li>所有属性都被<code>public</code>,<code>static</code>和<code>final</code>修饰（隐性修饰，关键字可省略）；</li><li>所有方法都被<code>public</code>（隐性修饰，关键字可省略），并为非<code>abstract</code>类。</li></ul></li></ul></li><li>任何 <strong>实现(implement)</strong> 此接口的类都会与<code>interface</code>类相似，都会得知能从此接口调用到什么方法，类似于类之间建立了一个协议。</li><li>使用<code>interface</code>时，<strong>用<code>interface</code>关键字</strong>代替原来的<code>class</code>关键字。</li></ul><p><code>interface</code>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// public, static and final field</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>; <span class="hljs-comment">// public abstract 方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>; <span class="hljs-comment">// public abstract 方法</span><br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getShapeSuperName</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shape&quot;</span>&#125; <span class="hljs-comment">// public static 方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Rectangle&quot;</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Circle&quot;</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Triangle&quot;</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Equilateral Triangle printed&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintShape</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Shape s)</span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesTriangle</span>());<br>        PrintOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>当某一类要使用此接口时，也就是说此类要实现(implements)此接口，就需要使用<code>implements</code>关键字，类似于继承。</p><ul><li>此类可以访问父类中constants 和 <code>static</code> 的方法;</li><li>此类通过重写来具化声明在接口中的方法;</li><li>如果没有初始化父类中所有的<code>abstract</code>方法，则此方法需要被定义为<code>abstract</code>。</li></ul></li><li><p>当此类实现接口后，其就变成了一个常规的类，能够被子类继承，如 <code>RightTriangle</code>继承 <code>Triangle</code>等。</p></li><li><p><code>interface</code>中的方法是被隐性修饰为<code>public</code>的。当某类实现此<code>interface</code>时，此类中从<code>interface</code>重写的方法必须被修饰为<code>public</code>，否则会变为默认访问权限，会导致此类被继承后的访问权限变小，产生错误。</p></li><li><p>上面例子main()中发生了upcasting，但是并不用明确到底转型到了哪个<code>Shape</code>，无论是正常的<code>Shape</code>，<code>abstract</code>修饰的<code>Shape</code>还是<code>Shape</code>接口。</p></li><li><p>以上例子中，还有一个定义在<code>interface</code>中的属性<code>int NUM = 10;</code>，此属性都是隐性修饰为<code>static</code>和<code>final</code></p></li></ul><hr><h3 id="Interface-inheritance"><a href="#Interface-inheritance" class="headerlink" title="Interface inheritance"></a>Interface inheritance</h3><h4 id="Combined-interface"><a href="#Combined-interface" class="headerlink" title="Combined interface"></a>Combined interface</h4><ul><li>在继承中，子类每次<strong>只能继承一个</strong>父类，因为父类是一个完整的类，有具体的内存空间联系，同时继承多个类会导致冲突，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassB</span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassAandB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassA</span>, ClassB&#123;...&#125; <span class="hljs-comment">// Error! 不允许</span><br></code></pre></td></tr></table></figure><ul><li>但是一个<code>interface</code>只是一个形式，没有具体的内存空间与之联系，因此<code>interface</code>与继承不同，一个类可以同时实现<strong>多个</strong><code>interface</code>，只需要在<code>implements</code>关键字后列出所有<code>interface</code>名并用逗号隔开。语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceA</span>, InterfaceB, InterfaceC&#123;&#125;<br></code></pre></td></tr></table></figure><p>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Perimeter</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Area</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreatShape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span>, Perimeter, Area&#123; <span class="hljs-comment">// GreatShape类结合了3个接口一起实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Great Shape with Perimeter and Area&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;A Great Shape printed&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Perimeter of A Great Shape&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Area of A Great Shape&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreatTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GreatShape</span>&#123; <span class="hljs-comment">// 继承父类GreatShape</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Great Triangle with Perimeter and Area&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;A Great Triangle printed&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Perimeter of A Great Triangle&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Area of A Great Triangle&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintShape</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Shape s)</span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintName</span><span class="hljs-params">(Shape x)</span>&#123;<br>        x.name();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintPerimeter</span><span class="hljs-params">(Perimeter x)</span>&#123;<br>        x.getPerimeter();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintArea</span><span class="hljs-params">(Area x)</span>&#123;<br>        x.getArea();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GreatTriangle</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreatTriangle</span>();<br>        PrintOut(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintName(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintPerimeter(g); <span class="hljs-comment">// 可看作Perimeter的方法</span><br>        PrintArea(g); <span class="hljs-comment">// 可看作Area的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">A Great Triangle printed<br>Great Triangle with Perimeter and Area<br>Print the Perimeter of A Great Triangle printed<br>Print the Area of A Great Triangle printed<br></code></pre></td></tr></table></figure><ul><li>以上例子中，<code>PrintShape</code>类中有4个方法，分别使用了不同接口当作其方法的参数，在其<code>main()</code>中当一个<code>GreatTriangle</code>对象创建并调用这4个方法时，此对象会upcast到这4个接口，并late binding到相应的方法体。</li></ul><hr><h4 id="Inherited-interface"><a href="#Inherited-interface" class="headerlink" title="Inherited interface"></a>Inherited interface</h4><ul><li>当需要给某个<code>interface</code><strong>添加新的方法</strong>，或者要<strong>结合</strong>多个<code>interface</code>时，可以让某个<code>interface</code>对另一个或多个<code>interface</code>进行继承，这会产生<strong>新的</strong><code>interface</code>。</li></ul><p>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Perimeter</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Area</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GreatShapeInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>, Perimeter, Area&#123; <span class="hljs-comment">// 继承了3个接口并产生一个新的接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 以下结合了3个接口的4个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">what</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 并添加了新的方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreatTriangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GreatShapeInterface</span>&#123; <span class="hljs-comment">// 继承新的接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Great Triangle with Perimeter and Area&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;A Great Triangle printed&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Perimeter of A Great Triangle&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Print the Area of A Great Triangle&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">what</span><span class="hljs-params">()</span>&#123;System.out.println(<span class="hljs-string">&quot;Inherited form several interfaces!&quot;</span>);&#125; <span class="hljs-comment">// 完成新方法的定义</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintShape</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Shape s)</span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintName</span><span class="hljs-params">(Shape x)</span>&#123;<br>        x.name();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintPerimeter</span><span class="hljs-params">(Perimeter x)</span>&#123;<br>        x.getPerimeter();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintArea</span><span class="hljs-params">(Area x)</span>&#123;<br>        x.getArea();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">What</span><span class="hljs-params">(GreatShapeInterface x)</span>&#123;<br>        x.what(); <span class="hljs-comment">// 调用新方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GreatTriangle</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreatTriangle</span>();<br>        PrintOut(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintName(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintPerimeter(g); <span class="hljs-comment">// 可看作Perimeter的方法</span><br>        PrintArea(g); <span class="hljs-comment">// 可看作Area的方法</span><br>        What(g); <span class="hljs-comment">// 可看作GreatShapeInterface的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>当通过继承来结合一些接口时，要注意各个接口中的方法名是否相同，为<strong>增加可读性</strong>以及<strong>减少错误</strong>的产生，最好<strong>避免使用同名的方法</strong>。</p><hr><h3 id="Interface-field"><a href="#Interface-field" class="headerlink" title="Interface field"></a>Interface field</h3><p>定义在接口中的属性都是隐性修饰为<code>static</code>和<code>final</code>，并且是<code>public</code>的。<br>注意定义在接口中的属性必须为<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-1-final-%E5%B1%9E%E6%80%A7">编译时常量 (compile-time constant) 不能是空白常量 (blank final)</a>。<br>此类属性并不是接口的一部分，只是被储存在接口的静态 (static) 内存中。</p><hr><h3 id="Interface-Cloning"><a href="#Interface-Cloning" class="headerlink" title="Interface Cloning"></a>Interface Cloning</h3><h4 id="Original-copy"><a href="#Original-copy" class="headerlink" title="Original copy"></a>Original copy</h4><p>一般对一个基础变量进行复制会进行以下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">int1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>int1 = int2;<br></code></pre></td></tr></table></figure><p>但对一个对象进行复制也进行类似语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">classType</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">classType</span>();<br><span class="hljs-type">classType</span> <span class="hljs-variable">object2</span> <span class="hljs-operator">=</span> object1;<br></code></pre></td></tr></table></figure><p>这样会使两个对象指向同一个引用，并不是单独的，改变一个对象的属性会影响到另外一个，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> inNum)</span>&#123;<br>        number = inNum;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyObjectTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>        s1.setNumber(<span class="hljs-number">111111</span>);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1; <span class="hljs-comment">// 直接复制对象</span><br>        s1.setNumber(<span class="hljs-number">222222</span>); <span class="hljs-comment">// 改变一个对象的属性</span><br>        System.out.printf(<span class="hljs-string">&quot;s1 number: %d\ns2 number: %d\n\n&quot;</span>,s1.getNumber(),s2.getNumber());<br>        System.out.printf(<span class="hljs-string">&quot;s1 == s2? %b&quot;</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 number: <span class="hljs-number">222222</span><br>s2 number: <span class="hljs-number">222222</span> <span class="hljs-comment">// 收到另一对象的影响，一起改变</span><br><br>s1 == s2? <span class="hljs-literal">true</span> <span class="hljs-comment">// 实际上指向同一引用，为同一对象</span><br></code></pre></td></tr></table></figure><hr><h4 id="Shallow-Clone"><a href="#Shallow-Clone" class="headerlink" title="Shallow Clone"></a>Shallow Clone</h4><p>为了解决上面所说的问题，就需要用到<code>clone</code>方法，可以使复制的对象一开始有和被复制的对象有相同的成员，但之后也可以被<strong>单独对待</strong>，有自己的属性。</p><center><img src="/2021/10/05/Java-oop-interface/1.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">A shallow copy - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><code>clone</code>方法是在<code>Object</code>类中被修饰为<code>protected</code>的方法。不能随意的调用。只能进行属性间的复制，也就是说只能对对象中为基础类型（primitive type）的属性进行复制。若对一个引用类型的属性或对象进行复制，则只会使克隆的对象指向相同的引用，和被克隆的对象有相同的信息。<br>因此clone分为<strong>Shallow Clone(浅克隆)和Deep Clone(深克隆)</strong>。</p><hr><p><strong>Shallow Clone</strong>只会克隆基础类型的属性，不会克隆引用类型的属性。</p><center><img src="/2021/10/05/Java-oop-interface/2.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">A shallow copy - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><strong>Shallow Clone步骤：</strong></p><ol><li>实现<code>Cloneable</code>接口，否则在非<code>Cloneable</code>对象调用<code>clone()</code>方法会抛出<code>CloneNotSupportedException</code>异常；</li><li>重写<code>clone()</code>方法并修饰为<code>public</code>，添加异常处理以处理<code>CloneNotSupportedException</code>异常。</li></ol><p>应用到前面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> inNum)</span>&#123;<br>        number = inNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-built_in">super</span>.clone();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShallowCloneTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>        s1.setNumber(<span class="hljs-number">11111</span>);<br>        s1.setName(<span class="hljs-string">&quot;shape1&amp;2&quot;</span>);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Shape)s1.clone();<br>        System.out.printf(<span class="hljs-string">&quot;s1 number: %d, s2 number: %d\ns1 name: %s, s2 name: %s\n\n&quot;</span>,s1.getNumber(),s2.getNumber(),s1.getName(),s2.getName());<br><br>        s1.setNumber(<span class="hljs-number">22222</span>);<br>        s1.setName(<span class="hljs-string">&quot;s1 Updated&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;s1 number: %d, s2 number: %d\ns1 name: %s, s2 name: %s\n\n&quot;</span>,s1.getNumber(),s2.getNumber(),s1.getName(),s2.getName());<br><br>        System.out.printf(<span class="hljs-string">&quot;s1 == s2? %b&quot;</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 number: <span class="hljs-number">11111</span>, s2 number: <span class="hljs-number">11111</span><br>s1 name: shape1&amp;<span class="hljs-number">2</span>, s2 name: shape1&amp;<span class="hljs-number">2</span><br><br>s1 number: <span class="hljs-number">22222</span>, s2 number: <span class="hljs-number">11111</span> <span class="hljs-comment">// s1改变 不会影响到克隆的s2</span><br>s1 name: s1 Updated, s2 name: shape1&amp;<span class="hljs-number">2</span><br><br>s1 == s2? <span class="hljs-literal">false</span> <span class="hljs-comment">// 被克隆的对象与克隆对象指向不同的引用</span><br></code></pre></td></tr></table></figure><p>接下来加入一个新的类<code>Position</code>，并当作Shape类的一个属性，进行Shallow Clone：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Position pos; <span class="hljs-comment">// a reference type field</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> inNum)</span>&#123;<br>        number = inNum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPos</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> pos.getPosition();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPos</span><span class="hljs-params">(Position inPos)</span>&#123;<br>        pos = inPos;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-built_in">super</span>.clone(); <span class="hljs-comment">// shallow clone ONLY</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPosition</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;(&quot;</span>+x+<span class="hljs-string">&quot;,&quot;</span>+y+<span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> InX, <span class="hljs-type">int</span> Iny)</span>&#123;<br>        x = InX;<br>        y = Iny;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCloneTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Position</span> <span class="hljs-variable">aPos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Position</span>();<br>        aPos.setPosition(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>        s1.setPos(aPos);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Shape)s1.clone(); <span class="hljs-comment">// clone</span><br>        System.out.printf(<span class="hljs-string">&quot;s1 position: %s, s2 position: %s\n\n&quot;</span>,s1.getPos(),s2.getPos());<br><br>        aPos.setPosition(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        s1.setPos(aPos); <span class="hljs-comment">// 改变s1的 reference type file value</span><br>        System.out.printf(<span class="hljs-string">&quot;s1 position: %s, s2 position: %s\n\n&quot;</span>,s1.getPos(),s2.getPos());<br><br>        System.out.printf(<span class="hljs-string">&quot;s1 == s2? %b&quot;</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>s1 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), s2 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">// 发现s1和s2的reference type filed - pos同时改变了</span><br><br>s1 == s2? <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>以上例子印证了<strong>Shallow Clone</strong>只会克隆基础类型的属性，不会克隆引用类型的属性。</p><p>因此需要Deep Clone，不仅仅把reference type的属性克隆，也同时把reference type属性的引用地址克隆，达到彻底的克隆。</p><hr><h4 id="Deep-Clone"><a href="#Deep-Clone" class="headerlink" title="Deep Clone"></a>Deep Clone</h4><p>为了实现Deep Clone，在以上例子中也需要把<code>Position</code>类可克隆化，并且修改其<code>clone()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Position pos;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> inNum)</span>&#123;<br>        number = inNum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPos</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> pos.getPosition();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPos</span><span class="hljs-params">(Position inPos)</span>&#123;<br>        pos = inPos;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-built_in">super</span>.clone(); <span class="hljs-comment">// 浅克隆</span><br>            temp.pos = (Position) pos.clone(); <span class="hljs-comment">// 深克隆</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123; <span class="hljs-comment">// 可克隆化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写clone()方法</span><br>        <span class="hljs-type">Position</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Position) <span class="hljs-built_in">super</span>.clone();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPosition</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;(&quot;</span>+x+<span class="hljs-string">&quot;,&quot;</span>+y+<span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> InX, <span class="hljs-type">int</span> Iny)</span>&#123;<br>        x = InX;<br>        y = Iny;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCloneTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Position</span> <span class="hljs-variable">aPos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Position</span>();<br>        aPos.setPosition(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>        s1.setPos(aPos);<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Shape)s1.clone();<br>        System.out.printf(<span class="hljs-string">&quot;s1 position: %s, s2 position: %s\n\n&quot;</span>,s1.getPos(),s2.getPos());<br><br>        aPos.setPosition(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        s1.setPos(aPos);<br>        System.out.printf(<span class="hljs-string">&quot;s1 position: %s, s2 position: %s\n\n&quot;</span>,s1.getPos(),s2.getPos());<br><br>        System.out.printf(<span class="hljs-string">&quot;s1 == s2? %b&quot;</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>s1 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">// 深克隆进行后 s1改变并不会影响s2</span><br><br>s1 == s2? <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>在决定是否使用<code>clone()</code>方法前，考虑：</p><ol><li>默认的<code>clone()</code>方法是否适合；</li><li>若不适合，则重写<code>clone()</code>方法；</li><li>不应该使用<code>clone()</code>方法。</li></ol><p>若考虑使用：</p><ol><li>实现<code>Cloneable</code>接口；</li><li>重写<code>clone()</code>方法，并用<code>public</code>修饰。</li></ol><hr><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>两个使用<code>interface</code>的原因：</p><ol><li>使某一对象upcast至不止一个父类型，使其变得灵活；</li><li>防止这一抽象的类被直接使用</li></ol><p>如果明确某一类会被定义为父类，则可以直接让其定义成一个<code>interface</code>（或者<code>abstract</code>，但是优先考虑<code>interface</code>）。<br>但要注意不能过度使用<code>interface</code>，可以先写出具象的父类，分析必要性之后再将其改成<code>interface</code>。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java的接口还有更深层次的内容，会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的多态性(Polymorphism)</title>
    <link href="/2021/10/02/Java-oop-polymorphism/"/>
    <url>/2021/10/02/Java-oop-polymorphism/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="Polymorphism-Introduction"><a href="#Polymorphism-Introduction" class="headerlink" title="Polymorphism Introduction"></a>Polymorphism Introduction</h3><p>多态性(Polymorphism)与<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">继承性(Inheritance)</a>有着密不可分的联系，是对继承性(Inheritance)的延伸与扩展。<strong>其能改进代码的组织，增加可读性，以及使代码具有跟好的扩展性</strong>。<br>我归纳的多态性(Polymorphism)定义：</p><blockquote><p>Polymorphic method invoking allows one (sub)class to <strong>perform differently</strong> from another similar (sub)class, and both of them <strong>are inherited from the same base class</strong>. And the different performance refer to the <strong>methods that can be invoked through the base class</strong>, which means the base class is invoking the method of the derived class(<strong>late banding</strong>).<br>The three conditions of Polymorphism are the occurrence of <strong>inheritance, overwriting and upcasting</strong>. </p></blockquote><p>先看一个案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed!&quot;</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Equilateral Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(RightTriangle x)</span>&#123; <span class="hljs-comment">// 打印直角三角形的方法</span><br>        x.Print();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(IsoscelesRightTriangle x)</span>&#123; <span class="hljs-comment">// 打印等腰直角三角形的方法</span><br>        x.Print();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(EquilateralTriangle x)</span>&#123; <span class="hljs-comment">// 打印等边三角形的方法</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br><br>        <span class="hljs-type">RightTriangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>();<br>        PrintOut(aNewRightTriangle); <span class="hljs-comment">// 打印直角三角形</span><br><br>        <span class="hljs-type">IsoscelesRightTriangle</span> <span class="hljs-variable">aNewIsoscelesRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>();<br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        <span class="hljs-type">EquilateralTriangle</span> <span class="hljs-variable">aNewEquilateralTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>();<br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>上面的例子中定义了一个<code>Triangle</code>父类，衍生出了三个子类<code>RightTriangle</code>、<code>IsoscelesRightTriangle</code>和<code>EquilateralTriangle</code>。定义了一个打印工具<code>PrintTriangle</code>，为了打印出不同类的对象，在其中定义了有对应类型参数的方法<code>PrintOut(Type x)</code>.</p></blockquote><p>上面的例子运行没有问题，但是也带来了一些问题：</p><ol><li>为了实现一个相同的方法<code>PrintOut()</code> 要针对每一类写一个方法，增加了很多行代码；</li><li>如果要增加一个类似于<code>PrintOut()</code>的方法或者增加<code>Triangle</code>的衍生类，就需要添加或者修改很多代码。</li></ol><p>为了解决这些问题，可以把这些相同的<code>PrintOut()</code>方法<strong>写成一个方法</strong>，并用<strong>父类当作参数</strong>，而不是具体的某一个衍生类。这样可以不考虑这个父类有多少个衍生类，让<strong>方法直接与父类沟通</strong>，让父类决定把方法具体给哪一个子类调用。</p><p>而这就是多态性(Polymorphism)的作用。</p><p>因此可以把代码修改成以下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed!&quot;</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Equilateral Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Triangle x)</span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewRightTriangle);; <span class="hljs-comment">// 打印直角三角形</span><br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewIsoscelesRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewEquilateralTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Conditions-of-polymorphic-method-call"><a href="#Conditions-of-polymorphic-method-call" class="headerlink" title="Conditions of polymorphic method call"></a>Conditions of polymorphic method call</h3><p>Polymorphic method call 实现需要有三个条件：</p><blockquote><ol><li><strong>Inheritance (继承)</strong></li><li><strong>Overriding (重写)</strong></li><li><strong>Upcasting (向上转型)</strong></li></ol></blockquote><h4 id="Condition1-Inheritance"><a href="#Condition1-Inheritance" class="headerlink" title="Condition1-Inheritance"></a>Condition1-Inheritance</h4><p>Polymorphic method call适用的不同类之间需要有<strong>继承关系</strong>，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed!&quot;</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Equilateral Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="Condition2-Overriding"><a href="#Condition2-Overriding" class="headerlink" title="Condition2-Overriding"></a>Condition2-Overriding</h4><p>正如上面例子中每个子类中都有<strong>重写</strong>父类方法的方法<br>条件：</p><ol><li>重写父类的实例方法，不能是<code>static</code>修饰的方法（包括<code>this</code>和<code>super</code>关键字）;</li><li>方法必须是从父类继承的；</li><li>与父类的方法有相同的Signature(i.e. method name, method argument type list)。</li></ol><h4 id="Condition3-Upcasting"><a href="#Condition3-Upcasting" class="headerlink" title="Condition3-Upcasting"></a>Condition3-Upcasting</h4><p>Upcasting（向上转型）指的是使一个对象<strong>引用至它的父类</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br></code></pre></td></tr></table></figure><p>例子中首先创建了一个<code>RightTriangle</code>类的对象，然后马上赋值给了一个<code>Triangle</code>类对象。这并不会使编译器报错，因为这两个类有继承的关系，形成了Upcasting（向上转型）。</p><hr><h3 id="Late-Binding"><a href="#Late-Binding" class="headerlink" title="Late Binding"></a>Late Binding</h3><p>Polymorphsim又称<strong>late binding(后链接)、dynamic binding(动态链接) 或 run-time binding(运行时链接)</strong>。</p><blockquote><p>Binding(链接)：<br>连接一个<strong>方法调用语句</strong>与<strong>方法体</strong>叫做Binding(链接)。</p><p>Early binding(前链接)：<br>Binding(链接)发生在程序<strong>运行之前</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>aNewRightTriangle.Print(); <span class="hljs-comment">// 打印直角三角形</span><br></code></pre></td></tr></table></figure><p>但是在例子中运行到以上代码的时候，编译器并不能用Early binding(前链接)去找到<code>Print()</code>方法的<strong>正确的方法体</strong>，因为在<code>Print()</code>方法的定义中只有一个<code>Triangle</code>类的参数，它并不知道具调用了哪一个类型的参数类型以找到对应的正确方法体。</p><hr><p>解决方法就是late binding(后链接)，也就是Polymorphic method call。late binding(后链接)发生在运行时，因此也被称为dynamic binding(动态链接) 或 run-time binding(运行时链接)。</p><p>当late binding（后链接）被使用时，<strong>一种后链接机制</strong>会<strong>判断</strong>运行时的<strong>对象类型</strong>，并调用其<strong>相对应正确的方法体</strong>，尽管<strong>编译器还是不知道</strong>现时的对象类型。</p><p>在Java中，所有的方法链接都是使用late binding(后链接)，除了<code>static</code>或者<code>final</code>方法。<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-3-final-%E6%96%B9%E6%B3%95">一旦定义成<code>final</code>方法，此方法就<strong>无法被修改</strong>，也不会被子类重写</a>。这就保证了其可以在编译前就被连接起来，即，使用了early binding(前链接)，使得late binding(后链接)变得没有必要，不用去在<code>final</code>方法使用。这也会使调用<code>final</code>方法更加有效率（但大多数情况下并不会有明显的提升，因为JVM会自动处理好运行的效率）。</p><hr><p>当在<code>PrintOut(Triangle x)</code>方法体中运行以下代码时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.Print();<br></code></pre></td></tr></table></figure><br>看似调用的是<code>Triangle</code>父类的<code>Print()</code>方法，但是因为late binding(后链接)，实际上调用的是<code>RightTriangle.Print()</code>方法，这就体现出了Polymorphism的用处。</p><hr><p>总的来说，Polymorphism体现在<strong>继承和重写方法的基础上</strong>，并由upcasting从<strong>子类向上到父类</strong>，再由late binding从<strong>父类向下到子类</strong>，这一环形体现。</p><hr><h3 id="Extensibility"><a href="#Extensibility" class="headerlink" title="Extensibility"></a>Extensibility</h3><p>基于Polymorphism，可以向现有的代码中更方便的<strong>加入新的类或者方法</strong>。用以上案例举例，可以添加新的Triangle子类，而无需去改变PrintOut()方法，使参数<strong>只与父类联系</strong>，无须具体到某一子类。这就是提高了代码的<strong>拓展性</strong>。</p><p>在原来的类中加入新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Triangle printed!&quot;</span>); <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义等腰三角形子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Right Triangle printed!&quot;</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpecialRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RightTriangle</span>&#123; <span class="hljs-comment">//定义特殊直角三角形子类继承直角三角形</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Special Right Triangle printed!&quot;</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Right Triangle printed!&quot;</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A Isosceles Equilateral Triangle printed!&quot;</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 无须改变此类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintOut</span><span class="hljs-params">(Triangle x)</span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <br>        PrintOut(aNewRightTriangle); <br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewIsoscelesRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>(); <br>        PrintOut(aNewIsoscelesRightTriangle); <br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewEquilateralTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EquilateralTriangle</span>(); <br>        PrintOut(aNewEquilateralTriangle); <br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewIsoscelesTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesTriangle); <span class="hljs-comment">// 打印等腰三角形</span><br><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewSpecialRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpecialRightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewSpecialRightTriangle); <span class="hljs-comment">// 打印特殊直角三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>添加了两个新的类，<code>IsoscelesTriangle</code>类继承了<code>Triangle</code>类，<code>SpecialRightTriangle</code>继承了<code>RightTriangle</code>类，并且这两个新的类都重写了父类的<code>Print()</code>方法。而因为Polymorphism，<code>PrintOut()</code>方法不需要改变，就可以使新的类调用，因为他们都是父类<code>Triangle</code>的衍生类。</p></blockquote><p>Polymorphism可以使程序员把<strong>需要改变的部分</strong>与<strong>保持不变的部分</strong>分开来。</p><hr><h3 id="WARNING-private-method-“overriding”"><a href="#WARNING-private-method-“overriding”" class="headerlink" title="WARNING-private method “overriding”"></a>WARNING-<code>private</code> method “overriding”</h3><p>在之前文章中提到过<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-3-final-%E6%96%B9%E6%B3%95">重写父类的<code>private</code>方法</a>，看似可行，实则子类不能访问父类的<code>private</code>方法，无法重写，只是创造了一个同名的方法。<br>因此当子类中出现了“重写父类的<code>private</code>方法”，并没有满足Polymorphism条件之一的Overriding，所以无法应用Polymorphism。</p><hr><h3 id="WARNING-invoking-filed-and-static-method"><a href="#WARNING-invoking-filed-and-static-method" class="headerlink" title="WARNING-invoking filed and static method"></a>WARNING-invoking filed and <code>static</code> method</h3><p>只有调用方法的时候才会用到Polymorphism，若<strong>直接访问对象属性</strong>，则就会在编译时访问，不会应用Polymorphism，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> Angle;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> Angle;&#125;    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        System.out.println(<span class="hljs-string">&quot;Angle1: &quot;</span>+ aNewRightTriangle.Angle); <span class="hljs-comment">// 直接访问Triangle类对象的属性</span><br>        System.out.println(<span class="hljs-string">&quot;getAngle1: &quot;</span>+ aNewRightTriangle.getAngle()+<span class="hljs-string">&quot;\n&quot;</span>); <span class="hljs-comment">// Polymorphism应用</span><br><br>        <span class="hljs-type">RightTriangle</span> <span class="hljs-variable">aNewRightTriangle2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// NO upcasting</span><br>        System.out.println(<span class="hljs-string">&quot;Angle2: &quot;</span>+ aNewRightTriangle2.Angle); <span class="hljs-comment">// 直接访问RightTriangle类对象的属性</span><br>        System.out.println(<span class="hljs-string">&quot;getAngle2: &quot;</span>+ aNewRightTriangle2.getAngle()); <span class="hljs-comment">//直接调用RightTriangle类对象的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Angle1: <span class="hljs-number">30</span><br>getAngle1: <span class="hljs-number">90</span><br><br>Angle2: <span class="hljs-number">90</span><br>getAngle2: <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>因此这也是通常把所有属性用<code>private</code>修饰的原因，防止直接访问属性带来的问题，经常选择<strong>用方法去访问属性</strong>。</p><hr><p>如果一个方法是被<code>static</code>修饰的，则它不会应用Polymorphism，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> Angle;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAngleStatic</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;30&quot;</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> Angle;&#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAngleStatic</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;90&quot;</span>;&#125;    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">aNewRightTriangle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(); <span class="hljs-comment">// upcasting</span><br>        System.out.println(<span class="hljs-string">&quot;getAngle: &quot;</span>+ aNewRightTriangle.getAngle()+<span class="hljs-string">&quot;\n&quot;</span>); <span class="hljs-comment">// Polymorphism应用</span><br>        System.out.println(<span class="hljs-string">&quot;getAngleStatic: &quot;</span>+ aNewRightTriangle.getAngleStatic()); <span class="hljs-comment">// 访问Triangle类对象的static方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">getAngle: <span class="hljs-number">90</span><br><br>getAngleStatic: <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>因为一个方法被<code>static</code>修饰后，它不会被子类继承，所以不会被重写，以至于不能使用Polymorphism。</p><hr><h3 id="Polymorphic-methods-in-constructors"><a href="#Polymorphic-methods-in-constructors" class="headerlink" title="Polymorphic methods in constructors"></a>Polymorphic methods in constructors</h3><p>当一个构造函数中调用了多态（or dynamically-bound）的方法，可能会产生错误。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;Triangle Angle:&quot;</span> + Angle);&#125;<br>    Triangle()&#123; <span class="hljs-comment">// 构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;This is a Triangle before RightTriangle&quot;</span>);<br>        getAngle(); <span class="hljs-comment">// 多态（dynamically-bound）方法</span><br>        System.out.println(<span class="hljs-string">&quot;This is a Triangle after RightTriangle&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">Angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br>    RightTriangle(<span class="hljs-type">int</span> angle)&#123;<br>        Angle = angle;<br>        System.out.println(<span class="hljs-string">&quot;Right Triangle Angle:&quot;</span> + Angle);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAngle</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;Right Triangle Angle:&quot;</span> + Angle);&#125;  <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTriangle</span> &#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RightTriangle</span>(<span class="hljs-number">90</span>); <span class="hljs-comment">// upcasting</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">This is a Triangle before RightTriangle<br>Right Triangle Angle:<span class="hljs-number">0</span> <span class="hljs-comment">// not yet initialized, only binary zero</span><br>This is a Triangle after RightTriangle<br>Right Triangle Angle:<span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>根据<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/#3-1-%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">前面的文章</a>，在继承中，<strong>父类的构造方法是当一个被调用完成的、最先完成初始化的</strong>。如果在父类的构造方法中调用多态（dynamically-bound）方法，并且此方法通过late binding到了其子类对应的方法，此时<strong>子类还没有被完全的初始化</strong>。如例子中，在<code>Triangle</code>构造函数中调用到了<code>RightTriangle</code>的<code>getAngle()</code>方法，此方法中的属性<code>Angle</code>还没有被初始化成设计的<code>Angle = 60</code>，因此返回了<code>0</code>，输出<code>Right Triangle Angle:0</code>。</p><p>上述案例的运行流程为：</p><blockquote><ol><li>给对象分配内存，并<strong>初始化为0(binary zero)</strong>；</li><li>按照上述过程调用父类的构造函数，并且在其中调用了子类<code>RightTriangle</code>的<code>getAngle()</code>方法（<strong>尽管子类的构造函数还没有被调用</strong>），此时属性Angle的值为0（根据上一步）；</li><li>从上至下运行；</li><li>运行子类的构造函数。</li></ol></blockquote><p>因此，在构造函数中，不要调用任何类中的其他方法，除被<code>final</code>和<code>private</code>修饰的方法外，因为它们修饰的方法不会被重写，不会应用Polymorphism，可以防止上述问题的出现。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习2-表达式、控制流与I/O</title>
    <link href="/2021/09/17/Java-learning-2/"/>
    <url>/2021/09/17/Java-learning-2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><span id="more"></span><p>本文将记录Java基础学习的三大内容 - <strong>表达式 (Expressions)</strong> 、<strong>控制流 (Control Flow)</strong> 与 <strong>I/O</strong>。</p><hr><h2 id="1-表达式-Expressions"><a href="#1-表达式-Expressions" class="headerlink" title="1. 表达式 (Expressions)"></a>1. 表达式 (Expressions)</h2><h3 id="1-1-转义字符-Escape-Character"><a href="#1-1-转义字符-Escape-Character" class="headerlink" title="1.1 转义字符 (Escape Character)"></a>1.1 转义字符 (Escape Character)</h3><div class="table-container"><table><thead><tr><th style="text-align:center">转义字符 (Escape Character)</th><th style="text-align:center">描述</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">‘\n’</td><td style="text-align:center">new line</td><td style="text-align:center">换行-光标移动至下一行开头</td></tr><tr><td style="text-align:center">‘\t’</td><td style="text-align:center">tab</td><td style="text-align:center">水平移动-光标移动至下一个TAB后</td></tr><tr><td style="text-align:center">‘\b’</td><td style="text-align:center">backspace</td><td style="text-align:center">退格（删除）-光标移动至前一列</td></tr><tr><td style="text-align:center">‘\r’</td><td style="text-align:center">return</td><td style="text-align:center">回车-光标移动至本行开头</td></tr><tr><td style="text-align:center">‘\f’</td><td style="text-align:center">form feed</td><td style="text-align:center">换页-光标移动至下页开头</td></tr><tr><td style="text-align:center">‘\\\’</td><td style="text-align:center">backslash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\‘’</td><td style="text-align:center">single quote</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\“‘</td><td style="text-align:center">double quote</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\0’</td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\000’</td><td style="text-align:center">1-3位八进制数</td><td style="text-align:center">范围\000~\377</td></tr><tr><td style="text-align:center">‘\u0000’</td><td style="text-align:center">Unicode字符 4位16进制数 (‘\u0000’为空字符)</td><td style="text-align:center">范围0~65535</td></tr></tbody></table></div><p>运行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaLearningTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;1. Hello World!\n&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2. \tHello World!&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3. Hello World!\b&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4. Hello World!\rHi World!&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5. Hello World!\f&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;6. Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> Hello World!<br><br><span class="hljs-number">2.</span> Hello World!<br><span class="hljs-number">3.</span> Hello World<br>Hi World!<br><span class="hljs-number">5.</span> Hello World!<br><span class="hljs-number">6.</span> Hello World!<br></code></pre></td></tr></table></figure><hr><h3 id="1-2-运算符-Operator"><a href="#1-2-运算符-Operator" class="headerlink" title="1.2 运算符 (Operator)"></a>1.2 运算符 (Operator)</h3><h4 id="1-2-1-数字运算符-Arithmetic-Operator"><a href="#1-2-1-数字运算符-Arithmetic-Operator" class="headerlink" title="1.2.1 数字运算符 (Arithmetic Operator)"></a>1.2.1 数字运算符 (Arithmetic Operator)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数字运算符 (Arithmetic Operator)</th><th style="text-align:center">描述 </th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">addition </td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">subtraction</td></tr><tr><td style="text-align:center">$*$</td><td style="text-align:center">multiplication</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">division</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">modulo (take the remainder)</td></tr></tbody></table></div><h4 id="1-2-2-字符串连接符-String-Concatenation"><a href="#1-2-2-字符串连接符-String-Concatenation" class="headerlink" title="1.2.2 字符串连接符 (String Concatenation)"></a>1.2.2 字符串连接符 (String Concatenation)</h4><p>$+$为字符串连接符 (String Concatenation)，例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">aString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">bString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;is&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">cString</span> <span class="hljs-operator">=</span> aString + bString;<br><span class="hljs-type">Stirng</span> <span class="hljs-variable">dString</span> <span class="hljs-operator">=</span> cStirng + <span class="hljs-string">&quot;my book&quot;</span>; <span class="hljs-comment">// dString = &quot;This is my book&quot;</span><br></code></pre></td></tr></table></figure></p><h4 id="1-2-3-自增与自减运算符-Increment-and-Decrement-Operator"><a href="#1-2-3-自增与自减运算符-Increment-and-Decrement-Operator" class="headerlink" title="1.2.3 自增与自减运算符 (Increment and Decrement Operator)"></a>1.2.3 自增与自减运算符 (Increment and Decrement Operator)</h4><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++;<br><span class="hljs-comment">// ...</span><br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i--;<br></code></pre></td></tr></table></figure><br>类似于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>i = i + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// ...</span><br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i;<br>i = i - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></p><blockquote><p>上面的例子中，自增或自减符号位于变量后，则先进行赋值操作，再对变量进行自增或自减。若自增或自减符号位于变量前，则先对变量进行自增或自减，再进行赋值操作。如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ++i;<br><span class="hljs-comment">// ...</span><br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> --i;<br></code></pre></td></tr></table></figure><p>类似于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i = i + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-comment">// ...</span><br>i = i - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i;<br></code></pre></td></tr></table></figure></p><h4 id="1-2-4-逻辑运算符-Logical-Operator"><a href="#1-2-4-逻辑运算符-Logical-Operator" class="headerlink" title="1.2.4 逻辑运算符 (Logical Operator)"></a>1.2.4 逻辑运算符 (Logical Operator)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数字逻辑运算符</th><th style="text-align:center">描述 </th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">less than  </td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">less than or equal to</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">greater than</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">greater than or equal to</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">equal to</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">not equal to</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">布尔逻辑运算符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:center">not(prefix)</td><td style="text-align:center">!true = false</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">AND</td><td style="text-align:center">true &amp;&amp; false = false</td></tr><tr><td style="text-align:center">｜｜</td><td style="text-align:center">OR</td><td style="text-align:center">true ｜｜ false = true</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">Exclusive OR</td><td style="text-align:center">true ^ false = true</td></tr></tbody></table></div><h4 id="1-2-5-位运算符-Bitwise-Operator"><a href="#1-2-5-位运算符-Bitwise-Operator" class="headerlink" title="1.2.5 位运算符 (Bitwise Operator)"></a>1.2.5 位运算符 (Bitwise Operator)</h4><p>假设：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)<span class="hljs-number">0B10101010</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)<span class="hljs-number">0B00100000</span>;<br></code></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th style="text-align:center">位运算符 (Bitwise Operator)</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">～</td><td style="text-align:center">complement</td><td style="text-align:center"><code>(byte)~a = 0B01010101</code></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">AND</td><td style="text-align:center"><code>(byte)(a &amp; b) = 0B00100000</code></td></tr><tr><td style="text-align:center">｜</td><td style="text-align:center">OR</td><td style="text-align:center"><code>(byte)(a ｜ b) = 0B10101010</code></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">Exclusive OR</td><td style="text-align:center"><code>(byte)(a ^ b) = 0B10001010</code></td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">Signed left shift, fill with 0</td><td style="text-align:center"><code>(bytr)(a &lt;&lt; 2) = 0B10101000</code></td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">Signed right shift, fill with sign bit</td><td style="text-align:center"><code>(bytr)(a &gt;&gt; 2) = 0B11101010</code></td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">Unsigned right shift, fill with 0</td><td style="text-align:center"><code>(bytr)(a &gt;&gt; 2) = 0B00101010</code></td></tr></tbody></table></div><h4 id="1-2-6-赋值运算符-Assignment-Operator"><a href="#1-2-6-赋值运算符-Assignment-Operator" class="headerlink" title="1.2.6 赋值运算符 (Assignment Operator)"></a>1.2.6 赋值运算符 (Assignment Operator)</h4><p><code>=</code>为赋值符号，把一个值赋值给某一变量，语法如下：</p><p><code>variable = expression</code></p><p>例子：<br><code>i = 2;</code></p><p>以下情况会从右往左进行赋值：<br><code>i = j = 3;</code><br>相当于：<br><code>j = 3;</code><br><code>i = j;</code></p><h4 id="1-2-7-复合赋值运算符-Compound-Assignment-Operator"><a href="#1-2-7-复合赋值运算符-Compound-Assignment-Operator" class="headerlink" title="1.2.7 复合赋值运算符 (Compound Assignment Operator)"></a>1.2.7 复合赋值运算符 (Compound Assignment Operator)</h4><p>语法如下：<br><code>variable op= expression</code></p><p>相当于：<br><code>variable = variable op expression</code></p><p>例如：<br><code>i =+ 1;</code> 相当于：<code>i = i + 1</code></p><p>若出现下列的表达式，则需要根据<strong>运算符号优先级</strong>来判断运算顺序：</p><p><code>i = j += (k * 2) / 8</code></p><p><strong>运算符号优先级</strong>详见1.2.9节。</p><h4 id="1-2-8-条件表达式-Conditional-Expression"><a href="#1-2-8-条件表达式-Conditional-Expression" class="headerlink" title="1.2.8 条件表达式 (Conditional Expression)"></a>1.2.8 条件表达式 (Conditional Expression)</h4><p>语法如下：<br><code>boolean-expression ? exp1 : exp2</code></p><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println((num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)? <span class="hljs-string">&quot;EVEN&quot;</span> : <span class="hljs-string">&quot;ODD&quot;</span>)<br><br></code></pre></td></tr></table></figure></p><p>解释：<br>如果 <code>boolean-expression == true</code> 那么<strong>整个表达式</strong>等于<code>exp1</code>，否则等于<code>exp2</code>。</p><h4 id="1-2-9-运算符优先级-Operator-Precedence"><a href="#1-2-9-运算符优先级-Operator-Precedence" class="headerlink" title="1.2.9 运算符优先级 (Operator Precedence)"></a>1.2.9 运算符优先级 (Operator Precedence)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">级别</th><th style="text-align:center">运算方向</th></tr></thead><tbody><tr><td style="text-align:center">[ ]</td><td style="text-align:center">access array element</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">access object member</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">( )</td><td style="text-align:center">invoke a method</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">post-increment</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">post-decrement</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">pre-increment</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">pre-decrement</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">unary plus</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">unary minus</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">logical NOT</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">bitwise NOT</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">( )</td><td style="text-align:center">cast</td><td style="text-align:center">3</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"><code>new</code></td><td style="text-align:center">object creation</td><td style="text-align:center">3</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">multiplication</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">division</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">modulo</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">+ -</td><td style="text-align:center">addition, subtraction</td><td style="text-align:center">5</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">string concatenation</td><td style="text-align:center">5</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td style="text-align:center">shift</td><td style="text-align:center">6</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt; &lt;= &gt; &gt;= <code>instanceof</code></td><td style="text-align:center">relational type comparison</td><td style="text-align:center">7</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">== !=</td><td style="text-align:center">equality</td><td style="text-align:center">8</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">bitwise AND</td><td style="text-align:center">9</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">bitwise XOR</td><td style="text-align:center">10</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">｜</td><td style="text-align:center">bitwise OR</td><td style="text-align:center">11</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">conditional AND</td><td style="text-align:center">12</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">｜｜</td><td style="text-align:center">conditional OR</td><td style="text-align:center">13</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">?:</td><td style="text-align:center">conditional</td><td style="text-align:center">14</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">= += -= *= /= %= &amp;= ^=  ｜= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td><td style="text-align:center">assignment</td><td style="text-align:center">15</td><td style="text-align:center"><strong>R to L</strong></td></tr></tbody></table></div><hr><h2 id="2-控制流-Control-Flow"><a href="#2-控制流-Control-Flow" class="headerlink" title="2. 控制流 (Control Flow)"></a>2. 控制流 (Control Flow)</h2><h3 id="2-1-条件语句-Conditional-Statement"><a href="#2-1-条件语句-Conditional-Statement" class="headerlink" title="2.1 条件语句 (Conditional Statement)"></a>2.1 条件语句 (Conditional Statement)</h3><h4 id="2-1-1-if-表达式"><a href="#2-1-1-if-表达式" class="headerlink" title="2.1.1 if 表达式"></a>2.1.1 <code>if</code> 表达式</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (booleanExpression)<br>  trueBody<br><span class="hljs-keyword">else</span><br>  falseBody<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (firstBooleanExpression)<br>  firstBody<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (secondBooleanExpression)<br>  secondBody<br><span class="hljs-keyword">else</span><br>  thirdBody<br></code></pre></td></tr></table></figure><p><code>trueBody</code>、<code>falseBody</code>、<code>firstBody</code>、<code>secondBody</code>和<code>thirdBody</code>可以为单行的语句或者是语句块（写在<code>&#123;&#125;</code>内），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (booleanExpression)&#123;<br>  trueBody1<br>  trueBody2<br>  trueBody3<br>&#125;<br><span class="hljs-keyword">else</span><br>  falseBody<br></code></pre></td></tr></table></figure><h4 id="2-1-2-switch-表达式"><a href="#2-1-2-switch-表达式" class="headerlink" title="2.1.2 switch 表达式"></a>2.1.2 <code>switch</code> 表达式</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(selector) &#123; <br>  <span class="hljs-keyword">case</span> value1:<br>    statement; <br>    <span class="hljs-keyword">break</span>; <br>  <span class="hljs-keyword">case</span> value2: <br>    statement; <br>    <span class="hljs-keyword">break</span>; <br>  <span class="hljs-keyword">case</span> value3: <br>    statement; <br>    <span class="hljs-keyword">break</span>; <br> <br> <span class="hljs-comment">// ... </span><br>  <span class="hljs-keyword">default</span>: <br>    statement; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>selector</code>会与每个<code>value</code>进行比较，若相等则运行后面的<code>statement</code>语句，若没有一个相等的，则运行<code>default</code>之后的语句。 每个<code>case</code>中的<code>break;</code>语句是可选择的，一般选择加上，以便满足<code>case</code>条件后直接退出，若不加，则会运行其之后的语句，直到遇到<code>break;</code>语句再退出。<br><code>default</code> 语句后一般不需要<code>break;</code>语句，因为此语句通常放在最后，运行default后会直接退出。但是如果<code>default</code> 语句后还有语句，则需要<code>break;</code>语句。但是不推荐<code>default</code> 语句后再加语句，这违背了初衷，只有前面所有情况都不满足之后再使用<code>default</code> 语句。因此推荐把<code>default</code> 语句放在最后，此时，可选择是否加上<code>break;</code>语句。</p><blockquote><p><code>selector</code>应为整型数据，如<code>char</code>,<code>byte</code>,<code>short</code>,<code>int</code>,<code>boolean</code>,<code>String</code>或者<code>enum</code>。<br>如需要使用非整型数据，如<code>long</code>,<code>float</code>或者<code>double</code>，则需要使用<code>if</code>语句。</p></blockquote><hr><h3 id="2-2-循环语句-Loop-Statement"><a href="#2-2-循环语句-Loop-Statement" class="headerlink" title="2.2 循环语句 (Loop Statement)"></a>2.2 循环语句 (Loop Statement)</h3><h4 id="2-2-1-while-循环"><a href="#2-2-1-while-循环" class="headerlink" title="2.2.1  while 循环"></a>2.2.1  <code>while</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (booleanExpression)<br>  loopBody<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">5</span>)&#123;<br>  System.out.println(i);<br>  i++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-do-while-循环"><a href="#2-2-2-do-while-循环" class="headerlink" title="2.2.2 do-while 循环"></a>2.2.2 <code>do-while</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span><br>  loopBody<br><span class="hljs-title function_">while</span> <span class="hljs-params">(booleanExpression)</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>  System.out.println(i);<br>  i++;<br>  &#125; <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>与<code>while</code>循环不同的是，每一次<code>do-while</code>循环先执行循环体的语句，最后进行循环条件的判断。这种循环可以实现进入循环后再询问用户的输入，不用在循环前询问。</p><h4 id="2-2-3-for-循环"><a href="#2-2-3-for-循环" class="headerlink" title="2.2.3 for 循环"></a>2.2.3 <code>for</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (initialization; booleanCondition; increment)<br>  loopBody<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>  System.out.println(i);<br>  i++;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for</code> 循环可以转换为<code>while</code> 循环，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">initialization;<br><span class="hljs-keyword">while</span> (booleanExpression)<br>  loopBody;<br>  increment;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-for-each-循环"><a href="#2-2-4-for-each-循环" class="headerlink" title="2.2.4 for-each 循环"></a>2.2.4 <code>for-each</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (elementType name : container)<br>  loopBody<br></code></pre></td></tr></table></figure><p><code>container</code>为<code>elementType</code>类型的数组，此循环会遍历数组内的元素。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> total;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr)<br>  total += i;<br></code></pre></td></tr></table></figure><p>此循环遍历<code>arr</code>数组的全部元素，最后得出其总和。</p><p>注意：<br><code>for-each</code> 循环并不会访问到具体的元素及其下标，因此以下代码是不合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr)<br>  i++; <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><p>所以如果要进行对具体元素的修改，则需要用<code>for</code>或者<code>while</code>循环，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>  arr[i]++;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><h4 id="2-2-5-强制跳转-Unconditional-Branching"><a href="#2-2-5-强制跳转-Unconditional-Branching" class="headerlink" title="2.2.5 强制跳转 (Unconditional Branching)"></a>2.2.5 强制跳转 (Unconditional Branching)</h4><p>   <code>return</code></p><blockquote><ol><li>当一个方法的返回值被定义为<code>void</code>后，只有运行完此方法的最后一行代码之后才会跳出此方法。但是当一个方法的返回值定义到一个具体的数据类型，当运行到<code>return</code>关键字后就会跳出此方法。</li><li><code>return</code>语句必须是一个方法中最后被执行的语句，其后的语句都不会被执行。<code>return</code>语句行不一定是方法代码的最后一行，但是最后被运行的那一行。如下：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>  <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> -num <span class="hljs-comment">// if negative, return -num and exit the loop</span><br>  <span class="hljs-keyword">return</span> num <span class="hljs-comment">// else return num</span><br>&#125;<br></code></pre></td></tr></table></figure><p>   <code>break</code><br>   <code>break</code>语句可以跳出目前所在的循环体(e.g. <code>for</code>, <code>while</code>, <code>do-while</code>, <code>switch</code>)。跳出后开始执行此循环的后一行代码。</p><hr><p>   <code>continue</code><br>   <code>continue</code>语句会跳过其后的本次正在循环的代码，并且开始执行此循环体的下一次循环（如果还满足循环的条件），并不会像<code>break</code>语句一样直接跳出循环体。</p><hr><h2 id="3-I-O"><a href="#3-I-O" class="headerlink" title="3. I/O"></a>3. I/O</h2><h3 id="3-1-输出-output"><a href="#3-1-输出-output" class="headerlink" title="3.1 输出 (output)"></a>3.1 输出 (output)</h3><p>语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>); <span class="hljs-comment">// followed by a newline</span><br></code></pre></td></tr></table></figure><br><code>System.out</code>对象属于<code>java.io.PrintStream</code>类的一个实例</p><h3 id="3-2-输入-input"><a href="#3-2-输入-input" class="headerlink" title="3.2 输入 (input)"></a>3.2 输入 (input)</h3><p>一般语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.print(<span class="hljs-string">&quot;Enter :&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextDouble();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>Scanner</code>会根据<strong>分隔符</strong>把输入内容分成好几个<strong>小节</strong>后再进行一一读取。<br><strong>分隔符</strong>一般为whitespace(i.e. space, tabs, and newlines)</p><p><code>Scanner</code>的方法有以下几种：</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>hasNext()</code></td><td style="text-align:center">如果输入中还有小节，返回<code>true</code></td></tr><tr><td style="text-align:center"><code>next()</code></td><td style="text-align:center">返回输入中的下一个<code>string</code>小节。若没有小节，返回错误</td></tr><tr><td style="text-align:center"><code>hasNextType()</code></td><td style="text-align:center">如果输入中还有对应的<code>Type</code>类的小节，返回<code>true</code>。<code>Type</code>类可为<code>Boolean</code> <code>Byte</code> <code>Double</code> <code>Float</code> <code>Int</code> <code>Long</code> <code>Short</code></td></tr><tr><td style="text-align:center"><code>nextType()</code></td><td style="text-align:center">返回输入中的下一个<code>Type</code>类小节。若没有小节或者小节不是<code>Type</code>类，返回错误</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>hasNextLine()</code></td><td style="text-align:center">如果输入中还有另外一行文本，返回<code>true</code></td></tr><tr><td style="text-align:center"><code>nextLine()</code></td><td style="text-align:center">返回一整行的输入到回车结束（包括空格），并把光标移到下一行的开头</td></tr><tr><td style="text-align:center"><code>findInLine(Stirng s)</code></td><td style="text-align:center">尝试寻找输入的一行中是否有给定字符<code>s</code>。 若有则返回此字符并把光标移到此字符后，若无则返回<code>null</code>并且不移动光标。</td></tr></tbody></table></div><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.<br>Java转义字符, <em>知乎专栏</em>. <a href="https://zhuanlan.zhihu.com/p/30158394">https://zhuanlan.zhihu.com/p/30158394</a> (accessed Sep. 14, 2021).</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Java相关的基础知识十分重要，会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习1-声明和初始化与修饰符</title>
    <link href="/2021/09/02/Java-learning-1/"/>
    <url>/2021/09/02/Java-learning-1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><p>本文将记录Java基础学习的两大内容 - <strong>声明 (Declarations)</strong> 和<strong>初始化 (Initialization)</strong> 与 <strong>修饰符 (Modifiers)</strong>。<br><span id="more"></span></p><hr><p>先上代码：</p><p><strong><em>Book.java</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih; <span class="hljs-comment">// package named &quot;ultrafish&quot;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> page; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> bookAmount; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">000000</span>; <span class="hljs-comment">// private field</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">subBookId</span> <span class="hljs-operator">=</span> <span class="hljs-number">000000</span>; <span class="hljs-comment">// protected field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> totalBookUnm; <span class="hljs-comment">// static field</span><br><br>    Book()&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;NoBookName&quot;</span>); <span class="hljs-comment">// &quot;this&quot; keyword used to Calling constructors from constructors</span><br>    &#125;<br>    Book(String initName)&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">1</span>);<br>        name = initName;<br>    &#125;<br>    Book(<span class="hljs-type">int</span> initBookAmount)&#123;<br>        bookAmount = initBookAmount;<br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象,请修改书名！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">addAmount</span><span class="hljs-params">()</span>&#123;<br>        bookAmount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; <span class="hljs-comment">// &quot;this&quot; keyword used to refer to the current abject </span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// &quot;this&quot; keyword used to solve the ambiguity</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(Sealer.getSealed(<span class="hljs-built_in">this</span>));<br>        <span class="hljs-comment">// &quot;this&quot; keyword used to passing the current object to another method &quot;Sealer.getSealed&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">totalBookUnmAdd</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// static method</span><br>        totalBookUnm++;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> idNum)</span>&#123;<br>        id = idNum;<br>        System.out.println(<span class="hljs-string">&quot;id set, is&quot;</span>+id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">( Book book)</span>&#123;<br>        book.safe = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    textBook()&#123;<br>        <span class="hljs-type">textBook</span> <span class="hljs-variable">myTextBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">textBook</span>();<br>        myTextBook.subBookId++;<br>        myTextBook.bookAmount++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">//</span><br>        System.out.println(myBook.page); <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//System.out.println(myBook.id); // Error</span><br>        System.out.println(myBook.subBookId); <span class="hljs-comment">//</span><br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="1-声明-Declarations-和初始化-Initialization"><a href="#1-声明-Declarations-和初始化-Initialization" class="headerlink" title="1. 声明 (Declarations)和初始化 (Initialization)"></a>1. 声明 (Declarations)和初始化 (Initialization)</h2><h3 id="1-1-属性声明与初始化"><a href="#1-1-属性声明与初始化" class="headerlink" title="1.1 属性声明与初始化"></a>1.1 属性声明与初始化</h3><p>在<a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/#1-%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7-Field">之前文章的章节中</a>有大致介绍了类的属性。<br>属性又称成员变量，有不同的数据类型：</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型名称</th><th style="text-align:center">描述</th><th style="text-align:center">内存大小</th><th style="text-align:left">取值范围</th><th style="text-align:center">默认初始值</th></tr></thead><tbody><tr><td style="text-align:center"> <code>boolean</code></td><td style="text-align:center">布尔类型</td><td style="text-align:center">1b</td><td style="text-align:left"><code>true</code>  <code>false</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"> <code>char</code></td><td style="text-align:center">字符类型</td><td style="text-align:center">16b(2B)</td><td style="text-align:left">0x0000~0xffff (Unicode)</td><td style="text-align:center">\u0000</td></tr><tr><td style="text-align:center"> <code>byte</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">8b(1B)</td><td style="text-align:left">-128~127(2^8)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>short</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">16b(2B)</td><td style="text-align:left">-32768~32767(2^16)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>int</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">32b(4B)</td><td style="text-align:left">-2147483648~2147483647(2^32)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>long</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">64b(8B)</td><td style="text-align:left">-9223372036854775808~9223372036854775807(2^64)</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center"> <code>float</code></td><td style="text-align:center">单精度浮点类型</td><td style="text-align:center">32b(4B)</td><td style="text-align:left">1.4E-45~3.4028235E+38</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center"> <code>double</code></td><td style="text-align:center">双精度浮点类型</td><td style="text-align:center">64b(8B)</td><td style="text-align:left">4.9E-324~1.7976931348623157E+308</td><td style="text-align:center">0.0D</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">safe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;A&quot;</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br><span class="hljs-type">short</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">bookNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">loogNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000L</span>; <span class="hljs-comment">//followed by an &quot;L&quot; or &quot;l&quot;</span><br><span class="hljs-type">float</span> <span class="hljs-variable">floatNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.3333F</span>; <span class="hljs-comment">//followed by an &quot;F&quot; or &quot;f&quot;</span><br><span class="hljs-type">double</span> <span class="hljs-variable">doubleNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.3333e30D</span>; <span class="hljs-comment">//followed by a &quot;D&quot; or &quot;d&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-方法声明与初始化"><a href="#1-2-方法声明与初始化" class="headerlink" title="1.2 方法声明与初始化"></a>1.2 方法声明与初始化</h3><p>参考<a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/#2-%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-Method">之前的文章章节</a>。</p><h3 id="1-3-Initialization-type"><a href="#1-3-Initialization-type" class="headerlink" title="1.3 Initialization type"></a>1.3 Initialization type</h3><blockquote><ol><li>static field initializer</li><li>constructor</li><li>instance initializer block</li><li>instance vairable initializer <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// static field initializer</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// instance vairable initializer </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">health</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// instance vairable initializer </span><br><br>    &#123; <span class="hljs-comment">//instance initializer block</span><br>    health = <span class="hljs-number">100</span>; <br>    &#125;<br>    <br>    Hero(String a, <span class="hljs-type">int</span> h)&#123; <span class="hljs-comment">// constructor</span><br>        name = a;<br>        health = h; <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="1-4-Initialization-order"><a href="#1-4-Initialization-order" class="headerlink" title="1.4 Initialization order"></a>1.4 Initialization order</h3><blockquote><ol><li><strong>static field initializer</strong> in textual order</li><li><strong>instance initializer block</strong> and <strong>instance vairable initializer</strong> in textual order</li><li><strong>constructor</strong></li></ol><h3 id="1-5-this-关键字"><a href="#1-5-this-关键字" class="headerlink" title="1.5 this 关键字"></a>1.5 <code>this</code> 关键字</h3></blockquote><p>看以下案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">000000</span>;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 声明一个方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> idNum)</span>&#123;<br>        id = idNum;<br>        System.out.println(<span class="hljs-string">&quot;id set, is&quot;</span>+id);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用此方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>思考：<br><code>setId(int idNum)</code>只有一个参数，可是在对象调用的时候只把参数值<code>000001</code>传递给了<code>setId(int idNum)</code>方法，并没有告知方法所对应的具体对象 (myBook)。</p></blockquote><p>实际上，Java在编译此代码时，会编译成以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Book <span class="hljs-built_in">this</span>, <span class="hljs-type">int</span> idNum)</span>&#123;<span class="hljs-comment">/*...*/</span>&#125; <span class="hljs-comment">// 声明一个方法</span><br>myBook.setId(myBook, <span class="hljs-number">000001</span>); <span class="hljs-comment">// 调用此方法</span><br></code></pre></td></tr></table></figure></p><blockquote><p>解释：<br>编译后，会在自动添加一个参数<code>this</code>，通过此参数把<strong>目前操作的对象</strong>传递到相应的方法中去。</p></blockquote><hr><p> <code>this</code> 关键字可以用在非静态方法中，使其指向正在调用此方法的对象。</p><p>通常用在这4种场景中：</p><blockquote><p>1.当语句出现重名导致语义不清（ambiguity）时，使用 <code>this</code> 使其指向正在调用的对象，例如：</p></blockquote><p>看一个案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        name = name; <br>&#125;<br></code></pre></td></tr></table></figure><p> <code>setName()</code> 方法是用来设定 <code>name</code> 属性的值，使其被赋值成方法中的String参数。<br>可是第二行的语句 <code>name = name;</code> 是有问题的。对象的属性名和方法的参数重名了，造成了ambiguity（模糊不清）。<br>这时就需要 <code>this</code> 关键字了，使第一个 <code>name</code> 清楚的代表对象的属性名。修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// &quot;this&quot; keyword used to solve the ambiguity</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>2.用于return中，返回当前正在调用的对象，可以实现类似于递归的功能，例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">addAmount</span><span class="hljs-params">()</span>&#123;<br>        bookAmount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; <span class="hljs-comment">// &quot;this&quot; keyword used to refer to the current abject </span><br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        <span class="hljs-comment">//addAmount()的返回值即为当前调用的对象，因此可以反复调用自身，功能类似于自加</span><br>        myBook.addAmount().addAmount().addAmount(); <br>        <span class="hljs-comment">//*****************************************</span><br>        myBook.seal();<br>    &#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>3.当一个方法内部需要访问到外部类的其他方法时，可以使用 <code>this</code> 传递现在指向的对象，例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seal</span><span class="hljs-params">()</span>&#123; <br>            System.out.println(Sealer.getSealed(<span class="hljs-built_in">this</span>));<br>            <span class="hljs-comment">// &quot;this&quot; keyword used to passing the current object to another method &quot;Sealer.getSealed（）&quot;</span><br>        &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal(); <span class="hljs-comment">//调用方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">( Book book)</span>&#123;<br>        book.safe = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>4.<code>this</code> 关键字可以在构造函数中调用另一个构造函数，例子如下：</p><blockquote><p>注：当一个类有多个构造函数时，即包含了无参构造方法 <code>Book()</code> 和有参构造方法 <code>Book(String initName)</code> ，会根据<code>new</code> 时调用的构造函数来选择。即：<code>new Book()</code>调用<code>Book()</code>, <code>new Book(&quot;MyBook&quot;)</code>调用<code>Book(String initName)</code>, <code>new Book(100)</code>调用<code>Book(int initBookAmount)</code>，参数的数据类型需要一一对应。</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">Book()&#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;NoBookName&quot;</span>); <span class="hljs-comment">// mian() 方法调用的是 Book() 无参构造方法</span><br>    <span class="hljs-comment">// this(&quot;NoBookName&quot;); 相当于 Book(&quot;NoBookName&quot;);，因此调用 Book(String initName) 有参构造方法</span><br>&#125;<br>Book(String initName)&#123; <span class="hljs-comment">// 被this(&quot;NoBookName&quot;); 调用</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 相当于 Book(1);，因此调用 Book(int initBookAmount) 有参构造方法</span><br>    name = initName;<br>&#125;<br>Book(<span class="hljs-type">int</span> initBookAmount)&#123; <span class="hljs-comment">// 被 this(1); 调用</span><br>    bookAmount = initBookAmount;<br>    System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象,请修改书名！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">//调用无参构造方法 Book()</span><br>    myBook.setId(<span class="hljs-number">000001</span>);<br>    System.out.println(myBook.name);<br>    myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>    System.out.println(myBook.getName());<br>    System.out.println(Book.totalBookUnm); <br>    myBook.addAmount().addAmount().addAmount();<br>    myBook.seal(); <br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><blockquote><p>当一个构造方法有两个参数时，如：<code>Book(String initName，int initBookAmount)</code>, 使用<code>this</code>关键字只能传递一个参数，即<code>this(&quot;NoBookName&quot;);</code>或<code>this(1);</code>, 结合体<code>this(&quot;NoBookName&quot;,1);</code>是不合法的。</p></blockquote><hr><h2 id="2-修饰符-Modifiers"><a href="#2-修饰符-Modifiers" class="headerlink" title="2. 修饰符 (Modifiers)"></a>2. 修饰符 (Modifiers)</h2><h3 id="2-1-static-修饰符"><a href="#2-1-static-修饰符" class="headerlink" title="2.1 static 修饰符"></a>2.1 <code>static</code> 修饰符</h3><p>通常来说，当一个类创建完成后，我们就完成了这个类静态部分和动态部分的描述。但是只有当我们使用<code>new</code>关键字创建后才会真正得到一个此类的对象，并且储存这个对象的属性以及激活这个对象的方法。</p><p>但是如果 </p><blockquote><ol><li><strong>用户只想把这一类的某一个属性或者方法储存在同一个内存中，并且想统一管理，不管此类创建了多少对象</strong>;</li><li>再或者 <strong>想在创建此类的的对象前就能访问类的静态和动态部分，不关联任何一个此类的对象</strong>。</li></ol><p>举个实例：</p><p>创建一个名为<code>纸质书</code>的类, 并创建一个名为<code>材质</code>的属性。那通常来说<code>纸质书</code>类的<code>材质</code>属性值就为<code>纸</code>，适用于所有的<code>纸质书</code>对象，不需要为每一位对象单独添加一个<code>材质</code>属性，只需要统一管理。并且不需要创建任何对象，就可以访问或者修改<code>材质</code>属性值。</p></blockquote><p>那我们可以说这一类属性或方法是<strong>统一的或者是静态的（static）</strong>，那在Java中这一类的就用<code>static</code>修饰符来修饰其静态的特征。</p><p>举例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> totalBookUnm; <span class="hljs-comment">// static field</span><br></code></pre></td></tr></table></figure><br>上述例子中，在Book类中创建了一个名为<code>totalBookUnm</code>的静态属性。并在下面对其进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//访问静态属性，直接使用类名Book，无须使用对象名myBook</span><br>        myBook.seal();<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意：</p><blockquote><ol><li>类的静态属性和方法不会联系到类所创建的任何一个特定的对象；</li><li>无须创建一个此类的对象即可访问到此类的静态属性和方法；</li><li>对于非静态的属性和方法，必须创建一个此类的对象才能访问。</li></ol></blockquote><p>静态属性和方法最大的用处就是，它允许我们在不创建然后此类的对象的条件下都可以访问其属性和方法。</p><p>主函数（主方法）<code>main()</code> 就是一个静态方法，无须创建对象即可访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">/*...*/</span>&#125;<br></code></pre></td></tr></table></figure><p> <code>static</code> 看起来有如此高的访问权限，当它遇到访问权限修饰符 <code>public</code>, <code>protected</code> 和 <code>private</code> 的时候会发生什么呢，下文会提到。</p><hr><h3 id="2-2-访问权限修饰符-Access-Control-Modifiers"><a href="#2-2-访问权限修饰符-Access-Control-Modifiers" class="headerlink" title="2.2 访问权限修饰符 (Access Control Modifiers)"></a>2.2 访问权限修饰符 (Access Control Modifiers)</h3><p>Java是一门面向对象的编程语言 (Object Oriented Programming)，封装性 (Encapsulation)是其一大特征, 旨在把过程抽象并隐藏起来，并只允许客户访问必要的要素，这样可以保护项目的安全，不会担心外部客户影响内部功能，也可以避免内部功能的改变影响到客户对项目的使用。因此访问控制 (Access Control) 就起到了看门人的作用，设置了三道拥有不同权限的门，即<code>public</code>, <code>protected</code> 和 <code>private</code>，称为访问权限修饰符 (Access Control Modifiers)。</p><h4 id="2-2-1-public"><a href="#2-2-1-public" class="headerlink" title="2.2.1 public"></a>2.2.1 <code>public</code></h4><p><code>public</code> 的属性和方法是对所有人开放的，包括 <strong>本类，子类，同包内的类，不同包内的类</strong>。例如：</p><p><strong><em>Book.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> page; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> bookAmount; <span class="hljs-comment">// public field</span><br>  <br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">addAmount</span><span class="hljs-params">()</span>&#123; <br>        bookAmount++; <span class="hljs-comment">// 类内方法访问 public 属性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123; <span class="hljs-comment">// public method</span><br>        <span class="hljs-built_in">this</span>.name = name; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">// 访问 public 属性</span><br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>); <span class="hljs-comment">// 访问 public 方法</span><br>        System.out.println(myBook.getName()); <span class="hljs-comment">// 访问 public 方法</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">( Book book)</span>&#123;<br>        book.safe = <span class="hljs-literal">true</span>; <span class="hljs-comment">//其他类访问 public 属性</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    textBook()&#123;<br>        <span class="hljs-type">textBook</span> <span class="hljs-variable">myTextBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">textBook</span>();<br>        myTextBook.subBookId++;<br>        myTextBook.bookAmount++; <span class="hljs-comment">//子类访问 public 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">// 同包的类访问 public 属性</span><br>        System.out.println(myBook.page); <span class="hljs-comment">// 同包的类访问 public 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-protected"><a href="#2-2-2-protected" class="headerlink" title="2.2.2 protected"></a>2.2.2 <code>protected</code></h4><p><code>protected</code>的属性和方法相比于<code>public</code>减少了外部类（不同包的类）的访问权限，强调了继承类的访问，权限包括 <strong>本类，子类，同包内的类，以及不同包中的子类*</strong>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">subBookId</span> <span class="hljs-operator">=</span> <span class="hljs-number">000000</span>; <span class="hljs-comment">// protected field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">&quot;MyFirstBook&quot;</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    textBook()&#123;<br>        <span class="hljs-type">textBook</span> <span class="hljs-variable">myTextBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">textBook</span>();<br>        myTextBook.subBookId++; <span class="hljs-comment">//子类访问 protected 属性</span><br>        myTextBook.bookAmount++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>*Notice:<br>In different package, superclass’s protected number can be accessed by it’s subclass instance, but NOT the superclass’s instance in the subclass.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> p;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> q;<br><span class="hljs-keyword">import</span> p.A;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(A a)</span> &#123;<br>        a.x = <span class="hljs-number">1</span>; <span class="hljs-comment">// Illegal access from instance of the supclass</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123;<br>        x = <span class="hljs-number">1</span>; <span class="hljs-comment">// OK, x is inherited from the superclass, accessed through the subclass</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.x = <span class="hljs-number">1</span> <span class="hljs-comment">// OK, super is a special case, actually is inherited</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>);<br>        System.out.println(myBook.subBookId); <span class="hljs-comment">// 同包的类访问 protected 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-3-default-access"><a href="#2-2-3-default-access" class="headerlink" title="2.2.3 default-access"></a>2.2.3 default-access</h4><p>若不加访问权限修饰符，则为默认访问权限。其类似于<code>protected</code>的访问范围，但只能在同一个包内访问，不能访问不同包内的子类。权限包括 <strong>本类，子类，同包内的类，但<em>不包括</em> 不同包中的子类</strong>。</p><hr><h4 id="2-2-4-private"><a href="#2-2-4-private" class="headerlink" title="2.2.4 private"></a>2.2.4 <code>private</code></h4><p><code>private</code>的属性和方法限制最多，<strong>只有其所在的类可以访问。其子类，或者同一包内的类都不能访问</strong>。例如：</p><p><strong><em>Book.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">000000</span>; <span class="hljs-comment">// private field</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> idNum)</span>&#123; <span class="hljs-comment">// private method</span><br>        id = idNum;<br>        System.out.println(<span class="hljs-string">&quot;id set, is&quot;</span>+id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        myBook.setId(<span class="hljs-number">000001</span>); <span class="hljs-comment">// No error, in a same class with field &quot;id&quot; and method &quot;setId&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">( Book book)</span>&#123;<br>        book.safe = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>        book.setId(<span class="hljs-number">000002</span>); <span class="hljs-comment">// Error, access setId() in a foreign class</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    textBook()&#123;<br>        <span class="hljs-type">textBook</span> <span class="hljs-variable">myTextBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">textBook</span>();<br>        myTextBook.setId(<span class="hljs-number">000003</span>); <span class="hljs-comment">// Error, access setId() in a child class</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>);<br>        System.out.println(myBook.id); <span class="hljs-comment">// Error, access setId() in another class in a same package</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>private</code>成员甚至限制了开发者对于项目的访问权限，但是这也减小了在修改此成员时对处于同一包内其他类的影响。</p><hr><h4 id="2-2-4-static与-public-protected-和-private"><a href="#2-2-4-static与-public-protected-和-private" class="headerlink" title="2.2.4 static与 public, protected 和 private"></a>2.2.4 <code>static</code>与 <code>public</code>, <code>protected</code> 和 <code>private</code></h4><p>上文提过，<code>static</code>看起来有如此高的访问权限，到那时访问权限修饰符(access specifiers)的等级还是高于<code>static</code>，当遇到<code>private static</code>时， 修饰的对象还是只有其所在的类可以访问。</p><hr><h3 id="2-3-final-修饰符"><a href="#2-3-final-修饰符" class="headerlink" title="2.3 final 修饰符"></a>2.3 <code>final</code> 修饰符</h3><p><code>final</code> 修饰符是用来修饰某一成员是一个常量，是不能被修改的。<code>final</code> 修饰符可以用来修饰类的属性，参数，方法以及一整个类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// safe 属性被final修饰，其值只能被对象读取，无法被修改</span><br></code></pre></td></tr></table></figure><h4 id="2-3-1-final-属性"><a href="#2-3-1-final-属性" class="headerlink" title="2.3.1 final 属性"></a>2.3.1 <code>final</code> 属性</h4><p>属性(field)常量指的是类的某一属性值为常量，分为编译时常量( <em>compile-time</em> constant)和空白常量(blank finals)</p><h5 id="2-3-1-1-编译时常量"><a href="#2-3-1-1-编译时常量" class="headerlink" title="2.3.1.1 编译时常量"></a>2.3.1.1 编译时常量</h5><p>编译时常量( <em>compile-time</em> constant)需要在声明时被初始化，即给定属性值，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// safe 属性被final修饰，为编译时常量，需要被赋值</span><br></code></pre></td></tr></table></figure></p><p>当 <code>final</code> 和 <code>static</code> 修饰符同时修饰一个属性时，此属性名通常由大写字母组成，并且词间用下划线(_)分割，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TOTAL_BOOK_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <br></code></pre></td></tr></table></figure><hr><blockquote><p>注：当 <code>static final</code> 修饰一个属性时，此属性值不会随着对象的创建而改变，这也是 <code>static</code>修饰符自带的特性。而当仅仅一个 <code>final</code> 修饰属性时，其属性值可能会随着对象的创建而修改，但是在对象创建后，此属性值不能被修改，<br>例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">finalTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INT_ONE</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">10</span>); <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">int_two</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>两个属性<code>INT_ONE</code>和<code>int_two</code>都被赋值成随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">finalTest</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">finalTest</span>();<br><span class="hljs-type">finalTest</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">finalTest</span>();<br></code></pre></td></tr></table></figure><p>创建两个对象t1和t2，假设创建后t1两个属性为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">t1.INT_ONE = <span class="hljs-number">5</span>;<br>t1.int_two = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">t2.INT_ONE = <span class="hljs-number">5</span>; <span class="hljs-comment">// 静态的、编译时常量，不会随着不同对象的创建而变化，创建后属性值也不能被覆盖</span><br>t1.int_two = <span class="hljs-number">3</span>; <span class="hljs-comment">// 编译时常量，会随着不同对象的创建而变化，但是创建后属性值不能被覆盖</span><br></code></pre></td></tr></table></figure><p>同时，这个例子也表明了，编译时常量( <em>compile-time</em> constant)并不代表在表达式内就需要明确属性值，<code>INT_ONE</code>和<code>int_two</code> 都是在运行程序时被<strong>随机数函数</strong>赋值的。</p><blockquote><p>Notice:<br><code>final</code> protects only the <strong>variable itself</strong>.<br>If the variable is a <strong>reference</strong>, final does not protect the object that reference points to.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// Error</span><br>obj.setName(<span class="hljs-string">&quot;obj2&quot;</span>); <span class="hljs-comment">// OK </span><br></code></pre></td></tr></table></figure><p>protect <code>obj</code> instance itself;<br>not including the object it points to(e.g. <code>name</code>)</p><hr><h5 id="2-3-1-2-空白常量"><a href="#2-3-1-2-空白常量" class="headerlink" title="2.3.1.2 空白常量"></a>2.3.1.2 <strong>空白常量</strong></h5><p>空白常量 (blank final) 不需要需要在声明时被初始化，即不需要给定属性值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> safe;<br></code></pre></td></tr></table></figure><p>但是空白常量在使用前必须被赋值，通常会在<strong>构造方法</strong>中进行赋值。</p><p>总之，不管是 <strong>编译时常量( <em>compile-time</em> constant)</strong> 还是 <strong>空白常量 (blank final)</strong> 都需要在使用前被赋值，即在声明中或者构造方法中被赋值。</p><hr><h4 id="2-3-2-final-参数"><a href="#2-3-2-final-参数" class="headerlink" title="2.3.2 final 参数"></a>2.3.2 <code>final</code> 参数</h4><p><code>final</code> 参数可以修饰某一方法的<strong>形式参数</strong>为常量，在这个方法内，不能对此<strong>形式参数所指向的参数</strong>进行修改，只能读取此参数值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Book book)</span>&#123;<br>        book = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">// Error, illegal to rewrite &quot;book&quot;</span><br>        book.safe = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> idNum)</span>&#123;<br>        idNum++; <span class="hljs-comment">// Error, illegal to rewrite &quot;idNum&quot;</span><br>        id = idNum + <span class="hljs-number">1</span>; <span class="hljs-comment">// OK, can only read &quot;idNum&quot;</span><br>        System.out.println(<span class="hljs-string">&quot;id set, is&quot;</span>+id);<br>    &#125;<br></code></pre></td></tr></table></figure></p><hr><h4 id="2-3-3-final-方法"><a href="#2-3-3-final-方法" class="headerlink" title="2.3.3 final 方法"></a>2.3.3 <code>final</code> 方法</h4><p> <code>final</code> 方法用来修饰某一类的方法为常量，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br></code></pre></td></tr></table></figure><p> <code>final</code> 方法主要有两个目的：</p><blockquote><ol><li>保护一个类的某一方法被重写，尤其是保护此方法被此类的继承类（子类）重写，例如：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getName()为父类Book的一个final方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br><span class="hljs-comment">//textBook是继承Book的子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写父类的方法</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;This textBook&#x27;s name is, &quot;</span> + name); <span class="hljs-comment">// Error, getName()为父类Book的一个final方法，不能被重写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><ol><li>提高代码的运行效率。<br>编译时，编译器会优先运行被final修饰的方法，因此程序员可以根据需求，告知编译器需要优先运行那一部分的方法。然而在Java SE 5/6中，编译器以及JVM会处理程序的编译优先级，自动提高运行效率。</li></ol></blockquote><p>总之，目前只有当程序员需要保护某些方法不被重写才会使用到 <code>final</code>。</p><hr><p>注意：</p><blockquote><p><strong>当 <code>final</code> 和 <code>private</code>同时修饰一个方法：</strong><br>事实上任何 <code>private</code>方法都是 <code>final</code>，因为不能从一个类的外部访问<code>private</code>方法，因此当然不能对其进行修改，成为 <code>final</code>。所以给一个 <code>private</code>方法加上 <code>final</code>修饰符并没有什么意义。</p><p><strong>但是当在重写一个 <code>final private</code>方法时，情况会变得不一样，举例：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getName()和getBookName()为父类Book的两个方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;The name is: &quot;</span> + name);<br>    &#125;<br><br><span class="hljs-comment">//textBook是继承Book的子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写父类Book的方法(private final)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;This textBook&#x27;s name is, &quot;</span> + name); <br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写父类Book的方法(private)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;This textBook&#x27;s name is, &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//workBook是继承textBook的子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">workBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">textBook</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写父类textBook的方法(public final)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;This workBook&#x27;s name is, &quot;</span> + name); <br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 重写父类textBook的方法(public)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;This workBook&#x27;s name is, &quot;</span> + name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在main()中运行以下代码：</span><br><span class="hljs-comment">// 下面的代码正常运行，无报错</span><br><span class="hljs-type">textBook</span> <span class="hljs-variable">myTextBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">textBook</span>(<span class="hljs-string">&quot;newTextBook&quot;</span>);<br>myTextBook.getName();<br>myTextBook.getBookName();<br><span class="hljs-comment">// **********************</span><br><span class="hljs-comment">// 下面的代码运行失败，报错</span><br><span class="hljs-type">workBook</span> <span class="hljs-variable">myTextBook2</span> <span class="hljs-operator">=</span> myTextBook; <span class="hljs-comment">// upcating</span><br>myTextBook2.getName();<br>myTextBook2.getBookName();<br></code></pre></td></tr></table></figure><p>解释：</p><blockquote><p>子类不能重写父类中的 <code>final</code>方法是因为每当子类运行重写父类的方法时，都会回溯到父类，与父类中的被继承方法进行连接，但是因为<code>final</code>而被阻止。<br><strong>但是当子类“重写父类<code>private</code>方法”时，子类并不能访问到父类的<code>private</code>方法，这也正是<code>private</code>修饰的特性。因此这个看似“重写父类<code>private</code>方法”方法，并没有重写父类的方法，只是在子类中创建了一个属于子类的新方法，只不过与父类方法刚好重名了，所以并无关联。</strong><br>而例子中不能运行的代码，是因为没有重写父类方法而导致不能使用<a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">多态(Polymorphism)</a>。</p></blockquote><h4 id="3-3-4-final-类"><a href="#3-3-4-final-类" class="headerlink" title="3.3.4 final 类"></a>3.3.4 <code>final</code> 类</h4><p><code>final</code> 类修饰的是整个类，修改整个类或者对此类进行继承都是不允许的。<code>final</code> 类可以保障一个类的安全，适用于一个不用被修改的类，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sealer</span>&#123;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSealed</span><span class="hljs-params">( Book book)</span>&#123;<br>        book.safe = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Sealed!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个类被 <code>final</code> 修饰后，其<strong>属性值</strong>还是可以被改变，也可以选择其<strong>属性</strong>是否被 <code>final</code>进行修饰。<br>但是其<strong>方法</strong>就同样为<code>final</code>，不能被修改，这样才保证了 <code>final</code>类不会被继承，其<strong>方法</strong>不会被重写。<code>final</code>类中的方法前可选加<code>final</code>修饰符，但是不会有任何其他意义。</p><hr><h3 id="2-4-package-语句"><a href="#2-4-package-语句" class="headerlink" title="2.4 package 语句"></a>2.4 <code>package</code> 语句</h3><p>在Java中，每个独立的<code>public</code>类都被安排在分开的文件夹中，每个文件夹中可能还包括其他的非<code>public</code>的类。为了更好的管理这些有关联的类，可以应用到<code>package</code>。<code>package</code>包含了一组class，并且被管理在统一的<code>namespace</code>（命名空间）下。<br>这些有关系的类必须放在一个名<code>packageName</code>的文件夹中，并且每个类的源文件必须把以下代码写在开头：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> packageName;<br></code></pre></td></tr></table></figure></p><p>例如，定义一个名为<code>triangle</code>的 <strong><em>package</em></strong>，并包含<code>RightTriangle</code>，<code>IsoscelesTriangle</code>两个类，那必须在这两个类文件开头写出 <strong><em>package</em></strong> 语句，否则这两个文件就被放在 <strong><em>default package</em></strong> 中。如果需要引用package中的类，就需要使用fully qualified name，例如：</p><blockquote><p><code>triangle.RightTriangle</code> ：引用<code>RightTriangle</code>类<br><code>triangle.IsoscelesTriangle</code> ：引用<code>IsoscelesTriangle</code>类</p></blockquote><p>同时，在 <strong><em>package</em></strong> 文件夹中也可以定义子文件夹，并通过fully qualified name去引用，以<code>Scanner</code>类举例：</p><blockquote><p><code>Scanner</code>类位于java.util这一子文件夹中，可以用以下语句引用到<code>Scanner</code>类：<br><code>java.util.Scanner</code></p></blockquote><hr><p>如果要引用<code>Scanner</code>类创建对象，则可以使用它的fully qualified name：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br></code></pre></td></tr></table></figure></p><p>但是每次都使用fully qualified name会十分麻烦，那就可以使用import语句导入某个类或者一整个package，如下：</p><blockquote><p><code>import packageName.className;</code>或者<br><code>import packageName.*;</code></p></blockquote><p>以<code>Scanner</code>类为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">// 导入一个类</span><br><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-comment">// 导入一整个package</span><br></code></pre></td></tr></table></figure></p><p>则在创建对象时就可以使用类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner<br><span class="hljs-comment">// import java.util.*</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果从两个不同的package中import两个相同名字的类，或者import的类与现有现有的类重名的话，单单使用一个unqualified name是不合法的，如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> abox.tool;<br><span class="hljs-keyword">import</span> bbox.tool;<br><span class="hljs-type">tool</span> <span class="hljs-variable">myTool</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">tool</span>(); <span class="hljs-comment">// Error!</span><br>abox.<span class="hljs-type">tool</span> <span class="hljs-variable">myToola</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">abox</span>.tool(); <span class="hljs-comment">// OK</span><br>bbox.<span class="hljs-type">tool</span> <span class="hljs-variable">myToolb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">bbox</span>.tool(); <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><hr><p>例如：</p><p>此语句同时写在Book.java和Tool.java两个文件中，因此两个文件可以互相访问对方的class。</p><p><strong><em>Tool.java</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">myBook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">//访问Book类的属性</span><br>        System.out.println(myBook.page); <span class="hljs-comment">//访问Book类的属性</span><br>        <span class="hljs-comment">//System.out.println(myBook.id); // Error</span><br>        System.out.println(myBook.subBookId); <span class="hljs-comment">//</span><br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>Tool类因为包含在<code>ultrafish package</code>中，因此它可以直接访问同样在package中Book类属性以及方法。因此使用package可以很方便的管理需要访问不同Java文件的Java开发工程。</p><blockquote><p>注意:</p><ol><li><code>package</code>语句必须写在Java文件除注释以外的第一行；</li><li><code>package</code>语句中的包名一般使用小写字母。</li><li>建议把包文件放在同一个子目录下，可以解决 <strong>重名</strong> 以及 <strong>寻找class不易</strong> 的问题</li></ol></blockquote><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Java相关的基础知识十分重要，会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog3.0-开发UltraFish Plus页面 &amp; 安装SSL证书开启https &amp; 更换主题为fluid</title>
    <link href="/2021/07/27/blog3/"/>
    <url>/2021/07/27/blog3/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2020/07/29/hello-ultrafisher/">blog1.0更新-第一篇文章 “Hello UltraFisher”</a><br><a href="https://ultrafish.cn/2020/10/15/blog2/">blog2.0更新-部署到阿里云服务器以及更新域名 </a><br><a href="https://ultrafish.cn/2021/07/27/blog3/">blog3.0更新-开发UltraFish Plus页面 &amp; 安装SSL证书开启https &amp; 更换主题为fluid</a></p></blockquote><h2 id="UltraFish回顾"><a href="#UltraFish回顾" class="headerlink" title="UltraFish回顾"></a>UltraFish回顾</h2><h3 id="blog1-0"><a href="#blog1-0" class="headerlink" title="blog1.0"></a>blog1.0</h3><p>2020年7月29日，也就是一年前，我发布了第一篇文章<a href="https://ultrafish.cn/2020/07/29/hello-ultrafisher/">第一篇文章 “Hello UltraFisher”</a>，标志着我正式建立起我的博客网站并发布在公网上，当时我用的是<a href="https://hexo.io/zh-cn/">Hexo框架</a>、<a href="https://github.com/litten/hexo-theme-yilia">yilia主题</a>并且部署在GitHub上，起名为<a href="https://ultrafisher.github.io">UltraFisher</a>(点击链接还可以访问，但已停止更新和维护)<br><span id="more"></span></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/1.png?versionId=CAEQGxiBgMDw.peb1xciIDcwYmEwNmQxMWRmNzQwYmY5MzM5ZTVmMDk5ZDE0ODZl" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog1.0-UltraFisher网站</div></center><hr><h3 id="blog2-0"><a href="#blog2-0" class="headerlink" title="blog2.0"></a>blog2.0</h3><p>2020年10月15日，我发布了blog2.0的更新文章<a href="https://ultrafish.cn/2020/10/15/blog2/">blog2.0-部署到阿里云服务器以及更新域名</a>。框架和主题都没有变化，但从GitHub部署到了阿里云ECS云服务器部署，提高了在国内的访问速度，并且购买以及使用了新的域名（ultrafish.cn）。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/2.png?versionId=CAEQGxiBgMCm_peb1xciIGQxZGIwYmQ2YTE4NzRkYjlhMTFiMDViZWJkMmQ4NWU0" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog2.0-UltraFish网站</div></center><hr><p>而今天，2021年7月27日，临近建站1周年，迎来了blog3.0！</p><h2 id="blog3-0"><a href="#blog3-0" class="headerlink" title="blog3.0"></a>blog3.0</h2><p>主要更新了三个地方:</p><blockquote><ol><li>新增了UltraFish Plus开发性页面;</li><li>安装了SSL证书，开启https访问;</li><li>主题从yilia改为fluid</li></ol></blockquote><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>首先看一眼外观</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/3.png?versionId=CAEQGxiBgICU.Zeb1xciIGY5NTMxNTkwNzM1ODQ5NDBhNTYwYzMzZTBhNWMxOTg5" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/6.png?versionId=CAEQGxiBgICX.Zeb1xciIDhiZjcxYzBmMjI1MTRhOGFiMzNmMzVlMmRlNDdmYjlj" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/4.png?versionId=CAEQGxiBgMDY.5eb1xciIDcxM2Y0MDgzZmIyNzRmNzc4NDMyMDBmMmYxMDdkMjA4" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish所有文章页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/5.png?versionId=CAEQGxiBgIDl_peb1xciIDlhYTg2NDcyZWZkNjQ2YTM5Y2E3ZGZmNGQzMTI1ODhi" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish关于我页</div></center><hr><h3 id="新增UltraFish-Plus开发性页面"><a href="#新增UltraFish-Plus开发性页面" class="headerlink" title="新增UltraFish Plus开发性页面"></a>新增UltraFish Plus开发性页面</h3><p><a href="https://ultrafish.cn/plus/index.html">UltraFish Plus</a>这个页面和博客页面划分了开来，可以让我脱离现成的框架自己开发一些项目或者实现可视化操作。<br>例如之前的文章<a href="https://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法Signed binary number representation</a>中提供了有符号二进制数的转换方法及其代码，因此我就在UltraFish Plus中加入了一个可交互的<a href="https://ultrafish.cn/plus/files/signed_binary_number_representation.html">有符号二进制数转换器 Signed binary number convertor</a>，浏览者以及我可以使用它进行交互。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/7.png?versionId=CAEQGxiBgMCy.Jeb1xciIDUyNDU4ODY2OWFjYjRkODdiMzc4ZmE1NGU4YzJmNjJi" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish Plus主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/8.png?versionId=CAEQGxiBgMDH.peb1xciIGI1ZWNiYTliZTg3ZjQyOTdhNDQxYjlkODQzYjRhZjQx" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish Plus-有符号二进制数转换器 Signed binary number convertor</div></center><p>虽然有些项目网上已经存在了，但是通过自己的开发还是能学到很多知识，积累一定经验的。UltraFish Plus里的项目开发周期都比较长，因此更新频率不会很快。</p><hr><h3 id="安装SSL证书-开启https访问"><a href="#安装SSL证书-开启https访问" class="headerlink" title="安装SSL证书 开启https访问"></a>安装SSL证书 开启https访问</h3><p>使用新的域名后，并没有安装SSL证书，导致每次访问的网站都会显示“不安全”，在各大搜索引擎搜索时也会有限制，网站安全性也不高。我就在阿里云上购买了SSL证书，并花了九牛二虎之力配置到了服务器中。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/9.png?versionId=CAEQGxiBgMCi95eb1xciIDFjOTYyYzBiYzE4ZDRlMWNhNGU0MGY3ZDhhY2RjZDc0" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">安全访问</div></center><hr><h3 id="使用fluid主题"><a href="#使用fluid主题" class="headerlink" title="使用fluid主题"></a>使用fluid主题</h3><p>之前一直使用的是<a href="https://github.com/litten/hexo-theme-yilia">yilia主题</a>，它简约并不简单，开发时间比较早，网上也有很多对问题的解决方法。但是过度的动画不太流畅，对手机移动端的支持不太好，加载时间较长，最主要的是作者最新一次的更新已经是2017年了。<br>因此我就转到了一个2020年开发出来的<a href="https://hexo.fluid-dev.com/docs/">fluid主题</a>，就像它的名字一样，使用起来十分流畅，官方配置文档也很全面，网页加载也十分迅速。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/10.png?versionId=CAEQGxiBgIC3_peb1xciIGE4YWI5OTUzNDg4NTRhNmViMTcwMWNiNjVlNjljOTEw" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Fluid主题</div></center><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>UltraFish Plus会尽可能加快更新，新的主题也正在完善配置，会持续更新。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>fluid Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UltraFish Plus</tag>
      
      <tag>SSL</tag>
      
      <tag>https</tag>
      
      <tag>fiuid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来港第二年 - 新征程</title>
    <link href="/2021/07/04/second-year/"/>
    <url>/2021/07/04/second-year/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>嗨，各位好。<br>两年前，很多人知道我高考后去了香港大学(HKU)，实际上我去的读的并不是本科，不是学士学位，而是去读了<strong>副学士学位(Associate degree)</strong>，类似内地的专科，但不完全是，因此我的学校是香港大学的附属学院 <strong><a href="https://www1.hkuspace.hku.hk/cc/">香港大学专业进修学院-HKU SPACE (HKU School of Professional and Continuing Education)</a></strong> ，学习计算机工程学(Computer Engineering)。</p><span id="more"></span><center><img src="/2021/07/04/second-year/1.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港大学专业进修学院-九龙东校区</div></center><center><img src="/2021/07/04/second-year/11.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">计算机工程(Computer Engineering)</div></center><p>读完两年课程之后才可以继续申报香港的大学，修读本科的课程，以拿到学士学位。也有很多香港本地学生选择先读副学士再申请大学。申请的条件是基于我<strong>副学士两年的成绩(GPA)、雅思成绩以及软实力</strong>。当时我的目标就是留在香港继续念书，并且升入香港前八所大学中的香港大学。</p><center><img src="/2021/07/04/second-year/2.jpeg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港八大</div>    </center><p>因此我也不断努力，而且副学士文凭在内地是不认可的，所以我只能向前，升入本科，别无选择。幸运的是，课程内容都是我喜欢并且擅长的，所以最终两年副学士的成绩(GPA)得到了4.0的满分; 雅思也拿到了6.5分; 软实力方面因为疫情的影响，并没有参加比赛或实习，但我参加了学校老师组织的暑期学习小组，研究了MicroPython，我也建立了我的第一个博客网站<a href="http://ultrafish.cn">UltraFish.cn</a>，把我平时的学习研究分享在了上面。最后拿到了Recipient of Academic Excellence Award(学术优秀奖)、Student on Principal’s Honours List(校长荣誉名单)等奖项,也拿到了香港政府的Self-financing Post-secondary Scholarship Scheme(自资专上奖学金计划)的全额奖学金。</p><center><img src="/2021/07/04/second-year/3.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 2px;">GPA</div></center><center><img src="/2021/07/04/second-year/31.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 2px;">奖学金证书</div></center><center><img src="/2021/07/04/second-year/4.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish网站</div></center><p>后来，在和我们专业主管老师交谈中了解到，<strong>我们作为内地学生，除非你出奇优秀，相比于香港本地同学，从副学士升学到学士是比较难的，名额比较少，尤其是香港的前三大学，十分困难，录取名额大概是80%本地学生，20%非本地学生(包括内地副学士学生，应届高考生，国际高中学生，国外学生等)</strong>。也了解到我们专业到现在也只有一个内地学生从副学士升入了科技大学。这让我意识到作为内地生的升学不易，但我也只能继续努力.在之后的大学申请时期，我申请了香港大学，香港中文大学，香港科技大学，香港城市大学，香港理工大学，香港浸会大学这六所大学的与计算机工程相关专业。<strong>之后我先后收到了理工大学(大一入学)，中文大学(大三入学)以及浸会大学(大三入学)的面试。最后拿到了理工大学(大一入学)以及浸会大学(大三入学)的录取，其他的学校都没有成功录取，也没有面试，这也验证了之前老师的话。最后我选择了香港理工大学(大一入学)，就读电子计算学(Computing)，类似计算机科学。</strong></p><center><img src="/2021/07/04/second-year/5.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">录取通知书</div></center><p><strong>香港理工大学在最新的QS2022全球大学排名中是66名，前几年也在不断上前，潜力很大。</strong> 目前我也收到了理工大学的学生签证，将在理工从大一开始修读四年的课程，我也能用副学士的课程转换一部分学分，提前毕业。</p><center><img src="/2021/07/04/second-year/6.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">QS2022全球大学排名-香港地区</div></center><center><img src="/2021/07/04/second-year/7.jpg" width="75%" height="75%"></center><center><img src="/2021/07/04/second-year/8.jpg" width="75%" height="75%"></center><center><img src="/2021/07/04/second-year/9.jpg" width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港理工大学校园</div></center><p><a href="https://www.polyu.edu.hk/sc/photo-gallery/">点击查看更多图片&gt;&gt;</a></p><p>目前，我副学士已经毕业了，过去这两年的学习过程十分特别，经历了香港的社会运动和紧接着的疫情，导致两年课程大部分都是在网上进行的，只有差不多两个月的线下课程，但我大部分时间都留在香港。好在两年的副学士学习压力并没有像本科课程那样大，给我熟悉香港的生活和学习环境提供了机会，我不仅从课上学习到了很多专业的基础知识，摸索了学习方法，而且也自学了很多新的内容，探索了很多新的领域，也能让我准备好应对之后的挑战。毫无疑问，之后在理工的学习压力和竞争会越来越大，相信自己能够继续克服困难，一直向前，加油!</p><hr><p>引用:<br><a href="https://www.polyu.edu.hk/sc/photo-gallery/">Photo Gallery-The Hong Kong Polytechnic University</a><br><a href="https://www.topuniversities.com/university-rankings/world-university-rankings/2022">QS World University Rankings 2022</a><br><a href="https://www.163.com/dy/article/FLBMU2GR0538LBG4.html">为什么要考香港“八大”？所有原因都在这里</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>香港第二年</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hexo中用Markdown通过阿里云OSS添加视频文件</title>
    <link href="/2021/04/25/post-video-with-oss/"/>
    <url>/2021/04/25/post-video-with-oss/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/online-or-local-video-gif-in-markdown/">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/Spawnfailed-error/">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>在我之前的文章<a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a>中介绍了如何在Blog中用Markdown添加本地视频或者网络视频. 但是都有限制: 本地视频受限于git, 能够上传的文件体积很小, 并且上传过大文件会<a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/">引发错误</a>; 网络视频需要用户先把视频上传到视频平台 (如: bilibili, 优酷等) 才能添加到网站中, 并且视频分辨率不高.</p><p>于是, 我想到把视频放到云服务器中, 再让网站直接访问, 这样不必通过git上传文件, 也可以获取原来的画质. 我在升级我的<a href="http://ultrafish.cn/2020/10/15/blog2/">blog2.0</a>时, 购买了阿里云的云服务器, 于是我想到可以用阿里云的OSS (Object Storage Service), 即对象存储来实现视频文件的添加.<br><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.11186623.6.540.488a4c13156lrt">查看阿里云官方对OSS的介绍</a></p><p>把文件上传到OSS, 获取URL, 再把URL添加到文章中, 即可在文章中添加文件, 如: 视频、图片、音乐等.</p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h3 id="开通对象存储OSS服务"><a href="#开通对象存储OSS服务" class="headerlink" title="开通对象存储OSS服务"></a>开通对象存储OSS服务</h3><p>先在阿里云官网注册一个账号 (若有可以跳过).<br>并在左侧产品与服务菜单栏中找到<strong>对象存储OSS</strong>, 点击即可进入开通页面.</p><p><img src="/2021/04/25/post-video-with-oss/1.jpg" alt></p><hr><h3 id="创建Bucket并上传文件"><a href="#创建Bucket并上传文件" class="headerlink" title="创建Bucket并上传文件"></a>创建Bucket并上传文件</h3><p>Bucket是存放对象的容器, 可以存入文档, 照片, 视频等文件.<br>1.OSS服务开通后, 进入OSS页面, 点击左侧<strong>创建Bucket</strong>按钮:</p><p><img src="/2021/04/25/post-video-with-oss/2.jpg" alt></p><p>2.填写<strong>Bucket名称</strong>, 存储类型选择<strong>标准存储</strong>, 读写权限选择<strong>公共读</strong>, 其他选项保持默认或根据需求修改, 最后点击确认:</p><p><img src="/2021/04/25/post-video-with-oss/3.jpg" alt><br>现在, Bucket已经创建完成.</p><p>3.上传文件<br>点击创建好的Bucket名称, 进入管理页面. 点击<strong>上传文件</strong>, 选择文件即可上传:</p><p><img src="/2021/04/25/post-video-with-oss/4.jpg" alt></p><hr><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>为确保上传的文件添加到博客网站后不被盗用以及下载, 需要给OSS设置防盗链.</p><p>在左侧菜单栏选择<strong>权限管理</strong>, 找到<strong>防盗链</strong>, 在<strong>Referer</strong>一栏中填入你的blog域名, 记得在域名前加上“ <em> ”, 以及在域名后加上“ / ”, 把权限扩大到blog网站的所有页面. 然后关闭<strong>空Referer</strong>选项, 最后点击<em>*保存</em></em>.</p><p><img src="/2021/04/25/post-video-with-oss/5.jpg" alt></p><hr><h3 id="获取文件URL并添加相应代码到文章"><a href="#获取文件URL并添加相应代码到文章" class="headerlink" title="获取文件URL并添加相应代码到文章"></a>获取文件URL并添加相应代码到文章</h3><p>点击上传到Bucket的文件名, 即可找到文件URL, 并复制.</p><p>添加以下代码到文章的Markdown中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;video id=<span class="hljs-string">&quot;video&quot;</span> controls=<span class="hljs-string">&quot;&quot;</span> preload=<span class="hljs-string">&quot;none&quot;</span> allowfullscreen=<span class="hljs-string">&quot;true&quot;</span> position= <span class="hljs-string">&quot;absolute&quot;</span> width=<span class="hljs-string">&quot;100%&quot;</span> poster=<span class="hljs-string">&quot;你的URL&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mp4&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;你的URL&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>把以上代码的两处<strong>你的URL</strong>替换成之前复制过来的<strong>文件URL</strong>.</p><p>效果如下:</p><p><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0"><br>      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0" type="video/mp4">      </video><br><em>( 视频来自我的文章: <a href="http://ultrafish.cn/2021/01/02/1kcpphny/">用1000多行C++代码写给2021元旦的祝福-C++像素字实现方法</a> )</em></p><hr><p>引用:<br><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.11186623.6.540.488a4c13156lrt">对象存储 OSS-阿里云</a></p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>不仅仅可以使用OSS来上传视频, 网站中的图片, 音乐等都可以通过OSS来展示. 这样可以减少本地服务器(我的电脑)的压力, 也可以提高访问速度. 之后会继续尝试.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>Media</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
      <tag>hexo</tag>
      
      <tag>OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino蓝牙模块相互通信</title>
    <link href="/2021/03/08/Arduino-bluetooth-transceiving/"/>
    <url>/2021/03/08/Arduino-bluetooth-transceiving/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>在使用Arduino做项目时, 各个元件都需要使用跳线与MCU或者其他元件连接, 一旦元件数量变多, 跳线数量也会变得很多很杂, 这不利于后期的整理和调整, 也会对信号的传输造成影响, 同时外观也不好看. 因此想用蓝牙代替传统的跳线, 并且能让蓝牙模块配合单片机实现互相通信.<br><span id="more"></span></p><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><blockquote><p>MCU: Arduino UNO R3 <em>2<br>蓝牙模块: HC-08D </em>2<br>USB-TTL转接板 : HC-USB-T V2.0 *2<br>HC-USB-P串口助手 (<a href="https://mikezhang.cowtransfer.com/s/e54b2e749ce646">下载链接</a>)</p></blockquote><h3 id="蓝牙模块初始化"><a href="#蓝牙模块初始化" class="headerlink" title="蓝牙模块初始化"></a>蓝牙模块初始化</h3><p>为了使两块蓝牙模块能够互相连接, 首先需要用<strong>USB-TTL转接板 和 HC-USB-P串口助手</strong>把两块HC-08D初始化并且设置其中一个为主机.</p><blockquote><ol><li>给两块HC-08D上电</li><li>把其中一块HC-08D与USB-TTL转接板相互连接, 然后把USB-TTL转接板接上电脑</li><li>打开HC-USB-P串口助手, 选择<strong>模块类型HC-08</strong>, 点击<strong>测试指令</strong>, 回复“<strong>OK</strong>”即为测试成功</li><li>点击“<strong>设置模块主机</strong>”, 然后在指令文本框中输入<strong>AT</strong>, 点击<strong>数据发送</strong>, 收到回复“<strong>OK</strong>”即为测试成功, 如图:<br><img src="/2021/03/08/Arduino-bluetooth-transceiving/2.jpg" alt></li><li>设置完成后, 两块蓝牙模块上的指示灯常亮说明连接已经成功, 之后断电后上电两块板会自动连接, 可以把两块板连接USB-TTL转接板, 并通过HC-USB-P串口助手互相给另一块板发送以及接收数据, 以测试连接的稳定性.</li></ol></blockquote><h3 id="蓝牙模块与MCU连接方式"><a href="#蓝牙模块与MCU连接方式" class="headerlink" title="蓝牙模块与MCU连接方式"></a>蓝牙模块与MCU连接方式</h3><p><img src="/2021/03/08/Arduino-bluetooth-transceiving/1.jpg" alt></p><p>连接方式参考上图</p><blockquote><p>VCC —- 5V<br>GND —- GND<br>TXD —- D5<br>RXD —- D3</p></blockquote><p>主机与从机与MCU连接方式相同, 虽然称为主机和从机, 但是两者都具有传输和接收数据的功能, 名称不同只为了区分两者.</p><h3 id="Arduino-UNO-测试程序"><a href="#Arduino-UNO-测试程序" class="headerlink" title="Arduino UNO 测试程序"></a>Arduino UNO 测试程序</h3><p>初始化与连接完成后, 可以开始Arduino的编程, 以达到用MCU传输以及接收数据.<br>程序主体部分, 主机与从机是相同的, 数据处理部分就取决于自己的需求.<br>需要用到 <strong>SoftwareSerial.h</strong> 这一头文件, 使用read()方法接收数据, write()方法传输数据, 更多关于此头文件的内容, 请查看<a href="https://www.arduino.cc/en/Reference/SoftwareSerial/">Arduino官网对此的描述</a>.<br>参考程序如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-type">int</span> btRead;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  BT.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.<span class="hljs-built_in">write</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    btRead = BT.<span class="hljs-built_in">read</span>(); <span class="hljs-comment">// BT接收数据</span><br>    Serial.<span class="hljs-built_in">println</span>(btRead); <span class="hljs-comment">// 串口打印数据</span><br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>以上示例程序能够让两个MCU互相发送与接收数据, 随后在两个Arduino的串口监视器都能够看到接收的数据100. 可以让两块MCU发送不一样的数据, 以测试数据传输以及接收的成功.<br>在测试中可能会发现接收到的数据为-1, 这说明在某一时刻接收出错, 因此我们可以用<strong>available()方法</strong>或者<strong>检查read()的数据是否为-1</strong>来检查接收的成功性, 示例如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-type">int</span> btRead;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  BT.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.<span class="hljs-built_in">write</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    <span class="hljs-keyword">if</span> (BT.<span class="hljs-built_in">available</span>() &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 检查接收成功性</span><br>        btRead = BT.<span class="hljs-built_in">read</span>(); <span class="hljs-comment">// BT接收数据</span><br>        Serial.<span class="hljs-built_in">println</span>(btRead);<span class="hljs-comment">// 串口打印数据</span><br>    &#125; <br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>或者<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-type">int</span> btRead;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  BT.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.<span class="hljs-built_in">write</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    btRead = BT.<span class="hljs-built_in">read</span>(); <span class="hljs-comment">// BT接收数据</span><br>    <span class="hljs-keyword">if</span> (btRead != <span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">// 检查接收成功性</span><br>        Serial.<span class="hljs-built_in">println</span>(btRead);<span class="hljs-comment">// 串口打印数据</span><br>    &#125; <br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="数据传输算法"><a href="#数据传输算法" class="headerlink" title="数据传输算法"></a>数据传输算法</h3><p>需要注意的是, read()方法只能每次传输以及接收<strong>一个</strong>数据, 并且传输以及接收的是<strong>character类型</strong>的数据, 数据大小<strong>介于0到255, 共256个数据</strong>. 若要传输较大的数据, 可以采用同比缩小和放大的方法. 例如, 若要传输一值为12345的数据, 可以在发送端整除100, 变为123后在传输; 并且在接收端乘以100, 最后接收到的数据即为12300. 当然, 这样的过程产生了数据的误差.</p><p>此外, 在实际操作中, 我在传输端有多个旋转电阻模块, 用来控制接收端连接的多个舵机, 每一个舵机都是单独被旋转电阻模块控制的. 这种情况下, 用蓝牙模块就需要注意数据的<strong>分组以及顺序的匹配性</strong>, 不能使接收到的数据与传输的数据错位.</p><p>考虑到此蓝牙模块一次只能传输一个数据, 并且在测试中发现, 传输数据的顺序与接收数据的顺序是一致的, 不会发生偏移. 那只需要在发送端使旋转电阻模块的数据以一个特定的顺序发送, 并且在接收端以相同的顺序接收, 那就可以实现一一对应. 之后唯一需要做的就是使第一个值对齐, 防止数据的整体偏移. </p><p>因此, 我在每一组传输数据第一位前加上“000”的校验符, 使得接收端每次接收到“000”后, 开始处理校验符之后的数据, 以此使数据对齐. 一旦接收端没有接收到完整的“000”, 则重新接收下一组数据.</p><p>参考程序: (传输端有5个传感器控制接收端连接的5个舵机)<br>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Arduino_Bluetooth_Transceiving">https://github.com/zhangwengyu999/Arduino_Bluetooth_Transceiving</a></p><p>发送端程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// TX</span><br><span class="hljs-comment">// 发送端程序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-type">int</span> zero = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  BT.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// sensor one A0</span><br>    <span class="hljs-type">int</span> Readone = <span class="hljs-built_in">analogRead</span>(A0);<br>    <span class="hljs-type">int</span> Outone = <span class="hljs-built_in">map</span>(Readone, <span class="hljs-number">1023</span>, <span class="hljs-number">880</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// sensor two A1</span><br>    <span class="hljs-type">int</span> Readtwo = <span class="hljs-built_in">analogRead</span>(A1);<br>    <span class="hljs-type">int</span> Outtwo = <span class="hljs-built_in">map</span>(Readtwo, <span class="hljs-number">270</span>, <span class="hljs-number">400</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>);<br><br>    <span class="hljs-comment">// sensor three A2</span><br>    <span class="hljs-type">int</span> Readthree = <span class="hljs-built_in">analogRead</span>(A2);<br>    <span class="hljs-type">int</span> Outthree = <span class="hljs-built_in">map</span>(Readthree, <span class="hljs-number">280</span>, <span class="hljs-number">400</span>, <span class="hljs-number">18</span>, <span class="hljs-number">5</span>);<br>    <br>    <span class="hljs-comment">// sensor four A3</span><br>    <span class="hljs-type">int</span> Readfour = <span class="hljs-built_in">analogRead</span>(A3);<br>    <span class="hljs-type">int</span> Outfour = <span class="hljs-built_in">map</span>(Readfour, <span class="hljs-number">1023</span>, <span class="hljs-number">700</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// sensor five A4</span><br>    <span class="hljs-type">int</span> Readfive = <span class="hljs-built_in">analogRead</span>(A4);<br>    <span class="hljs-type">int</span> Outfive = <span class="hljs-built_in">map</span>(Readfive, <span class="hljs-number">0</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">0</span>, <span class="hljs-number">180</span>);<br><br>    <span class="hljs-comment">// 000 校验符号发送</span><br>    BT.<span class="hljs-built_in">write</span>(zero);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">10</span>);<br>    BT.<span class="hljs-built_in">write</span>(zero);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">10</span>);<br>    BT.<span class="hljs-built_in">write</span>(zero);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">10</span>);<br>    <br>    <span class="hljs-comment">// 传感器数据以特定顺序传输</span><br>    BT.<span class="hljs-built_in">write</span>(Outone); <span class="hljs-comment">// sensor one</span><br>    BT.<span class="hljs-built_in">write</span>(Outtwo); <span class="hljs-comment">/// sensor two</span><br>    BT.<span class="hljs-built_in">write</span>(Outthree); <span class="hljs-comment">// sensor three</span><br>    BT.<span class="hljs-built_in">write</span>(Outfour); <span class="hljs-comment">// sensor three</span><br>    BT.<span class="hljs-built_in">write</span>(Outfive); <span class="hljs-comment">// sensor five</span><br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接收端程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// RX</span><br><span class="hljs-comment">// 接收端程序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Servo.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-type">int</span> val;<br><span class="hljs-type">int</span> zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于000校验符的计数</span><br>Servo myServoone;<br>Servo myServotwo;<br>Servo myServothree;<br>Servo myServofour;<br>Servo myServofive;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  BT.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>  myServoone.<span class="hljs-built_in">attach</span>(<span class="hljs-number">0</span>);<br>  myServotwo.<span class="hljs-built_in">attach</span>(<span class="hljs-number">1</span>);<br>  myServothree.<span class="hljs-built_in">attach</span>(<span class="hljs-number">2</span>);<br>  myServofour.<span class="hljs-built_in">attach</span>(<span class="hljs-number">3</span>);<br>  myServofive.<span class="hljs-built_in">attach</span>(<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 000校验符检测</span><br>    <span class="hljs-keyword">while</span> (zeroCounter != <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// 循环直到检测到连续的000</span><br>      val = BT.<span class="hljs-built_in">read</span>();<br>      <span class="hljs-keyword">if</span> (val == <span class="hljs-number">0</span>)&#123;<br>        zeroCounter++; <span class="hljs-comment">// 若检测到0, 则计数加1</span><br>        &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 若检测到不是0, 则计数直接重置为0</span><br>        &#125;<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-comment">// 000校验完成后开始接收数据, 保证不会偏移</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)&#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)&#123;<br>        val = BT.<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServoone.<span class="hljs-built_in">write</span>(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>        val = BT.<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServotwo.<span class="hljs-built_in">write</span>(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>        val = BT.<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServothree.<span class="hljs-built_in">write</span>(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>        val = BT.<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServofour.<span class="hljs-built_in">write</span>(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>        val = BT.<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServofive.<span class="hljs-built_in">write</span>(val);<br>          i++;<br>        &#125;<br>      &#125;<br>    &#125;<br>    zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 一组数据接收完成后, zeroCounter重置为0, 开始下一轮000校验</span><br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">50</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这是第一次研究Arduino的蓝牙模块, 学到很多所以记录一下, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br><a href="https://www.arduino.cc/en/Reference/SoftwareSerial/">Arduino-SoftwareSerial Library</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Hardware</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>蓝牙</tag>
      
      <tag>相互通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的封装性(Encapsulation)</title>
    <link href="/2021/03/07/Java-oop-encapsulation/"/>
    <url>/2021/03/07/Java-oop-encapsulation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><hr><blockquote><h4 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h4><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><span id="more"></span><h4 id="封装性-Encapsulation"><a href="#封装性-Encapsulation" class="headerlink" title="封装性(Encapsulation)"></a>封装性(Encapsulation)</h4><p>封装性是OOP的核心思想, 目的是将类的静态部分和动态部分, 即类的属性和方法封装起来, 使某一对象的实现过程隐藏起来, 使用者只能看到对象的交互层面, 无须知道此对象内部是如何工作的. 封装性(Encapsulation)能保证类内部的完整性, 使用者既能使用某一类, 又不会影响到类内部的数据和结构, 提高了安全性.</p><hr><h4 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h4><h5 id="1-类的属性-Field"><a href="#1-类的属性-Field" class="headerlink" title="1. 类的属性 (Field)"></a>1. 类的属性 (Field)</h5><p>类的属性又称为成员变量, 英文为Field. 以下代码构造了一个Book类, Book为类的名称, 设置了两个属性, 字符串类的name, 用于存储书名, 以及整数类型的page, 用于存储页数. 属性可以设置初始值, 如不设置初始值, 则会有默认值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-类的方法-Method"><a href="#2-类的方法-Method" class="headerlink" title="2. 类的方法 (Method)"></a>2. 类的方法 (Method)</h5><p>类的方法又称为成员方法, 英文为Method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码给Book类添加了两个方法.<br>第一个方法setName为设置Book类的name属性, 即给书本一个名字. public为权限修饰符, public表示此方法可以被本类, 子类以及其他包中的类使用, 理解为公开的. void表示此方法无返回值, 理解为表示返回值为空. setName为方法的名称. 括号中的inName是方法的参数(parameter), String表明了参数的数据类型. name = inName; 表示把对象的name属性设置为setName中的参数inName, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">// 构造Book类的对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">mybookname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>; <span class="hljs-comment">// 书名存入变量</span><br>mybook.setName(mybookname); <span class="hljs-comment">// 调用Book的setName方法, 设置书名为ABC</span><br></code></pre></td></tr></table></figure><p>第二个方法getName为获取并输出书的名字, String表示此方法有返回值, 并且返回值为字符串类型. return name; 表示返回对象的name属性, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">// 构造Book类的对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">mybookname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>; <span class="hljs-comment">// 书名存入变量</span><br>mybook.setName(mybookname); <span class="hljs-comment">// 调用Book的setName方法, 设置书名为ABC</span><br>System.out.println(mybook.getName()); <span class="hljs-comment">// 调用Book的getName方法, 获取书的名字并打印输出, 输出的即为方法的返回值“ABC”</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>当一个类中有多个相同名字的方法，则被称为方法重载。根据 <strong>方法名</strong> 和 <strong>参数类型（数量、类型以及排列顺序）</strong> 来判断是否能重载。参数的类型、返回值类型并不会被考虑。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(<span class="hljs-type">int</span> inNameNum)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, int参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, String参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>    <span class="hljs-comment">/* 以下两个方法都是不合法的重载</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public int setName(String inName)&#123; // 返回值不同并不考虑</span><br><span class="hljs-comment">        //...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public void setName(String theName)&#123; // 参数名不同并不考虑</span><br><span class="hljs-comment">        //...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName, <span class="hljs-type">int</span> inNameNum)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, String参数和int参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(<span class="hljs-type">int</span> inNameNum, String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 和nt参数和String参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当以上某一方法被使用时，编译器会根据 <strong>方法名</strong> 和 <strong>参数类型（数量、类型以及排列顺序）</strong> 来调用相对应的方法。</p></blockquote><hr><h5 id="3-类的构造方法-Constructor"><a href="#3-类的构造方法-Constructor" class="headerlink" title="3. 类的构造方法 (Constructor)"></a>3. 类的构造方法 (Constructor)</h5><p>类的构造方法(Constructor)是一种的特殊的方法, 每次用类实例化一个对象时, 构造方法会自动调用.<br>构造方法有三个特性:<br><strong>&gt;构造方法的名称与类的名称相同;</strong><br><strong>&gt;构造方法没有返回值, 但是不需要用void修饰字符;</strong><br><strong>&gt;可含参数，但不能是<code>this</code>.</strong>  <a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#1-3-this-%E4%BF%AE%E9%A5%B0%E7%AC%A6">(点此了解<code>this</code>)</a></p><p>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    Book()&#123; <span class="hljs-comment">// 无参构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象&quot;</span>); <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String initName)</span>&#123; <span class="hljs-comment">// 有参构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象&quot;</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><blockquote><p>注：若一个类没有构造方法，在编译时编译器会自动加入一个无参的空构造方法，也会在对象创建时被调用。但是如果只定义了有参构造方法，在创建对象时调用无参构造方法是不合法的，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String initName)</span>&#123; <span class="hljs-comment">// 有参构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象&quot;</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">// 错误</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;myBookName&quot;</span>); <span class="hljs-comment">// 运行</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>若一个类包括了多个构造函数，这就被称为构造函数重载 (Constructor Overloading)，其在构造函数的三个特性上还有<strong>需要有不同的参数类型</strong>，例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Book()&#123; <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;NoBookName&quot;</span>); <br>&#125;<br>Book(String initName)&#123; <span class="hljs-comment">// 有参构造方法，参数类型为 String</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-number">1</span>); <br>    name = initName;<br>&#125;<br>Book(<span class="hljs-type">int</span> initBookAmount)&#123; <span class="hljs-comment">// 有参构造方法，参数类型为int</span><br>    bookAmount = initBookAmount;<br>    System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象,请修改书名！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">myBookA</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">//调用无参构造方法 Book()</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">myBookB</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;MyBookB&quot;</span>); <span class="hljs-comment">//调用有参构造方法 Book(String initNam)</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">myBookC</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">//调用有参构造方法 Book(int initBookAmount)</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在创建对象时，会根据不同的参数类型调用相对应参数类型的构造函数，实现一一对应。</p></blockquote><hr><h4 id="权限修饰符-Visibility-Modifiers"><a href="#权限修饰符-Visibility-Modifiers" class="headerlink" title="权限修饰符 (Visibility Modifiers)"></a>权限修饰符 (Visibility Modifiers)</h4><p>Java中的权限修饰符主要包括<strong>private</strong>, <strong>protected</strong>和<strong>public</strong>. 这三个权限修饰符决定了类, 类的属性和类的方法的访问范围. </p><blockquote><p><strong>private</strong><br>设置为<strong>private</strong>的属性和方法<strong>只能在本类中使用</strong>, 同包其他类或子类 以及 其他包的类或子类不可使用</p><p><strong>protected</strong><br>设置为<strong>protected</strong>的属性和方法<strong>只能在本类 以及 同包其他类或子类中使用</strong>, 其他包的类或子类不可使用</p><p><strong>public</strong><br>设置为<strong>public</strong>的属性和方法<strong>能在本类, 同包其他类或子类 以及 其他包的类或子类中都可以使用</strong></p></blockquote><p>具体见<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-2-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-Access-Control-Modifiers">Java基础学习1—声明和初始化与修饰符</a></p><hr><h4 id="对象-object"><a href="#对象-object" class="headerlink" title="对象 (object)"></a>对象 (object)</h4><p>对象(object)是某一类的实例, 有具体的属性和方法.</p><h5 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h5><p>Java中通过 <strong>new</strong> 操作符号来创建对象, 语法为: <strong>类名 对象名 = new 类名( );</strong><br>每次创建一个实例, 都会调用一次类的构造方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(); <span class="hljs-comment">// 无参数, 无构造方法参数</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>); <span class="hljs-comment">// 有参数, My Book Name为构造方法的参数, 设置书名</span><br></code></pre></td></tr></table></figure><p>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String initName)</span>&#123; <span class="hljs-comment">// 构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象&quot;</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">// 主方法</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>); <span class="hljs-comment">// 构造一个名为mybook的Book类对象, 并使用构造方法设置name属性</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h5 id="对象属性和行为的访问"><a href="#对象属性和行为的访问" class="headerlink" title="对象属性和行为的访问"></a>对象属性和行为的访问</h5><p>对象属性和行为的访问结构为“对象.属性”或“对象.方法”, 例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">mybook.name; <span class="hljs-comment">// 获取mybook的name属性</span><br>mybook.getName(); <span class="hljs-comment">// 获取mybook的name属性, 并返回name的值</span><br>mybook.setName(<span class="hljs-string">&quot;My Another Book&quot;</span>); <span class="hljs-comment">// 调用mybook的成员方法, 设置name属性为“My Another Book”</span><br></code></pre></td></tr></table></figure></p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-type">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String initName)</span>&#123; <span class="hljs-comment">// 构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">&quot;成功创建一个Book类对象&quot;</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inName)</span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">// 主方法</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">mybook</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;My Book Name&quot;</span>); <span class="hljs-comment">// 构造一个名为mybook的Book类对象, 并使用构造方法设置name属性</span><br>        System.out.println(mybook.name); <span class="hljs-comment">// 通过对象的属性获取属性值</span><br>        System.out.println(mybook.getName()); <span class="hljs-comment">// 通过对象的方法获取属性值</span><br>        <br>        mybook.setName(<span class="hljs-string">&quot;My Another Book&quot;</span>); <span class="hljs-comment">// 通过对象属性重置属性值</span><br>        mybook.page = <span class="hljs-number">100</span>; <span class="hljs-comment">// 通过对象属性重置属性值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用1000多行C++代码写给2021元旦的祝福-C++像素字实现方法</title>
    <link href="/2021/01/02/1kcpphny/"/>
    <url>/2021/01/02/1kcpphny/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0" type="video/mp4">      </video><p>首先祝各位2021新年快乐, 身体健康, 万事如意.<br>我在2021元旦发布了一条我制作的给2021元旦的祝福短片, 用C++输出了一些像素字, 内容是 ”元旦快乐 HAPPY NEW YEAR! 2021“<br>接下来我会简单介绍一下实现的方法, 并且开源我的代码供大家参考.</p><span id="more"></span><hr><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>总的来说, 是通过创建二维字符数组, 并修改其中每个字符的显示内容来构成不同的像素字.</p><p>二维字符数组:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> aone[NYR][NYC];<br></code></pre></td></tr></table></figure></p><h4 id="1-量化字符"><a href="#1-量化字符" class="headerlink" title="1. 量化字符"></a>1. 量化字符</h4><p>首先确定好输出的字符, 其次确定输出背景的大小, 也就是二维字符数组的行数和列数. 需要注意的是, 二维字符数组的每一个字符在输出后的形状是一个长方形, 因此当我们需要一个正方形的背景时, 行数和列数是不一样的. 因此, 我是用的数据是:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NYR 24 <span class="hljs-comment">// ROW 行数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NYC 47 <span class="hljs-comment">// COLUMN 列数</span></span><br></code></pre></td></tr></table></figure><br>接下来, 先输出一个都是下划线(_)的空背景, 并且添加竖线, 划分出每一个像素. 然后写上需要的字, 并且找出被覆盖的格子, 并记下坐标.<br>例如:<br><img src="/2021/01/02/1kcpphny/1.jpeg" alt="量化字符"></p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><p>使用循环遍历二维字符数组, 通过if判断是否遍历到目标行, 然后可以通过循环遍历同一行中连续被覆盖的列, 并修改它们的字符内容.<br>以“元”字的3、4行的10-37列举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>             aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这样就完成列“元”字的一笔, 其余笔画与字同理.</p><h4 id="3-输出速度控制"><a href="#3-输出速度控制" class="headerlink" title="3. 输出速度控制"></a>3. 输出速度控制</h4><p>为了能够达到一行一行输出的效果, 我在每一行输出时添加了一定的延时(delay). 实现的方法也很简单, 也有一点蠢, 就是通过大循环来延时.<br>如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPEED 10000</span><br><span class="hljs-comment">// roll speed control</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span></span>&#123;<br>    <span class="hljs-type">float</span> p, q;<br>    <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; d; p = p + <span class="hljs-number">0.001</span>)&#123;<br>        q = q + <span class="hljs-number">0.01</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// output part</span><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; aone[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h4><p>以上是主要方法, 在具体实现过程中还有很多细节需要注意.<br>总体来说, 实现的方法并不困难, 但是过程比较复杂, 重复性工作较多, 只是一直在不断的循环. 但不管怎样, 输出效果还是比较好的, 也很有趣. 欢迎大家尝试, 交流以及分享你的方法.</p><hr><h3 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h3><p>由于源代码很长, 请点击以下链接下载<br><a href="https://github.com/zhangwengyu999/happy_new_year">https://github.com/zhangwengyu999/happy_new_year</a><br>我也会在文章的最后附上源代码.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文介绍了如何用C++代码来写像素字, 之后会继续更新.<br>最后，再次祝大家新年快乐, 希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center><hr><p>C++源代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 用1000多行C++代码写给2021元旦的祝福</span><br><span class="hljs-comment">// 元旦快乐</span><br><span class="hljs-comment">// Happy New Year 2021</span><br><span class="hljs-comment">// Made by Mike_Zhang</span><br><span class="hljs-comment">// http://ultrafish.cn</span><br><span class="hljs-comment">// 2021.1.1</span><br><span class="hljs-comment">// 仅供学习交流使用</span><br><span class="hljs-comment">// *********************</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NYR 24</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NYC 47</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPEED 10000</span><br><br><span class="hljs-comment">// roll speed control</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span></span>&#123;<br>    <span class="hljs-type">float</span> p, q;<br>    <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; d; p = p + <span class="hljs-number">0.001</span>)&#123;<br>        q = q + <span class="hljs-number">0.01</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//yuan</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">yuan</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> aone[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            aone[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span> || i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span> || i == <span class="hljs-number">12</span> || i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            aone[i][<span class="hljs-number">39</span>] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">14</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            aone[i][<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            aone[i][<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; aone[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// dan</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dan</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> atwo[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            atwo[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">8</span> || i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span> || i == <span class="hljs-number">5</span> || i == <span class="hljs-number">6</span> || i == <span class="hljs-number">7</span> || i == <span class="hljs-number">9</span> || i == <span class="hljs-number">10</span> || i == <span class="hljs-number">11</span> || i == <span class="hljs-number">12</span> || i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span> || i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; atwo[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// kuai</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kuai</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> athree[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            athree[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span> || i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">20</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">20</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">4</span>; m&lt;=<span class="hljs-number">6</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">26</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">33</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">42</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; athree[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// le</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">le</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> afour[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            afour[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span> || i == <span class="hljs-number">8</span> || i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">31</span>; m&lt;=<span class="hljs-number">33</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">23</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; afour[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// HAPPY NEW YEAR</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">happynewyear</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> afive[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            afive[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">// HAPPY</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">45</span>; m&lt;=<span class="hljs-number">46</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">13</span>; m&lt;=<span class="hljs-number">14</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">41</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">42</span>; m&lt;=<span class="hljs-number">43</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">42</span>; m&lt;=<span class="hljs-number">43</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//NEW</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">20</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">31</span>; m&lt;=<span class="hljs-number">32</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">20</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//YEAR</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">6</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">26</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; afive[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 2021</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">year</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> asix[NYR][NYC];<br>    <span class="hljs-type">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            asix[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span> || i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span> || i == <span class="hljs-number">7</span> || i == <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">2</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">46</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;(NYR - <span class="hljs-number">10</span>);i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            cout &lt;&lt; asix[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>        <span class="hljs-built_in">deLay</span>(SPEED);<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// main functions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">yuan</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">yuan</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dan</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">dan</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kuai</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">kuai</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">le</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">le</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">happynewyear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">happynewyear</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">year</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-built_in">year</span>();<br>    cout&lt;&lt; <span class="hljs-string">&quot;元旦快乐&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Happy New Year 2021&quot;</span>&lt;&lt; endl &lt;&lt;<span class="hljs-string">&quot;Made by Mike_Zhang&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;http://ultrafish.cn&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;2021.1.1&quot;</span> &lt;&lt; endl &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// ********************</span><br><span class="hljs-comment">// 用1000多行C++代码写给2021元旦的祝福</span><br><span class="hljs-comment">// 元旦快乐</span><br><span class="hljs-comment">// Happy New Year 2021</span><br><span class="hljs-comment">// Made by Mike_Zhang</span><br><span class="hljs-comment">// http://ultrafish.cn</span><br><span class="hljs-comment">// 2021.1.1</span><br><span class="hljs-comment">// 仅供学习交流使用</span><br></code></pre></td></tr></table></figure></p><hr>]]></content>
    
    
    <categories>
      
      <category>Application</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Floating point numbers representation</title>
    <link href="/2020/12/20/floating%20point%20numbers%20representation/"/>
    <url>/2020/12/20/floating%20point%20numbers%20representation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System article:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">Signed binary numbers representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64 Learning 1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64 Learning 2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64 Learning 1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64 Learning 2-Control</a></p></blockquote><hr><p>I have talked about the <a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/"><strong>Signed binary number representation</strong></a> in a previous article. Then I am going to record the <strong>Floating point numbers (FPN) representation</strong>, including <strong>Floating point numbers normalization, hidden bit, FPN representation in the computer, and IEEE 754 Standard</strong>.</p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h3 id="Floating-point-numbers-normalization"><a href="#Floating-point-numbers-normalization" class="headerlink" title="Floating point numbers normalization"></a>Floating point numbers normalization</h3><p>Usually, a floating point number can be represented by 3 parts: <strong>Sign, Exponent, and Fraction (aka Significand or Mantissa)</strong>.<br>Example:</p><blockquote><p>+1.23 * 10^45</p><p><strong>“+” is the Sign</strong><br> <strong>45 is the Exponent</strong><br><strong>1.23 is the Fracrion</strong><br>10 is the Base</p></blockquote><p>For a given number, the location of radix point is fixed. It is located immediately to the <strong>left OR right</strong> of the <strong>leftmost AND nonzero</strong> digit in the fraction.<br>Example:</p><blockquote><p><strong>+1.23 <em> 10^45 OR +0.123 </em> 10^46</strong></p></blockquote><p>FPN can be normalized in any base.</p><hr><h3 id="Hidden-bit"><a href="#Hidden-bit" class="headerlink" title="Hidden bit"></a>Hidden bit</h3><p>Hidden bit is aopptional choise for FPN normalization.<br>When the fraction is in binary, there will always be a leftmost “1” in the normalized fraction, because the point is always located immediately to the <strong>left OR right</strong> of the <strong>leftmost AND nonzero</strong> digit in the fraction.<br>Example:</p><blockquote><p>111.01 <em> 2^3 = <strong>1</strong>.1101 </em> 2^5 = 0.<strong>1</strong>1101 * 2^6</p></blockquote><p>So the computer does not have to store this “1”, which is <strong>hidden bit</strong> or <strong>hidden 1</strong>.<br>If the Hidden bit is used in the FPN normalization, for 1.1101, the computer only needs to store 1101 for the normalized fraction.</p><hr><h3 id="FPN-representation-in-the-computer"><a href="#FPN-representation-in-the-computer" class="headerlink" title="FPN representation in the computer"></a>FPN representation in the computer</h3><p>In a computer, the FPN representation is specified in:</p><blockquote><ol><li>The base of the original number;</li><li>The location of radix point in normalization: left OR right of the leftmost AND nonzero digit in the fraction;</li><li>The number of bits of exponent and fraction storage;</li><li>the representation of exponent, e.g. Excess, One’s Complement.</li></ol></blockquote><p>Example:</p><blockquote><p>A computer requires the order that:</p><ol><li>Sign bit;</li><li>3-bit Excess 4 exponent;</li><li>Base 16, 3-bit hexadecimal fraction;</li></ol><p>and</p><ol><li>The point is located immediately to the <strong>left</strong> of the leftmost and nonzero digit in the fraction.</li></ol><p>For example, the number is +120.0 (base 10).<br>step1. Convert +120.0 to base 16, 120.0(base 10) = 78.0(base 16);<br>step2. Normalization: 78.0 = 0.780 * 16^2;<br>step3. Sign bit: “+” -&gt; 0;<br>step4. Convert fraction into base2: 780 (base 16) = 0111 1000 0000 (base 2);<br>step5. Exponent in Excess 4: 2 + 4 = 6 (base 10) = 110 (base 2);<br>step6. Combine them together: 0 110 0111 1000 0000 (Sign bit | Exponent | Fraction).</p></blockquote><hr><h3 id="IEEE-754-Standard"><a href="#IEEE-754-Standard" class="headerlink" title="IEEE 754 Standard"></a>IEEE 754 Standard</h3><p>IEEE stands for Institute of Electrical and Electronics Engineers. IEEE 754 is a standard for Floating point numbers representation.<br>IEEE 754 has two formats: <strong>single</strong> precision and <strong>double</strong> precision. Single precision has 32 bits, and double precision has 64 bits.<br>IEEE 754 single precision standard:</p><blockquote><ol><li>In <strong>base 2</strong>;</li><li>Using <strong>Hidden bit</strong>;</li><li>Sign bit: 0 for positive, 1 for negative (1 bit);</li><li>Using 8-bit <strong>Excess 127</strong> exponent (8 bits);</li><li>The point is located immediately to the <strong>right</strong> of the leftmost and nonzero digit in the fraction (23 bits with 1 bit hidden);</li></ol></blockquote><p>Example:</p><blockquote><p>The number is +120.0 (base 10);</p><ol><li>convert to base 2: 1111000;</li><li>Normalization: +1.111 * 2^6;</li><li>Sign bit: 0;</li><li>Exponent: 6 + 127 = 133(base 10) = 1000 0101 (base 2);</li><li>Fraction: 111 0000 0000 0000 0000 0000 (with hidden 1);</li><li>Combination: 0 1000 0101 111 0000 0000 0000 0000 0000 (Sign bit | Exponent | Fraction).</li></ol></blockquote><p><em>Useful IEEE 754 website:<br><a href="http://weitz.de/ieee/">http://weitz.de/ieee/</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - Floating point numbers convertor (IEEE 754 single precision)</a></em></p><p>Special IEEE 754 bit patterns</p><blockquote><p>+0: 0  0000 0000  000 0000 0000 0000 0000 0000;<br>-0: 1  0000 0000  000 0000 0000 0000 0000 0000;<br>+(-)INFINITY: 0(1)  1111 1111  000 0000 0000 0000 0000 0000;<br>+(-)NaN (Not a Number): 0(1)  1111 1111  001 0000 0110 0001 0010 0000 (The fraction is nonzero);<br>+2^(-128): 0  1111 1111  010 0000 0000 0000 0000 0000;</p></blockquote><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://weitz.de/ieee/">IEEE 754 Calculator: http://weitz.de/ieee/</a></p><hr><h3 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h3><p>I have recorded Floating point numbers normalization, hidden bit, FPN representation in the computer, and IEEE 754 Standard in this article.<br>Please feel free to leave your comments, if you have any questions or find any mistakes. Thanks for reading. </p><hr><p><strong><em>Original article, please indicate the source when sharing</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Thanks for your support(WeChat QR Code)</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>Data Representation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Data Representation</tag>
      
      <tag>Floating Point Numbers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的指针pointer2</title>
    <link href="/2020/12/06/cpp-pointer2/"/>
    <url>/2020/12/06/cpp-pointer2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有相关文章:<br><a href="http://ultrafish.cn/2020/10/25/cpp-pointer/">C++中的指针pointer - 指针的声明, 取地址运算符号, 指针的赋值, 指针运算符</a><br><a href="http://ultrafish.cn/2020/12/06/cpp-pointer2/">C++中的指针pointer2 - 指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量</a></p></blockquote><p>在<a href="http://ultrafish.cn/2020/10/25/C++中的指针pointer/">之前的文章</a>中我已经介绍了C++中指针的基本内容, 包括声明, 取地址运算符号, 赋值和运算符. 接下来我会介绍<strong>指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量.</strong></p><span id="more"></span><h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><p>指针运算就是对指针地址进行运算. 指针经过运算后, 其内存指向(地址)可能会发生变化, 其指向内存的内容(原值)也可能会发生变化. 以下举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> * p = &amp;a; <span class="hljs-comment">//定义指针并赋值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p++; <span class="hljs-comment">//指针自加运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p++; <span class="hljs-comment">//指针自加运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p--; <span class="hljs-comment">//指针自减运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">-446765300</span>, <span class="hljs-number">10</span><br><span class="hljs-number">-446765296</span>, <span class="hljs-number">-446765280</span><br><span class="hljs-number">-446765292</span>, <span class="hljs-number">32766</span><br><span class="hljs-number">-446765296</span>, <span class="hljs-number">-446765280</span><br></code></pre></td></tr></table></figure><br>由此发现, 指针运算后会使指针地址变化, 相对应的指向内存的内容也会发生变化, 但是内存内容的变化规律是和地址变化规律没有直接联系的. 另外, 指针进行加1运算后, 其地址的值并不是简单的加一, 而是而是加上一个变量对应类型的字节宽度, int对应的宽度就是sizeof(int), 也就是4. long类型宽度就是sizeof(long), 也就是8. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">long</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">long</span> * p = &amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>    p--;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, p, *p);<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">-369174776</span>, <span class="hljs-number">10</span><br><span class="hljs-number">-369174768</span>, <span class="hljs-number">-369174752</span><br><span class="hljs-number">-369174760</span>, <span class="hljs-number">540288561</span><br><span class="hljs-number">-369174768</span>, <span class="hljs-number">-369174752</span><br></code></pre></td></tr></table></figure></p><hr><h3 id="指向空的指针与空类型指针"><a href="#指向空的指针与空类型指针" class="headerlink" title="指向空的指针与空类型指针"></a>指向空的指针与空类型指针</h3><h4 id="指向空的指针"><a href="#指向空的指针" class="headerlink" title="指向空的指针"></a>指向空的指针</h4><p>指向空的指针表示为:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span>* p;<br></code></pre></td></tr></table></figure><br>指向空的指针是有指向的, 即指向空类型void, 但是在后期使用时可以给其赋值不同类型的数据. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> * p = &amp;a;<br>    <span class="hljs-type">void</span>* p1 = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//定义指向空的指针 </span><br>    p1 = p; <span class="hljs-comment">//给指向空的指针重新赋值指向</span><br>    cout &lt;&lt; p1 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="空类型指针"><a href="#空类型指针" class="headerlink" title="空类型指针"></a>空类型指针</h4><p>空类型的指针是指未初始化的指针, 不能直接使用, 需要赋值后才能使用, 在编写代码时需要注意. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span>* p2 = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//定义空类型指针, 未初始化, 不能直接使用</span><br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>; <br>    p2 = &amp;b; <span class="hljs-comment">//初始化p2</span><br>    cout &lt;&lt; p2 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><h3 id="指向常量的指针与指针常量"><a href="#指向常量的指针与指针常量" class="headerlink" title="指向常量的指针与指针常量"></a>指向常量的指针与指针常量</h3><h4 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h4><p>指向常量的指针(pointer-to-const)说明<strong>指针内存指向的内容</strong>是一个常量, 使用const关键字表示, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> *p = &amp;a;<br></code></pre></td></tr></table></figure><br>其中指针内存指向的内容(<em>p)是一个常量, 其无法修改内存数据, 也就是a, 做到了“只读”.<br>但是我们可以修改p, 也就是内存指向(地址). 举例如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> *p = &amp;a;<br>p = &amp;b; <span class="hljs-comment">//允许</span><br>*p = <span class="hljs-number">20</span>; <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><br>总的来说, 使用指向常量的指针(pointer-to-const)可以防止我们改变指针指向的内容(</em>p), 做到“只读”, 但是不能防止我们改变指针的内存指向(地址p). 指向常量的指针也称常量指针.</p><h4 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h4><p>指针常量(const pointer)说明这个<strong>指针本身</strong>是一个常量, 使用const关键字表示, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p = &amp;a;<br></code></pre></td></tr></table></figure><br>其中指针p是常量, 其无法修改, 也就是说我们无法修改它的内存指向, 也就是地址.<br>但是我们可以修改<em>p, 也就是说我们可以修改指针指向内存的内容. 举例如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p = &amp;a;<br>p = &amp;b; <span class="hljs-comment">//报错</span><br>*p = <span class="hljs-number">20</span>; <span class="hljs-comment">//允许</span><br></code></pre></td></tr></table></figure><br>总的来说, 使用指针常量(const pointer)可以防止我们改变指针的内存指向(地址p), 但不可以防止我们改变指向内存的内容(</em>p).</p><p>两者可以用一张图总结:<br><img src="/2020/12/06/cpp-pointer2/1.jpg" alt="Pointers-to-const and const pointers"><br><em>图源: Prata S - C++ Primer Plus 6th Edition - 2011</em></p><h4 id="指向常量的指针常量"><a href="#指向常量的指针常量" class="headerlink" title="指向常量的指针常量"></a>指向常量的指针常量</h4><p>指向常量的指针常量, 它的指针指向(地址p)以及它内存指向的内容(*p)都是常量, 都不能改变, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> * <span class="hljs-type">const</span> p = &amp;a;<br></code></pre></td></tr></table></figure></p><hr><p>引用:<br>Prata S - C++ Primer Plus 6th Edition - 2011</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文介绍了指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量, 之后会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>C++</category>
      
      <category>Pointer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的指针pointer</title>
    <link href="/2020/10/25/cpp-pointer/"/>
    <url>/2020/10/25/cpp-pointer/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有相关文章:<br><a href="http://ultrafish.cn/2020/10/25/cpp-pointer/">C++中的指针pointer - 指针的声明, 取地址运算符号, 指针的赋值, 指针运算符</a><br><a href="http://ultrafish.cn/2020/12/06/cpp-pointer2/">C++中的指针pointer2 - 指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量</a></p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><p>先看一段代码, 这段代码引入了一个整数型变量a,并把它赋值为2, 最后输出. 看上去十分简单, 但仔细思考一下, 程序是怎么知道变量a中到底存了什么数据呢, 或者说怎么去得到变量a中的数据呢? 其实程序通过变量名所对应的内存单元来对数据进行读取. 简单来说, 你的一位朋友想找你, 他不是直接找到你, 而是通过你所在的地址来找到你. 类似的, 程序也是通过变量相对应的内存地址来进行操作, 这时就需要引入一种新的数据类型—<strong>指针(pointer)</strong>.<br>在C/C++中, <strong>指针(pointer)</strong> 是一种特殊的数据类型, 它存储的是数值的内存地址, 指针也称指针变量.</p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h3 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h3><p>指针的声明和一般的变量声明方式类似<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">数据类型 * 指针变量名<br><span class="hljs-comment">//如:</span><br><span class="hljs-type">int</span> * aPointer;<br><span class="hljs-type">float</span> * bPointer;<br></code></pre></td></tr></table></figure></p><hr><h3 id="取地址运算符号"><a href="#取地址运算符号" class="headerlink" title="取地址运算符号"></a>取地址运算符号</h3><p>指针所储存的地址是通过取地址运算符号(address operator) <strong>&amp;</strong> 来获取的. 如果 <em>home</em> 是一个变量, 那&amp;<em>home</em> 就是家的地址,例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> * aPointer;<br>aPointer = &amp;a;<br></code></pre></td></tr></table></figure><br>这样变量<em>a</em>的内存地址就被读取出来并且存在指针<em>aPointer</em>中了</p><hr><h3 id="指针的赋值"><a href="#指针的赋值" class="headerlink" title="指针的赋值"></a>指针的赋值</h3><p>有两种赋值方法<br>1.在声明时赋值:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> * aPointer = &amp;a; <span class="hljs-comment">//声明并赋值</span><br></code></pre></td></tr></table></figure><br>2.在后期赋值:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> * aPointer; <span class="hljs-comment">//声明</span><br>aPointer = &amp;a; <span class="hljs-comment">//赋值</span><br></code></pre></td></tr></table></figure></p><blockquote><p>注意:<br>在以上例子中, 指针变量名是<strong>aPointer</strong>, 不是 *aPointer,<br><strong><em>aPointer = &amp;a</em></strong> 指的是把整数型变量a的内存地址赋值给指针变量 <strong>aPointer</strong>, 若写成 *aPointer = &amp;a, 则程序会报错.</p></blockquote><hr><h3 id="指针运算符"><a href="#指针运算符" class="headerlink" title="指针运算符"></a>指针运算符</h3><p>指针运算符和取地址运算符的作用完全相反, <strong>指针运算符(indirect value/dereferencing operator)</strong> 可以通过地址取得对应的值. 举例来说, 假设host是一个指针, 那<em>host</em>代表的是地址, <em>*host</em>代表的是那个地址所对应的值. 例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> * aPointer = &amp;a;<br>    cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//输出整数型变量a的值</span><br>    cout &lt;&lt; *aPointer &lt;&lt; endl; <span class="hljs-comment">//输出整数型变量a所对应的指针所对应的值, 即为a</span><br>&#125;<br></code></pre></td></tr></table></figure><br>上面例子所输出的两个结果是一样的, 都为2.</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> * aPointer = &amp;a;<br>    cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//输出整数型变量a的值</span><br>    cout &lt;&lt; *aPointer &lt;&lt; endl; <span class="hljs-comment">//输出整数型变量a所对应的指针所对应的值, 即为a</span><br>    *aPointer = *aPointer + <span class="hljs-number">1</span>; <span class="hljs-comment">//使用指针改变原变量的值</span><br>    cout &lt;&lt; a &lt;&lt; endl; <br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中, 变量a和指针aPointer相当于一枚硬币的两面.<br>通过取地址运算符&amp;得到变量a的地址, 通过指针运算符 *得到地址所对应的值.<br>所以说a和 *aPointer是完全一样的, aPointer对应的值为&amp;a. 还可以通过修改 *aPointer来修改a的值.<br><img src="/2020/10/25/cpp-pointer/1.jpg" alt="Two sides of a coin"><br><em>图源: Prata S - C++ Primer Plus 6th Edition - 2011</em></p><hr><p>引用:<br>Prata S - C++ Primer Plus 6th Edition - 2011</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文只讲了指针变量的简单内容, 之后会继续展开指针运算、指向空的指针和空类型指针、指向常量的指针和指针常量、指针与数组等内容, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>C++</category>
      
      <category>Pointer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog2.0-部署到阿里云服务器以及更新域名</title>
    <link href="/2020/10/15/blog2/"/>
    <url>/2020/10/15/blog2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>我在<a href="http://ultrafish.cn/2020/07/29/hello-ultrafisher/">第一篇文章 “Hello UltraFisher” </a>中提到过, 我当时的博客<a href="https://ultrafisher.github.io">UltraFisher</a>是用Hexo框架并且部署在GitHub上的, 但是GitHub的访问速度并不高, 导致上传时间和等待网页加载时间太长, 既不利于我更新文章, 也不方便浏览者浏览网页, 体验效果并不好. 直到我blog2.0的到来…<br><span id="more"></span><br>我的个人博客名称已由 <strong>UltraFisher</strong> 改为 <strong>UltraFish</strong>, 相应的域名已由 <a href="https://ultrafisher.github.io">ultrafisher.github.io</a> 改为 <a href="http://ultrafish.cn">ultrafish.cn</a> .后续所有的更新将会在ultrafish.cn进行, 旧网站将<strong>停止更新</strong>, 但它不会消失. 十分感谢您的浏览以及支持, 让我们在UltraFish再次启程!<br><img src="/2020/10/15/blog2/1.jpg" alt></p><hr><p>接下来我来简单说一下更新的过程, 主要是把博客从原来部署在GitHub变成现在部署在了<a href="https://cn.aliyun.com/">阿里云</a>上, 并且有了新的域名.</p><h3 id="2020-10-01"><a href="#2020-10-01" class="headerlink" title="2020-10-01"></a>2020-10-01</h3><p>国庆第一天, 我在阿里云上购买了<strong>云服务器 ECS（Elastic Compute Service）</strong> 以及一个新的<strong>域名</strong>, 并且提交了开始了各种认证和审核. 购买完成之后, 我就有了自己的服务器和域名, 最后完成了十分繁琐的部署工作.</p><hr><p><img src="/2020/10/15/blog2/2.jpg" alt="云服务器 ECS"></p><hr><p><img src="/2020/10/15/blog2/3.jpg" alt="域名"></p><hr><p><img src="/2020/10/15/blog2/4.jpg" alt="价格"></p><hr><p><img src="/2020/10/15/blog2/5.jpg" alt="价格"></p><p>其实这时我已经可以通过公网IP地址进入我的博客页面了, 但是因为认证和审核还未通过, 不能通过域名来访问.</p><h3 id="2020-10-09"><a href="#2020-10-09" class="headerlink" title="2020-10-09"></a>2020-10-09</h3><p>我收到了域名实名认证通过的消息, 之后我就把我的域名解析到了我的服务器IP地址, 这样就算建立了联系. 随后就是开始对网站的ICP备案.</p><hr><p><img src="/2020/10/15/blog2/6.jpg" alt="认证"></p><h3 id="2020-10-14"><a href="#2020-10-14" class="headerlink" title="2020-10-14"></a>2020-10-14</h3><p>我收到了工信部的邮件, 表示我的网站ICP备案通过了审核, 并得到了备案/许可编号(标注在网页的底部)</p><p><img src="/2020/10/15/blog2/8.jpg" alt="邮件"></p><hr><h3 id="2020-10-15"><a href="#2020-10-15" class="headerlink" title="2020-10-15"></a>2020-10-15</h3><p>也就是今天, 阿里云完成了最后的同步,这就表示可以正常的通过域名访问我的博客网站了, 但是还要在全国互联网安全管理平台进行备案, 但这并不影响正常访问, 等备案结束后网站就算真正的更新完成了.</p><p><img src="/2020/10/15/blog2/7.jpg" alt="备案"></p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这次更新并不容易, 但是最后的结果还是符合预期的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>yilia Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>部署</tag>
      
      <tag>阿里云</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有符号二进制数表示方法Signed binary number representation</title>
    <link href="/2020/09/19/Signed-binary-number-representation/"/>
    <url>/2020/09/19/Signed-binary-number-representation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Computer System 相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a><br><a href="https://plus.ultrafish.cn/IEEE-754-Single-Representation">UltraFish Plus - 浮点数表示方法转换器 Floating Point Numbers Representation Convertor</a><br><a href="https://plus.ultrafish.cn/Base-convertor">UltraFish Plus - 多进制整数转换器 Multiple Bases Unsigned Integer Convertor</a><br><a href="https://ultrafish.cn/2022/01/04/Y86-64-learning-1/">Y86-64学习1-State &amp; Instruction &amp; Basic Encoding</a><br><a href="https://ultrafish.cn/2022/01/08/Y86-64-learning-2/">Y86-64学习2-Y86-64 SEQ Stages</a><br><a href="https://ultrafish.cn/2022/02/06/x86-64-learning-1/">x86-64学习1-Introduction &amp; Data Formats &amp; Information Accessing &amp; Arithmetic Logical Operation</a><br><a href="https://ultrafish.cn/2022/02/24/x86-64-learning-2/">x86-64学习2-Control</a></p></blockquote><hr><p>(2020-09-24更新: 新增Excess)<br>(2020-09-24更新: 新增转换代码)</p><p>我在之前的文章 <a href="http://ultrafish.cn/2020/08/15/Java学习重难点记录/"><em>byte数据类型在显式类型转换时超出其取值范围的转换过程</em></a>中提到里了计算机中原码，反码，补码等概念, 但是并没有仔细展开. 最近在学校的课程内容中又碰到了, 所以接下来具体来说一下.<br>数据在计算机中都是以二进制(binary)0和1的形式储存的, 但是在表示负数的时候, 并不能直接把“-”加在数字前面, 必须要用一些特定的方法来表示.<br>一般来说,有以下4种常用的<strong>表示负数</strong>的方法:</p><blockquote><p>Signed Magnitude (原码);<br>One’s Complement (1的补码)(中文又称反码);<br>Two’s Complement (2的补码)(中文又称补码);<br>Excess (Biased)</p></blockquote><p><strong><em>(以下均以 8-bit 为例 )</em></strong></p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h3 id="Signed-Magnitude"><a href="#Signed-Magnitude" class="headerlink" title="Signed Magnitude"></a>Signed Magnitude</h3><p>Signed Magnitude又称原码, 是用二进制数最高位(MSB)来表示符号, <strong>0表示正号“+”, 1表示负号“-”, 剩下的位表示数值的绝对值</strong><br>例如: (等号前为十进制数, 后为二进制数)</p><blockquote><p>+20 = <strong>0</strong>0010100<br>-20 = <strong>1</strong>0010100</p></blockquote><p>有意思的一点是, +0 = 00000000, -0 = 10000000.<br>对于8-bit来说, 用Signed Magnitude来表示, 其取值范围是-127 ~ +127.<br>如下表:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center"><em>Signed Magnitude</em></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td></tr></tbody></table></div><p>以下是Python代码实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">signedMagnitude</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#储存输出结果</span><br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd)) <span class="hljs-comment">#取得绝对值</span><br>    numb = <span class="hljs-built_in">bin</span>(absnumd) <span class="hljs-comment">#把绝对值转成二进制</span><br>    bnumb = numb[<span class="hljs-number">2</span>:] <span class="hljs-comment">#去除二进制数前两位0b</span><br>    fixed = <span class="hljs-string">&#x27;&#123;:0&gt;7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb) <span class="hljs-comment">#用0填充空位至7位</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>: <span class="hljs-comment">#判断是否为负数</span><br>        outnum = <span class="hljs-string">&quot;1&quot;</span> + fixed <span class="hljs-comment">#若是则在最高位加上1</span><br>    <span class="hljs-keyword">else</span>:<br>        outnum = <span class="hljs-string">&quot;0&quot;</span> + fixed <span class="hljs-comment">#若不是则在最高位加上0</span><br>    <span class="hljs-built_in">print</span>(outnum) <span class="hljs-comment">#输出</span><br>signedMagnitude(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to127):&quot;</span>)))<br></code></pre></td></tr></table></figure><br>上面提到, 对于8-bit来说, 用Signed Magnitude来表示, 其取值范围是-127 ~ +127, 说明只能表示255个数, 但是8-bit应该是可以总共表示256个数的, 说明有一个数被浪费了.(0被表示了两次,+0和-0)</p><hr><h3 id="One’s-Complement-反码"><a href="#One’s-Complement-反码" class="headerlink" title="One’s Complement (反码)"></a>One’s Complement (反码)</h3><p>One’s Complement (1的补码), 中文又称反码。对于 n-bit 的表示法, 数$x$的one’s complement(反码)即为:</p><script type="math/tex; mode=display">x=\begin{cases}    x, & x\gt0\\    2^n-1-|x|, & x\le0\end{cases}</script><p>随后把$x$转化成相应的二进制数。</p><p>举例来说:</p><blockquote><p>for $x= -60$<br>$|x|=20$ = 00111100<br>one’s complement of x = 2^8 - 1 -$|x|_2$ = 100000000 - 1 - 00111100 = 11000011</p></blockquote><p>可以发现, 00111100的one’s complement(反码)即为11000011, <strong>简单来说就是把原来的1变成0, 0变成1</strong>, 这也是为说明把one’s complement叫做<strong>反码</strong>.</p><p>再举一个例子:</p><blockquote><p>+20 = 00010100<br>-20 = 11101011</p></blockquote><p>有意思的一点是, +0 = 00000000, -0 = 11111111<br>对于8-bit来说, 用one’s complement(反码)来表示, 其取值范围是-127 ~ +127.<br>如下表:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center"><em>One’s Complement (反码 )</em></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center"><strong>127</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center"><strong>-126</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>-0</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">onesComplement</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd)) <span class="hljs-comment">#2^n - 1 - x</span><br>    <span class="hljs-built_in">print</span>(numd)<br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    numb = <span class="hljs-built_in">bin</span>(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br>onesComplement(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to127):&quot;</span>))<br></code></pre></td></tr></table></figure><br>和Signed Magnitude一样, 用one’s complement(反码)表示也会浪费一个数.(0被表示了两次,+0和-0)</p><hr><h3 id="Two’s-Complement-2的补码-中文又称补码"><a href="#Two’s-Complement-2的补码-中文又称补码" class="headerlink" title="Two’s Complement (2的补码)(中文又称补码)"></a>Two’s Complement (2的补码)(中文又称补码)</h3><p>Two’s Complement (2的补码), 中文又称补码. 对于n-bit表示法, 数$x$的two’s complement(补码)即为:</p><script type="math/tex; mode=display">x=\begin{cases}    x, & x\gt0\\    2^n-|x|, & x\le0\end{cases}</script><p>随后把$x$转化成相应的二进制数。</p><p><strong>其实就是在反码上+1</strong>, 即, <strong>two’s complement(补码) = one’s complement(反码) + 1</strong>. 这样就可以解决one’s complement(反码)出现-0的情况, 使-128 ~ -1都能被表示, 不产生浪费.<br>举一个例子:</p><blockquote><p>$x=-20$<br>$|x|=20=$ 00010100<br>one’s complement(反码) = 11101011<br>two’s complement(补码) = 11101011 + 1 = 11101100<br>-20 = 11101100</p><p>对于8-bit来说, 用two’s complement(补码)来表示, 其取值范围是-128 ~ +127.</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center"><strong><em>Two’s Complement(补码 )</em></strong></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center"><strong>127</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>-128</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center"><strong>-1</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">twosComplement</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd)) <span class="hljs-comment">#2^n  - x</span><br>    <span class="hljs-built_in">print</span>(numd)<br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    numb = <span class="hljs-built_in">bin</span>(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br>twosComplement(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-128to127):&quot;</span>))<br></code></pre></td></tr></table></figure><br><strong>如何快速获得补码:</strong><br>以-12为例</p><blockquote><ol><li>写出其绝对值的二进制数: 00001100</li><li>从右向左开始, 找到第一个1(00001 <strong><em>1</em></strong> 00), 反转其左边所有位(11110 <strong><em>1</em></strong> 00)并保持其右边位不变</li></ol></blockquote><p>因此:</p><blockquote><p>+12 = 00001100<br>-12 = 11110100</p></blockquote><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>原码、反码、补码是用作负数的二进制表示, 对于正数的表示没有影响, 从下面的表格就可以看出这一点:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center">Two’s Complement(补码)</th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center">127</td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center">-128</td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center">-127</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center">-1</td></tr></tbody></table></div><p>但是接下来的Excess方法对被转换的所有整数都有影响.</p><hr><h3 id="Excess-Biased"><a href="#Excess-Biased" class="headerlink" title="Excess (Biased)"></a>Excess (Biased)</h3><p>excess与上面所说的三种方法有很大的不同, 最明显的不同就是, 在excess方法中, <strong>最高位的1代表正数, 0代表负数</strong>, 以下是excess的转换方法:</p><blockquote><ol><li>在原来的数字上加上一个常量(bias);</li><li>再把得出来的数转成二进制.</li></ol></blockquote><p>举例:</p><blockquote><p><strong>Excess 128</strong> 表示加的数是128;<br>+12 -&gt; +12 + <strong>128</strong> = 140 = 10001100<br>-12 -&gt; -12 + <strong>128</strong> = 116 = 01110100<br>0 -&gt; 0 + <strong>128</strong> = 128 = 10000000<br>…<br>对于8-bit来说, 用Excess128来表示, 其取值范围是-128 ~ +127.</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center">Two’s Complement(补码)</th><th style="text-align:center"><strong><em>Excess 128</em></strong></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><strong>-128</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center"><strong>-126</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center"><strong>-1</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center">-128</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center">-1</td><td style="text-align:center"><strong>127</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">excessEightbits</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    biasednum = <span class="hljs-built_in">int</span>(numd) + <span class="hljs-number">128</span><br>    numb = <span class="hljs-built_in">bin</span>(biasednum)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br>excessEightbits(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-128to127):&quot;</span>))<br></code></pre></td></tr></table></figure></p><p>从上面这个表可以看出, 用excess的方法能够让二进制数和十进制数保持一样的大小顺序, 这样能够在之后计算时保持和值和差的的统一,方便计算.<br>总的来说, excess方法是让负号“消失”, 通过给每个数加上一个数, 让某一范围内的数整体向正数方向移动, 直到没有负数. 而移动的长度就是加的数的大小.<br>对于一个<strong>N-bit</strong>的数, 一共可以表示<strong>2^N</strong>个数, 其中有 <strong>2^(N-1)</strong> 个负数, <strong>2^(N-1)</strong> 个正数(包括0), 能够表示的范围就是 <strong>-2^(N-1) ~ 2^(N-1)-1</strong>.</p><hr><h3 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h3><p>以下Python代码实现用四种方法使整数在二进制数和十进制数之间转换</p><p><a href="https://github.com/zhangwengyu999/Signed_Binary_Number_Conversion">代码下载链接</a></p><p>也欢迎到我的开发性页面使用<a href="https://plus.ultrafish.cn/Signed-Binary-Number-Convertor">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Made by Mike_Zhang</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">signedMagnitude</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    numb = <span class="hljs-built_in">bin</span>(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    fixed = <span class="hljs-string">&#x27;&#123;:0&gt;7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>        outnum = <span class="hljs-string">&quot;1&quot;</span> + fixed<br>    <span class="hljs-keyword">else</span>:<br>        outnum = <span class="hljs-string">&quot;0&quot;</span> + fixed<br>    <span class="hljs-built_in">print</span>(outnum)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onesComplement</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    <span class="hljs-built_in">print</span>(numd)<br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    numb = <span class="hljs-built_in">bin</span>(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">twosComplement</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    <span class="hljs-built_in">print</span>(numd)<br>    absnumd = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(numd))<br>    numb = <span class="hljs-built_in">bin</span>(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">excessEightbits</span>(<span class="hljs-params">numd</span>):<br>    outnum = <span class="hljs-string">&quot;&quot;</span><br>    biasednum = <span class="hljs-built_in">int</span>(numd) + <span class="hljs-number">128</span><br>    numb = <span class="hljs-built_in">bin</span>(biasednum)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bnumb)<br>    <span class="hljs-built_in">print</span>(outnum)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">signedMagnitude_re</span>(<span class="hljs-params">numb</span>):<br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;0&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(numb[<span class="hljs-number">1</span>:]), <span class="hljs-number">2</span>),sep=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onesComplement_re</span>(<span class="hljs-params">numb</span>):<br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;0&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(numb), <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> , numd, sep=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">twosComplement_re</span>(<span class="hljs-params">numb</span>):<br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;0&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>        numd = <span class="hljs-number">256</span>  - <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(numb), <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> , numd, sep=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">excessEightbits_re</span>(<span class="hljs-params">numb</span>):<br>    numd = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(numb), <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(numd - <span class="hljs-number">128</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    choice1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(d = D to B; b = B to D):&quot;</span>)<br>    choice2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(s = Signed Magnitude; 1 = 1s Complement; 2 = 2sComplement; e = excess):&quot;</span>)<br>    <span class="hljs-keyword">if</span> choice1 == <span class="hljs-string">&quot;d&quot;</span>:<br>        <span class="hljs-keyword">if</span> choice2 == <span class="hljs-string">&quot;s&quot;</span>:<br>            signedMagnitude(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to127):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;1&quot;</span>:<br>            onesComplement(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to127):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;2&quot;</span>:<br>            twosComplement(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to128):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;e&quot;</span>:<br>            excessEightbits(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(-127to128):&quot;</span>))<br>    <span class="hljs-keyword">elif</span> choice1 == <span class="hljs-string">&quot;b&quot;</span>:<br>        <span class="hljs-keyword">if</span> choice2 == <span class="hljs-string">&quot;s&quot;</span>:<br>            signedMagnitude_re(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(8bit binary):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;1&quot;</span>:<br>            onesComplement_re(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(8_bit binary):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;2&quot;</span>:<br>            twosComplement_re(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(8bit binary):&quot;</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">&quot;e&quot;</span>:<br>            excessEightbits_re(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter(8_bit binary):&quot;</span>))<br>main()<br><span class="hljs-comment">#Made by Mike_Zhang</span><br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>原码、反码、补码中可以深挖的东西还有好多，都十分有趣，之后会继续记录。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Computer System</category>
      
      <category>Data Representation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Data Representation</tag>
      
      <tag>Signed Binary Number</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的继承性(Inheritance)</title>
    <link href="/2020/09/13/Java-oop-inheritance/"/>
    <url>/2020/09/13/Java-oop-inheritance/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>（二次更新：2021-09-18）</p><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><hr><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="继承性-Inheritance"><a href="#继承性-Inheritance" class="headerlink" title="继承性(Inheritance)"></a>继承性(Inheritance)</h3><p>类的继承是OOP中非常重要的概念, 它的核心思想是扩展某一个父类, 得到一个子类. 子类继承类它的父类的属性和方法, 子类也可以有新的不同于父类的属性和方法, 也可以重写父类中的一些方法. 举例来说, 定义一个父类为<strong>三角形类</strong>, 而<strong>直角三角形类</strong>就是<strong>三角形类</strong>的子类, 子类拥有父类具有的属性和方法, <strong>直角三角形类</strong>也拥有其父类不具有的属性和方法, 比如说<strong>直角三角形类</strong>的<em>一个角为90度</em> 这一属性就是<strong>直角三角形类</strong>特有的属性，同样也可以重写父类具有的属性和方法。</p><blockquote><p><code>extends</code>是Java中用来表明继承关系的关键字</p></blockquote><p>以下为例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//父类构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;This is Triangle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123; <span class="hljs-comment">//父类有参构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;A angle of the Triangle is &quot;</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> triangleAngleA, triangleAngleB, triangleAngleC;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAngle</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Please set triangleAngleA, B and C&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTriangleAngle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;triangleAngleA + triangleAngleB + triangleAngleC = 180&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Triangle</span>&#123; <span class="hljs-comment">//定义直角三角形子类继承三角形父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RightTriangle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//子类构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;This is Right Triangle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RightTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        <span class="hljs-built_in">super</span>(i);<br>        System.out.println(<span class="hljs-string">&quot;A angle of the Right Triangle is &quot;</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRightAngle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//在子类中添加新的成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;triangleAngleC is 90&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTriangleAngle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//重写父类中的成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;triangleAngleC = 90, and &quot;</span>);<br>        <span class="hljs-built_in">super</span>.getTriangleAngle(); <span class="hljs-comment">//调用父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RightTriangle</span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类继承直角三角形父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IsoscelesRightTriangle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//子类构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;This is Isosceles Right Triangle&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IsoscelesRightTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        <span class="hljs-built_in">super</span>(i);<br>        System.out.println(<span class="hljs-string">&quot;A angle of the Isosceles Right Triangle is &quot;</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsoscelesRightAngle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//在子类中添加新的成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;triangleAngleA and B are 45, triangleAngleC is 90&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTriangleAngle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//重写父类中的成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;triangleAngleA &amp; B = 45, and &quot;</span>);<br>        <span class="hljs-built_in">super</span>.getTriangleAngle(); <span class="hljs-comment">//调用父类方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">IsoscelesRightTriangle</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>(); <span class="hljs-comment">// 创建一个等腰直角三角形类的方法</span><br>        x.setAngle(); <span class="hljs-comment">// 调用三角形类的方法</span><br>        x.setRightAngle(); <span class="hljs-comment">// 调用直角三角形类的方法</span><br>        x.setIsoscelesRightAngle(); <span class="hljs-comment">// 调用本类的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">This is Triangle<br>This is Right Triangle<br>This is Isosceles Right Triangle<br>Please set triangleAngleA, B and C <br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><hr><h3 id="1-被继承的成员"><a href="#1-被继承的成员" class="headerlink" title="1. 被继承的成员"></a>1. 被继承的成员</h3><p>当一子类继承父类后，父类的实例变量将成为子类的<strong>一部分</strong>，父类的<strong>属性和方法可以被继承到子类</strong>，但是<strong>构造方法</strong>、<strong>static initializer</strong>、<strong>instance initializer</strong>并不是实例变量，所以<strong>不可以被继承</strong>。<br>判断实例变量是否可以继承到子类中，需要根据子类对父类实例变量的<strong>可访问性（accessibility）</strong>。子类继承了父类的某一成员，说明子类是可以访问到这一成员的。</p><h3 id="2-重写方法"><a href="#2-重写方法" class="headerlink" title="2. 重写方法"></a>2. 重写方法</h3><p>子类只能重写能<strong>够从父类中继承的方法</strong>，否则，如<code>private</code>修饰的方法不能被重写。<br>重写的方法必须有<strong>相同的Signature (i.e. method name, method argument type list)</strong>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123; … &#125;<br>    … <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wizard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123; … &#125; <span class="hljs-comment">// overriding, same signature, a new version of the method in superclass</span><br>    … <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(<span class="hljs-type">float</span> x)</span>&#123; … &#125; <span class="hljs-comment">// overloading, different signature, redefined a new method </span><br>    … <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-权限修饰符"><a href="#3-权限修饰符" class="headerlink" title="3. 权限修饰符"></a>3. 权限修饰符</h3><p>   一般来说，为了保护继承性，成员属性修饰为<code>private</code>，成员方法修饰为<code>public</code>。尽管<code>protected</code>修饰的属性和方法可以在继承类间访问，但是最好还是让成员属性被<code>private</code>修饰。<br>   子类在重写父类中的方法时, 权限的修改范围只能从小到大, protected修饰的方法只能重写成public, 而不能重写成private；</p><h3 id="4-super关键字"><a href="#4-super关键字" class="headerlink" title="4. super关键字"></a>4. <code>super</code>关键字</h3><blockquote><p><code>super</code>关键字与<code>this</code>关键字的作用十分类似。</p></blockquote><p>注意到例子三个类中都有<code>getTriangleAngle()</code>方法，因为子类可以使用或者修改父类中的方法。但是不能直接使用<code>getTriangleAngle()</code>语句调用父类方法，这样会造成自我循环调用的错误。需要使用<code>super</code>关键字来引用到目前子类的父类，如<code>super.getTriangleAngle()</code>，意思为调用目前子类的父类的<code>getTriangleAngle()</code>方法。但是只能调用public和protected修饰的方法。</p><h3 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h3><p>在Java中<strong>构造方法不会被继承</strong>，构造方法分为<strong>无参构造方法</strong>和<strong>有参构造方法</strong>。</p><h4 id="5-1-无参构造方法"><a href="#5-1-无参构造方法" class="headerlink" title="5.1 无参构造方法"></a>5.1 无参构造方法</h4><p>当子类创建对象时，会先调用其父类的无参构造方法。<strong>而父亲必须包含一个无参构造方法，否则子类无法隐形调用其父类的无参构造方法</strong>。</p><blockquote><p>例子中，<code>mian()</code>中创建了<code>IsoscelesRightTriangle</code>类的<code>x</code>对象，它会调用其父类<code>RightTriangle</code>的构造方法，而在<code>RightTriangle</code>被调用时，需要先调用其父类<code>Triangle</code>的构造方法，<strong>一层层向上</strong>。<br>因此最先完成调用的是最大的父类<code>Triangle</code>的构造方法，因此先输出<code>This is Triangle</code>，再完成调用子类<code>RightTriangle</code>的构造方法，输出<code>This is Right Triangle</code>，最后完成调用子类<code>IsoscelesRightTriangle</code>的构造方法，输出<code>This is Isosceles Right Triangle</code>，<strong>一层层向下</strong>。</p></blockquote><p>因此，运行后输出为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">This is Triangle <span class="hljs-comment">// 调用Triangle类的无参构造方法</span><br>This is Right Triangle <span class="hljs-comment">// 调用RightTriangle类的无参构造方法</span><br>This is Isosceles Right Triangle <span class="hljs-comment">// 调用IsoscelesRightTriangle类的无参构造方法</span><br>Please set triangleAngleA, B and C <br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br><strong>子类构造方法</strong>的<strong>第一句语句</strong>一直都是<strong>调用某一构造方法</strong>，可以是：</p><ol><li>对<strong>子类构造方法</strong>的<strong>显性重载</strong>，使用<code>this</code>关键字；</li><li>对其<strong>父类构造方法</strong>的<strong>显性调用</strong>，使用<code>super</code>关键字；</li><li><strong>隐性调用</strong>其<strong>父类的无参构造方法</strong>，当没有显性调用构造方法时，编译器会自动调用，使用<code>super</code>关键字，如：<blockquote><p>就算子类<code>IsoscelesRightTriangle</code>没有构造方法，Java编译器也会自动调用其父类的构造方法。</p></blockquote></li></ol><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;System.out.print(“<span class="hljs-number">1</span>”);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;System.out.print(“<span class="hljs-number">2</span>”);&#125; <br>&#125; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// NO super(); inserted by the compiler for an explicit constructor this(1); exists</span><br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// explicit constructor</span><br>        System.out.print(“<span class="hljs-number">3</span>”);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(<span class="hljs-type">float</span> x)</span>&#123; <br>        <span class="hljs-comment">// super(); // inserted by the compiler</span><br>        System.out.print(“<span class="hljs-number">4</span>”); <br>        &#125;<br>&#125; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// super(); // inserted by the compiler</span><br>        System.out.print(“<span class="hljs-number">5</span>”);<br>        &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>C cObj = new C();</code>的输出为<code>1435</code></p><hr><h4 id="5-2-有参构造方法"><a href="#5-2-有参构造方法" class="headerlink" title="5.2 有参构造方法"></a>5.2 有参构造方法</h4><p>父类无参构造方法能够被自动调用，但是调用父类有参构造方法需要在子类构造方法中用<code>super</code>关键字表明，若无，则不会调用。如下：</p><p>修改例子中的main()方法，其余不变，以测试有参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-type">IsoscelesRightTriangle</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IsoscelesRightTriangle</span>(<span class="hljs-number">45</span>); <span class="hljs-comment">// 有参构造方法 </span><br>        x.setAngle(); <span class="hljs-comment">// 调用三角形类的方法</span><br>        x.setRightAngle(); <span class="hljs-comment">// 调用直角三角形类的方法</span><br>        x.setIsoscelesRightAngle(); <span class="hljs-comment">// 调用本类的方法</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">A angle of the Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用Triangle类的有参构造方法</span><br>A angle of the Right Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用RightTriangle类的有参构造方法</span><br>A angle of the Isosceles Right Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用IsoscelesRightTriangle类的有参构造方法</span><br>Please set triangleAngleA, B and C<br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br>在子类中，调用其父类构造方法的语句 <strong><em>必须是</em></strong> 此子类构造方法体中的 <strong><em>第一行被执行的语句</em></strong> ，否则会报错，例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">IsoscelesRightTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;A angle of the Isosceles Right Triangle is &quot;</span> + i);<br>        <span class="hljs-built_in">super</span>(i); <span class="hljs-comment">//没有写在构造方法的最前面</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>报错：</strong><br><code>Call to &#39;super()&#39; must be first statement in constructor body</code></p><h3 id="6-Object-类"><a href="#6-Object-类" class="headerlink" title="6. Object 类"></a>6. <code>Object</code> 类</h3><p>就算某一个类没有确切表明继承了父类，此类也已经自动的继承了<code>java.lang.Object</code>类，此为Java中的统一父类(Universal Superclass)。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</title>
    <link href="/2020/09/06/Spawnfailed-error/"/>
    <url>/2020/09/06/Spawnfailed-error/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/online-or-local-video-gif-in-markdown/">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/Spawnfailed-error/">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>之前我发布了一篇<a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a>的文章,当时上传的文件体积不大,最大的也只有1.5MB.后来我尝试把时间更长, 体积更大的视频上传, 但是并没有成功, warning警告说“GitHub建议上传最大体积为50MB, 上限为100MB”, 很明显我上传的视频文件体积已经超过了100MB. 因此我删掉了那个大文件, 但是当我再次尝试部署时, 还是弹出来一样的warning, 报错文件的路径也和之前的一样, 可是我明明已经删除了那个文件, 后来经过不断的尝试以及在网上搜索, 我找到了一篇和我遇到问题类似的文章<a href="https://perry96.com/archives/882898e3.html">Hexo部署报错Spawn failed及解决方案</a>, 此方法指出报错的根源是出现在.deploy_git文件夹里, 删除本地文件并不能删除.deploy_git文件夹里的文件, 解决方法就是让本地仓库文件恢复到没有出现问题前的状态.<br>但这个并没有完全解决我的问题, 后来我不断尝试, 完善了<a href="https://perry96.com/archives/882898e3.html">Hexo部署报错Spawn failed及解决方案</a>, 我的方法如下:<br><span id="more"></span></p><h2 id="1-获取GitHub最新仓库commitId"><a href="#1-获取GitHub最新仓库commitId" class="headerlink" title="1.获取GitHub最新仓库commitId"></a><strong>1.获取GitHub最新仓库commitId</strong></h2><p>获取GitHub最新仓库commitId, 此commitId就是你上一次部署成功的链接, 获取方法如下:</p><blockquote><p>1.点击更新时间:<br><img src="/2020/09/06/Spawnfailed-error/2.jpg" alt><br>2.找到commitId并复制:<br><img src="/2020/09/06/Spawnfailed-error/3.jpg" alt></p></blockquote><h2 id="2-恢复仓库文件"><a href="#2-恢复仓库文件" class="headerlink" title="2.恢复仓库文件"></a><strong>2.恢复仓库文件</strong></h2><h5 id="打开终端-并到GitHub本地仓库目录下"><a href="#打开终端-并到GitHub本地仓库目录下" class="headerlink" title="打开终端, 并到GitHub本地仓库目录下"></a>打开终端, 并到GitHub本地仓库目录下</h5><p>根据文章<a href="https://perry96.com/archives/882898e3.html">Hexo部署报错Spawn failed及解决方案</a>, 本地仓库应该为.deploy_git文件夹, 但是我并没有找到此文件夹, 我尝试了好多次都没有打开这个路径.<br>后来我干脆直接用命令语句打开:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure><br>万万没想到, 没有报错, 就说明打开了本地仓库文件夹.deploy_git.</p><h5 id="接下来输入命令"><a href="#接下来输入命令" class="headerlink" title="接下来输入命令"></a>接下来输入命令</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard  commitId</span><br></code></pre></td></tr></table></figure><p>commitId即为刚刚从GitHub仓库复制的commitId, 即如下:<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">git</span></span> reset --hard  c7e7...ed<br></code></pre></td></tr></table></figure><br>(此处仅举例, commitId需填写完整)</p><h5 id="最后进行Hexo操作"><a href="#最后进行Hexo操作" class="headerlink" title="最后进行Hexo操作"></a>最后进行Hexo操作</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>最后你会发现网站恢复到上一次成功部署后的样子了, 下一次部署的时候就不会报错了.</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a><strong>3.注意事项</strong></h2><p><strong>1.上传到GitHub的单个文件大小不要超过50MB;</strong><br><strong>2.部署Hexo是把.deploy_git文件push到GitHub上的, 在mac上可能.deploy_git文件夹被隐藏, 直接通过命令语句打开即可.</strong><br>希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br><a href="https://perry96.com/archives/882898e3.html">Hexo部署报错Spawn failed及解决方案</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>Error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>spawn_failed报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来港第一年 - 一年前刚来 现在依然在</title>
    <link href="/2020/08/31/one-year/"/>
    <url>/2020/08/31/one-year/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><div style="position:relative; padding-bottom:75%; width:100%; height:0">    <iframe src="//player.bilibili.com/player.html?aid=711986414&bvid=BV1SD4y1d7Kf&cid=230909797&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h2 id="一年前刚来-现在依然在"><a href="#一年前刚来-现在依然在" class="headerlink" title="一年前刚来 现在依然在"></a>一年前刚来 现在依然在</h2><span id="more"></span><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hexo中用Markdown添加网络或本地视频以及GIF动图</title>
    <link href="/2020/08/23/online-or-local-video-gif-in-markdown/"/>
    <url>/2020/08/23/online-or-local-video-gif-in-markdown/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/online-or-local-video-gif-in-markdown/">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/Spawnfailed-error/">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>最近更新维护了一下blog，之前的视频是通过链接过来的，现在可以添加本地的视频，还可以添加本地的GIF动图，具体效果可以看一下我的<a href="http://ultrafish.cn/2020/07/29/hello-ultrafisher/">第一篇文章 “Hello UltraFisher”</a>。这个blog的文章都是用标记语言Markdown写的，那接下来说说如何在Hexo中用Markdown添加网络或本地视频以及GIF动图</p><p><strong><em>注意 : 上传的单个文件大小不要超过50MB, 具体问题以及解决方法已经更新 : <a href="https://ultrafish.cn/2020/09/06/Spawnfailed-error/">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a></em></strong></p><h2 id="1-用Markdown添加网络视频"><a href="#1-用Markdown添加网络视频" class="headerlink" title="1.用Markdown添加网络视频"></a><strong>1.用Markdown添加网络视频</strong></h2><p>目前可以在Markdown里链接的视频平台并不多，有b站和优酷，接下来我就用b站举例。<br><span id="more"></span></p><h4 id="第一步：获取视频链接"><a href="#第一步：获取视频链接" class="headerlink" title="第一步：获取视频链接"></a>第一步：获取视频链接</h4><p>找到你想添加的视频，点击分享按钮，复制嵌入代码。<br><img src="/2020/08/23/online-or-local-video-gif-in-markdown/1.jpg" alt><br><em>图源：bilibili</em></p><h4 id="第二步：在-md文件中添加代码"><a href="#第二步：在-md文件中添加代码" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> </span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=201033992&amp;bvid=BV1dz411i75o&amp;cid=203132924&amp;page=1&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>注意其中第二行开始的以下代码是你之前从b站复制的嵌入代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=201033992&amp;bvid=BV1dz411i75o&amp;cid=203132924&amp;page=1&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><h4 id="第三步：Hexo操作"><a href="#第三步：Hexo操作" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>部署之后就可以看到b站链接过来的视频了，<strong>但是请注意，我链接的是我个人b站的视频，在链接他人视频之前请先询问视频作者是否可以转载。</strong><br>这样链接是挺方便，但是视频内容十分有限制，只能添加在网络上的视频，那接下来就看看如何添加本地的视频。</p><hr><h2 id="2-用Markdown添加本地视频"><a href="#2-用Markdown添加本地视频" class="headerlink" title="2.用Markdown添加本地视频"></a><strong>2.用Markdown添加本地视频</strong></h2><h4 id="第一步：放置本地视频"><a href="#第一步：放置本地视频" class="headerlink" title="第一步：放置本地视频"></a>第一步：放置本地视频</h4><p>先在于.md同目录下创建一个文件夹用于放置添加的视频文件：<br>（文件名建议和Markdown文件名一致，这样比较规范）<br><img src="/2020/08/23/online-or-local-video-gif-in-markdown/2.jpg" alt><br>接下来把需要添加的视频放入此文件夹。</p><h4 id="第二步：在-md文件中添加代码-1"><a href="#第二步：在-md文件中添加代码-1" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/2020/07/29/hello-ultrafisher/logo.mp4&quot;</span> <span class="hljs-attr">position</span>= <span class="hljs-string">&quot;absolute&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>视频地址为 /2020/07/29/hello-ultrafisher/logo.mp4<br>其中：<br>/2020/07/29/为文章的地址名（根据日期命名）<br>hello-ultrafisher为放置视频的文件夹名<br>logo.mp4为视频文件名</p><p><strong>如何准确获取本地视频地址名：</strong><br>我的blog是部署在GitHub上的，在部署时，本地视频会被上传到GitHub，其实blog的所以文件都在GitHub上，那我们只需要在GitHub中就可以找到准确的地址名。<br>在把视频放入之前创建的文件夹后，先进行一遍Hexo操作：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><br>之后在你GitHub库中找到你的视频文件：<br><img src="/2020/08/23/online-or-local-video-gif-in-markdown/3.jpg" alt><br><em>图源：GitHub</em></p><h4 id="第三步：Hexo操作-1"><a href="#第三步：Hexo操作-1" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这样视频添加就完成了。<br>看一下效果：</p><p><video src="/2020/07/29/hello-ultrafisher/logo.mp4" position="absolute" width="100%" height="100%" controls="controls"></video><br>接下来介绍如何添加GIF动图。相比于视频，GIF动图能够自己循环播放，比较适合播一些小动画。</p><hr><h2 id="3-用Markdown添加本地GIF动图"><a href="#3-用Markdown添加本地GIF动图" class="headerlink" title="3.用Markdown添加本地GIF动图"></a><strong>3.用Markdown添加本地GIF动图</strong></h2><h4 id="第一步：放置本地GIF动图"><a href="#第一步：放置本地GIF动图" class="headerlink" title="第一步：放置本地GIF动图"></a>第一步：放置本地GIF动图</h4><p>放置方法和放置本地视频相同，也是放置于与.md同目录的文件夹中，这里不多描述。</p><p><strong>如何把视频转换成GIF动图：</strong><br>最直接的方法就是在网上搜索在线的视频转GIF工具。<br>或者用一些软件来转换，这里推荐一个Mac上的转换软件Gifski：<br><img src="/2020/08/23/online-or-local-video-gif-in-markdown/4.jpg" alt><br><strong>如何裁剪GIF动图：</strong><br>分享一个网上的在线裁剪工具：<br><a href="https://www.iloveimg.com/zh-cn/crop-image/crop-gif">iLoveIMG</a></p><h4 id="第二步：在-md文件中添加代码-2"><a href="#第二步：在-md文件中添加代码-2" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;hello-ultrafisher/logo3.gif&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>GIF地址为 hello-ultrafisher/logo3.gif<br>其中：<br>hello-ultrafisher为放置GIF的文件夹名<br>logo3.gif为GIF文件名</p><p>width = “” height = “”：表示自动填充大小<br>也可以自己填写长度或者百分比来改变GIF的大小<br>前后的”center”表示居中，也可以改成”left”靠左或者”right”靠右。</p><h4 id="第三步：Hexo操作-2"><a href="#第三步：Hexo操作-2" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这样GIF动图就添加完成了，可以在文章末尾看到效果。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>网上说的比较多的是如何从网上链接视频，我不断尝试摸索添加本地视频的方法。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>Media</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>byte数据类型在显式类型转换时超出其取值范围的转换过程</title>
    <link href="/2020/08/15/Java-data-type-conversion/"/>
    <url>/2020/08/15/Java-data-type-conversion/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h4 id="byte数据类型简介"><a href="#byte数据类型简介" class="headerlink" title="byte数据类型简介"></a>byte数据类型简介</h4><p>byte是四个整数类型（byte、short、int、long）中取值范围最小的整型数据类型，具体如下：<br><span id="more"></span></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型名称</th><th style="text-align:center">内存大小</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">8b(1B)</td><td style="text-align:center">-128~127(2^8)</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">16b(2B)</td><td style="text-align:center">-32768~32767(2^16)</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">32b(4B)</td><td style="text-align:center">-2147483648~2147482647(2^32)</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">64b(8B)</td><td style="text-align:center">-9223372036854775808~9223372036854775807(2^64)</td></tr></tbody></table></div><hr><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>数据类型转换分为<strong>隐式转换</strong>和<strong>显式转换（也称强制类型转换）</strong></p><p><strong>隐式转换</strong>指的是低精度数据类型向高精度数据类型转换，数据不会溢出，并且一定成功，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frist</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//初始int变量a，初值为100</span><br><span class="hljs-type">float</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">//a赋值给float型变量b</span><br>System.out.println(b); <span class="hljs-comment">//输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure></p><p><strong>显式转换（也称强制类型转换)</strong> 指的是高精度数据类型转换向低精度数据类型，转换时可能会造成数据精度损失，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frist</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">100.99</span>; <span class="hljs-comment">//从浮点型到整型</span><br><span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>)<span class="hljs-number">12.3f</span>; <span class="hljs-comment">//从浮点型到整型</span><br>System.out.println(a); <span class="hljs-comment">//输出</span><br>System.out.println(b); <span class="hljs-comment">//输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">100</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><hr><h4 id="byte类型显式转换时超出其取值范围"><a href="#byte类型显式转换时超出其取值范围" class="headerlink" title="byte类型显式转换时超出其取值范围"></a>byte类型显式转换时超出其取值范围</h4><p>若我们运行以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frist</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)<span class="hljs-number">129</span>;<br>System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">127</span><br></code></pre></td></tr></table></figure><br>因为byte数据类型的取值范围是-128～127，以上例子中被转换的数值为129，已经超出了byte数据类型的取值范围，所以不能正常显示为129，而现实了看似奇怪的-127.<br>其实，-127并不是凭空出现的，而是因为byte数据类型对于超出其取值范围的强制类型转换有特殊的处理过程。</p><p>步骤为：</p><blockquote><p><strong>1.保留被转换数值补码的低字节部分；</strong><br><strong>2.将保留下来的部分转换成原码。</strong></p></blockquote><p>（这里不会对原码，反码，补码等概念进行讲解，若不了解的，请自行搜索）</p><p>接下来以129为例：</p><blockquote><p><strong>第一步 保留被转换数值补码的低字节部分</strong><br>129的原码为 <strong>0…0 1000 0001(原)</strong><br>保留其低字节部分后为：<br><strong>1000 0001(原)</strong></p><p><strong>第二步 将保留下来的部分转换成原码</strong><br>因为程序是以补码处理数值的，所以上一步中的<strong>1000 0001(原)</strong>将会被看成补码<strong>1000 0001(补)</strong><br>接下来将补码还原成原码：<br><strong>1000 0001(补)</strong> &gt;&gt;&gt; <strong>1000 0000(反)</strong> &gt;&gt;&gt; <strong>1111 1111(原)</strong><br><strong>1111 1111(原)</strong> 即为-127（<strong>1111 1111(原)</strong> 的最高位是符号位，1表示负数，余下的 <strong>111 1111</strong> 即为十进制的127，所以<strong>1111 1111(原)</strong> 为-127）</p></blockquote><p>所以以上步骤解释了byte a = (byte)129;的输出结果为-127。</p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>在研究过程中发现，其实原码、反码、补码中可以深挖的东西还有好多，都十分有趣，之后也会记录。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python对约瑟夫问题(Josephus Problem)的高效解决方法</title>
    <link href="/2020/08/05/josephus-problem/"/>
    <url>/2020/08/05/josephus-problem/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>数据结构与算法主题：</p><iframe name="ifr" width="100%" src="/content/dsa.html" frameborder="0" onresize="this.height=this.contentWindow.document.body.scrollHeight" onload="this.height=this.contentWindow.document.body.scrollHeight" scrolling="no" allowfullscreen> </iframe><hr><h2 id="1-约瑟夫问题引入"><a href="#1-约瑟夫问题引入" class="headerlink" title="1.约瑟夫问题引入"></a><strong>1.约瑟夫问题引入</strong></h2><h4 id="约瑟夫问题由来"><a href="#约瑟夫问题由来" class="headerlink" title="约瑟夫问题由来"></a>约瑟夫问题由来</h4><p>先看一下<a href="https://baike.baidu.com/item/约瑟夫问题">百度百科</a>对约瑟夫问题的介绍：</p><blockquote><p>据说著名犹太历史学家Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是，给定了和，一开始要站在什么地方才能避免被处决？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。(来自百度百科-约瑟夫问题)</p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h4 id="实际问题案例"><a href="#实际问题案例" class="headerlink" title="实际问题案例"></a>实际问题案例</h4><p>以下问题来自我的一个作业，经过改编：<br>There are n people sitting around a circle, and all are numbered from 1 to n. Starting from the first person, they count from 1 to m and the one who counts m will be eliminated. The process will be started again from the next person until all people are eliminated. Your task now is to write a program to derive the order of the elimination for given n and m. That is, your program should ask the user to input integers n and m, and then print the sequence of elimination on screen.</p></blockquote><p>翻译如下：</p><blockquote><p>一圈有n个人坐着，所有人从1到n编号，从第一个人开始，他们从1数到m，数到m的人将被淘汰。这个过程将从下一个人重新开始，直到所有人都被淘汰。现在的任务是编写一个程序，根据给定的n和m来推导淘汰的顺序。也就是说，程序应该要求用户输入整数n和m，然后在屏幕上输出淘汰的顺序。 </p></blockquote><p>举例：<br>总人数n=5，数到m=2</p><blockquote><p>第一轮：(从1开始数)<br>1 <del>2</del> 3 <del>4</del> 5 （淘汰：2, 4）<br>第二轮:（上次淘汰为4号，则从5号开始数，5号数完回到1号）<br><del>1</del> 3 <del>5</del> （淘汰：2, 4, 1, 5）<br>第三轮：<br><del>3</del> （淘汰：2, 4, 1, 5, 3）<br>结束</p></blockquote><p>所以，最后淘汰顺序为2, 4, 1, 5, 3</p><p>现在需要用Python编写一个程序来解决这一个问题，但是在此之前，我们先来看一个在生活中类似的问题——星期计算问题。</p><h2 id="2-星期计算问题"><a href="#2-星期计算问题" class="headerlink" title="2.星期计算问题"></a><strong>2.星期计算问题</strong></h2><blockquote><p>假设今天是1号星期一，问：过n天后是星期几？</p></blockquote><div class="table-container"><table><thead><tr><th>日</th><th style="text-align:center">一</th><th style="text-align:right">二</th><th style="text-align:right">三</th><th style="text-align:right">四</th><th style="text-align:right">五</th><th style="text-align:right">六</th></tr></thead><tbody><tr><td>-</td><td style="text-align:center">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td></tr><tr><td>7</td><td style="text-align:center">8</td><td style="text-align:right">9</td><td style="text-align:right">10</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr><tr><td>14</td><td style="text-align:center">15</td><td style="text-align:right">16</td><td style="text-align:right">17</td><td style="text-align:right">18</td><td style="text-align:right">19</td><td style="text-align:right">20</td></tr><tr><td>21</td><td style="text-align:center">22</td><td style="text-align:right">23</td><td style="text-align:right">24</td><td style="text-align:right">25</td><td style="text-align:right">26</td><td style="text-align:right">27</td></tr><tr><td>28</td><td style="text-align:center">29</td><td style="text-align:right">30</td></tr></tbody></table></div><blockquote><p>举例：<br>过19天后，为20号，星期六<br>过8天后，为9号，星期二<br>过6天后，为7号，星期日</p></blockquote><p>以上例子根据日历来数是非常简单的，但是问10000天之后是星期几就没有这样简单了。<br>但是我们可以根据规律，以7天为一个周期，用数学方法来计算。把经过的日子除以7<strong>取余数</strong>就可以找到规律并计算出目标日期的星期。</p><blockquote><p>验证：<br>过19天后，为20号 &gt;&gt;&gt; (1+19)/7 = 2余6 &gt;&gt;&gt; 星期六<br>过8天后，为9号 &gt;&gt;&gt; (1+8)/7 = 1余2 &gt;&gt;&gt; 星期二</p><h2 id="过6天后，为7号-gt-gt-gt-1-6-7-1余0-gt-gt-gt-星期日-余0看作星期日"><a href="#过6天后，为7号-gt-gt-gt-1-6-7-1余0-gt-gt-gt-星期日-余0看作星期日" class="headerlink" title="过6天后，为7号 &gt;&gt;&gt; (1+6)/7 = 1余0 &gt;&gt;&gt; 星期日(余0看作星期日)"></a>过6天后，为7号 &gt;&gt;&gt; (1+6)/7 = 1余0 &gt;&gt;&gt; 星期日(余0看作星期日)</h2><p><strong>取余数(take the remainder)</strong>，在Python中的运算符是%(mod运算):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>+<span class="hljs-number">19</span>)%<span class="hljs-number">7</span><br>(<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)%<span class="hljs-number">7</span><br>(<span class="hljs-number">1</span>+<span class="hljs-number">6</span>)%<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><br>以下为Python实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;今天是1号星期一&quot;</span>)<br>weekstr = <span class="hljs-string">&#x27;日一二三四五六&#x27;</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入经过的天数：&quot;</span>))<br>m = (<span class="hljs-number">1</span> + n) % <span class="hljs-number">7</span><br>week = weekstr[m]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;经过&quot;</span>,n,<span class="hljs-string">&quot;天后是星期&quot;</span>,week,sep=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><br>输出如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">今天是<span class="hljs-number">1</span>号星期一<br>输入经过的天数：<span class="hljs-number">19</span><br>经过<span class="hljs-number">19</span>天后是星期六<br></code></pre></td></tr></table></figure></p><h2 id="3-Python代码实现"><a href="#3-Python代码实现" class="headerlink" title="3.Python代码实现"></a><strong>3.Python代码实现</strong></h2><p>回到上面介绍的约瑟夫问题<br>一圈有n个人坐着，所有人从1到n编号，从第一个人开始，他们从1数到m，数到m的人将被淘汰。这个过程将从下一个人重新开始，直到所有人都被淘汰。现在的任务是编写一个程序，根据给定的n和m来推导淘汰的顺序。也就是说，程序应该要求用户输入整数n和m，然后在屏幕上输出淘汰的顺序。 </p></blockquote><p>和刚刚的星期计算问题十分的类似，都是一种周期性的问题，星期问题的周期是7，而约瑟夫问题的周期是一个变量m，也就是一圈人报的数字。这也不奇怪，因为在编程算法中，类似这样的问题又被成为<strong>约瑟夫环</strong></p><h4 id="类比星期问题"><a href="#类比星期问题" class="headerlink" title="类比星期问题"></a>类比星期问题</h4><p>还是用之前的星期列表，如果从1号开始从1报数，每次报到7的出列，那出列的就是和1号同一个星期（星期一）的日子，也就是8日，15日，22日，29日。</p><div class="table-container"><table><thead><tr><th>日</th><th style="text-align:center">一</th><th style="text-align:right">二</th><th style="text-align:right">三</th><th style="text-align:right">四</th><th style="text-align:right">五</th><th style="text-align:right">六</th></tr></thead><tbody><tr><td>-</td><td style="text-align:center">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td></tr><tr><td>7</td><td style="text-align:center">8</td><td style="text-align:right">9</td><td style="text-align:right">10</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr><tr><td>14</td><td style="text-align:center">15</td><td style="text-align:right">16</td><td style="text-align:right">17</td><td style="text-align:right">18</td><td style="text-align:right">19</td><td style="text-align:right">20</td></tr><tr><td>21</td><td style="text-align:center">22</td><td style="text-align:right">23</td><td style="text-align:right">24</td><td style="text-align:right">25</td><td style="text-align:right">26</td><td style="text-align:right">27</td></tr><tr><td>28</td><td style="text-align:center">29</td><td style="text-align:right">30</td></tr></tbody></table></div><hr><p>现在我们把约瑟夫环也类比成星期问题：<br>举例：总人数n=5，数到m=2</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1（开始）</td><td style="text-align:center"><strong><em>2</em></strong></td><td></td></tr><tr><td>3</td><td style="text-align:center"><strong><em>4</em></strong></td><td></td></tr><tr><td>5</td><td style="text-align:center">-</td><td></td></tr></tbody></table></div><p>从1号开始报数，每次报到2的出列，类比成星期问题，那就是只用两个星期（星期一和星期二），并且星期二的就是需要出列的日子，那就不难发现，在上面的表中，需要出列的就是<strong>2号</strong>和<strong>4号</strong>。</p><p>但是约瑟夫环有一点和星期问题不同，那就是约瑟夫环需要把所有一圈的人（日子）全部淘汰才能结束，那我们就可以把还没有被淘汰的人（日子）顺次接到第一轮的后面，如下：</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center"><em><del>2</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>4</del></em></td><td></td></tr><tr><td>5（开始）</td><td style="text-align:center"><strong>1</strong></td><td></td></tr><tr><td><strong>3</strong></td><td style="text-align:center"><strong>5</strong></td><td></td></tr></tbody></table></div><p>继续报数，这一次从上一次被淘汰（4号）的下一个开始报数（5号），那这一次需要出列的是星期二的<strong>1号</strong>和<strong>5号</strong><br>继续把还没有出列的（3号）接到上一轮的后面：</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center"><em><del>2</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>4</del></em></td><td></td></tr><tr><td>5</td><td style="text-align:center"><em><del>1</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>5</del></em></td><td></td></tr><tr><td><strong>3</strong></td><td style="text-align:center"></td><td></td></tr></tbody></table></div><p>最后只剩下<strong>3号</strong>，那就自然变成最后一个出列的<br>综上：淘汰（出列）的顺序就是2号，4号，1号，5号，3号，和我们在开头例子中得出的结果是一样的。</p><p>小结：类比成星期问题，约瑟夫环每次需要淘汰的人位置都可以通过<strong>取余数</strong>的方式确定下来，还需要把未淘汰的人顺次接到上一轮的后面。因此，我们只需先确定每次需要淘汰的位置，然后通过遍历这一圈人，当遍历到的位置和需要淘汰的位置相同时，就把此位置的人移除，并把移除的后一个人作为下一次遍历的起点，不断循环，直到全部的人都被淘汰。</p><p>为了实现以上的想法，我们就需要用到Python中的<strong>队列queue</strong>来当作载体，因为队列的FIFO（即First in First Out,先进先出）的特性能保持这一圈人的顺序不发生变化。</p><h4 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h4><p>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Josephus_Problem_with_Python">https://github.com/zhangwengyu999/Josephus_Problem_with_Python</a></p><p>也欢迎到我的开发性页面使用<a href="https://plus.ultrafish.cn/Josephus-Problem">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue <span class="hljs-comment">#引入队列queue</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n输入总人数n（n为正整数）:&quot;</span>))<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入每次报数 m（m为正整数） :&quot;</span>))<br>position = <span class="hljs-number">1</span> <span class="hljs-comment">#需要被淘汰的位置，初始为1</span><br>nowposition = <span class="hljs-number">1</span> <span class="hljs-comment">#当前遍历的位置，初始为1</span><br>outqueue = Queue() <span class="hljs-comment">#储存输出的队列</span><br>nqueue = Queue() <span class="hljs-comment">#储存每一遍中还没有被淘汰的人</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>): <span class="hljs-comment">#新建一个从1到n的队列</span><br>    nqueue.put(i)<br><br><span class="hljs-keyword">while</span> nqueue.empty() <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>: <span class="hljs-comment">#循环直到列表为空</span><br>    <span class="hljs-comment">#&gt;&gt;&gt;第一步是确定下一次需要被淘汰的位置&lt;&lt;&lt;</span><br>    position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <span class="hljs-comment">#使用取余数%来确定下一次需要被淘汰的位置(&quot;-1&quot; 和 &quot;+1&quot; 的作用会在后文解释)</span><br>    <span class="hljs-comment">#&gt;&gt;&gt;第二步就是把遍历到的人移到队列的末尾或者输出的队列中&lt;&lt;&lt;</span><br>    <span class="hljs-keyword">if</span> nowposition != position: <span class="hljs-comment">#当遍历到的人不是淘汰的目标时，就把他移到队列的末尾</span><br>        nqueue.put(nqueue.get())<br>        nowposition += <span class="hljs-number">1</span> <span class="hljs-comment">#遍历后一个人</span><br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment">#当遍历到的人是需要被淘汰的时，把他移动到输出的队列中</span><br>        outqueue.put(nqueue.get())<br>        nowposition = <span class="hljs-number">1</span> <span class="hljs-comment">#下一个人作为遍历的起点</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;结果如下，总人数[&quot;</span>,n,<span class="hljs-string">&quot;]人，每次报数[&quot;</span>,m,<span class="hljs-string">&quot;]:&quot;</span>,sep=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> outqueue.empty():<br>     <span class="hljs-built_in">print</span>(outqueue.get(), end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">#输出队列</span><br></code></pre></td></tr></table></figure><p>解释以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><br>这句代码中的”-1” 和 “+1”是为了解决当<strong>报数m</strong>是<strong>剩下队列长度</strong>的倍数时所产生的bug</p><hr><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>接下来，我用一个例子验证以上代码和这个bug的解决方法</p><p>举例：n=5，m=2</p><p>第1次:</p><blockquote><p>1 2 3 4 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(1)</td><td style="text-align:left">2</td><td style="text-align:center">-</td></tr></tbody></table></div><p>第2次:</p><blockquote><p><del>2</del> 3 4 5 1</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(2)</td><td style="text-align:left">2</td><td style="text-align:center">2</td></tr></tbody></table></div><p>第3次:</p><blockquote><p>3 4 5 1</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2</td></tr></tbody></table></div><p>第4次:</p><blockquote><p><del>4</del> 5 1 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(4)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4</td></tr></tbody></table></div><p>第5次:</p><blockquote><p>5 1 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(5)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4</td></tr></tbody></table></div><p>第6次:</p><blockquote><p><del>1</del> 3 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(1)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1</td></tr></tbody></table></div><p>第7次:</p><blockquote><p>3 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1</td></tr></tbody></table></div><p>解释：此时m=2，剩下队列长度=2，<strong>报数m</strong>是<strong>剩下队列长度</strong>的倍数<br>若直接运行以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = m % nqueue.qsize() <br></code></pre></td></tr></table></figure><br>得到的position返回值是0，并不是正确的position=2，会出现bug<br>因此，加上”-1” 和 “+1”就能解决这个bug，变成以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure></p><p>第8次:</p><blockquote><p><del>5</del> 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(5)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5</td></tr></tbody></table></div><p>第9次:</p><blockquote><p>3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5</td></tr></tbody></table></div><p>第10次:</p><blockquote><p><del>3</del></p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5, 3</td></tr></tbody></table></div><p>nqueue队列变空，循环结束，输出outqueue：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><br>和开头举的例子结果相同。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a><strong>4.总结</strong></h2><p>去掉注释后的代码其实没有多少行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n输入总人数n（n为正整数）:&quot;</span>))<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入每次报数 m（m为正整数） :&quot;</span>))<br>position = <span class="hljs-number">1</span> <br>nowposition = <span class="hljs-number">1</span> <br>outqueue = Queue() <br>nqueue = Queue() <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>): <br>    nqueue.put(i)<br><span class="hljs-keyword">while</span> nqueue.empty() <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>: <br>    position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">if</span> nowposition != position:<br>        nqueue.put(nqueue.get())<br>        nowposition += <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">else</span>: <br>        outqueue.put(nqueue.get())<br>        nowposition = <span class="hljs-number">1</span> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;结果如下，总人数[&quot;</span>,n,<span class="hljs-string">&quot;]人，每次报数[&quot;</span>,m,<span class="hljs-string">&quot;]:&quot;</span>,sep=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> outqueue.empty():<br>     <span class="hljs-built_in">print</span>(outqueue.get(), end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><br>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Josephus_Problem_with_Python">https://github.com/zhangwengyu999/Josephus_Problem_with_Python</a></p><p>也欢迎到我的开发性页面使用<a href="https://plus.ultrafish.cn/Josephus-Problem">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a></p><p>核心就是类比星期计算问题，采用取余数来获取下一次需要被淘汰的人的位置，当遍历到此位置时，就把他移除，并继续遍历。</p><p>网上有好多关于约瑟夫环的解决方法，可能我的方法并不是最简单的，最高效的，但也希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br>百度百科—约瑟夫问题 <a href="https://baike.baidu.com/item/约瑟夫问题">https://baike.baidu.com/item/约瑟夫问题</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Josephus Problem</tag>
      
      <tag>约瑟夫环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+yilia主题中用本地图片设置背景</title>
    <link href="/2020/07/30/set-local-img-as-background-in-yilia/"/>
    <url>/2020/07/30/set-local-img-as-background-in-yilia/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><h2 id="1-准备一张背景图片"><a href="#1-准备一张背景图片" class="headerlink" title="1.准备一张背景图片"></a><strong>1.准备一张背景图片</strong></h2><p>准备一张背景图片，例如：bg.jpg。<br>把它放到themes/yilia/source路径下<br><span id="more"></span></p><h2 id="2-修改maim-0cf68a-css文件"><a href="#2-修改maim-0cf68a-css文件" class="headerlink" title="2.修改maim.0cf68a.css文件"></a><strong>2.修改maim.0cf68a.css文件</strong></h2><p>打开themes/yilia/source/中的maim.0cf68a.css，找到以下代码*<br>（Windows用户按ctrl+F搜索，mac用户按command+F搜索）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#eaeaea</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure><h4 id="第一步：取消背景颜色"><a href="#第一步：取消背景颜色" class="headerlink" title="第一步：取消背景颜色"></a>第一步：取消背景颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>:<span class="hljs-number">#eaeaea</span>;<br></code></pre></td></tr></table></figure><p>把以上代码改成：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*background:#eaeaea;*/</span><br></code></pre></td></tr></table></figure><br>修改后为：</p><h2 id><a href="#" class="headerlink" title></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-comment">/*background:#eaeaea;*/</span><span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure></h2><h4 id="第二步：加入背景图片"><a href="#第二步：加入背景图片" class="headerlink" title="第二步：加入背景图片"></a>第二步：加入背景图片</h4><p>把以下代码加到position前面**<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;bg.jpg&quot;</span>);<br></code></pre></td></tr></table></figure><br>(bg.jpg是你放到themes/yilia/source路径下的图片)</p><p>修改后为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;bg.jpg&quot;</span>);<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-comment">/*background:#eaeaea;*/</span><span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure></p><h2 id="3-Hexo操作"><a href="#3-Hexo操作" class="headerlink" title="3.Hexo操作"></a><strong>3.Hexo操作</strong></h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a><strong>4.注意</strong></h2><p>用此方法设置的背景图片是以平铺的效果展示在背景上<br>maim.0cf68a.css文件名称可能不同，找到maim.xxxx.css以.css后缀结尾的文件即可<br>我试过网上好多换背景的方法，但是我都没有成功，此方法是我不断尝试出来的，可能有点不足，会持续更新。</p><hr><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>yilia Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>yilia</tag>
      
      <tag>背景</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章 “Hello UltraFisher”</title>
    <link href="/2020/07/29/hello-ultrafisher/"/>
    <url>/2020/07/29/hello-ultrafisher/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><h2 id="1-blog介绍"><a href="#1-blog介绍" class="headerlink" title="1.blog介绍"></a><strong>1.blog介绍</strong></h2><p>本blog由Mike_Zhang搭建，采用Hexo框架，现使用yilia主题，我会不断完善和维护此blog。本blog旨在分享我专业Computer Engineering有关学习经验和知识，亦会分享一点生活。欢迎大家在文章下面评论或者点击头像下方邮箱图标发送邮件联系我，希望和你一起进步，谢谢。</p><h2 id="2-起名活动"><a href="#2-起名活动" class="headerlink" title="2.起名活动"></a><strong>2.起名活动</strong></h2><p>本blog现英文名为UltraFisher，但是它还没有一个中文名字，欢迎大家在下面评论区留言，为UltraFisher取一个名字吧！</p><h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><p>分享一个视频</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=201033992&bvid=BV1dz411i75o&cid=203132924&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><em>*视频转自我的 b站: PhysicsPhysics</em></p><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/vlog_ending_hor_3.0.mp4?versionId=CAEQFxiBgICZgq.eyBciIGZjODlmNzAyZjQwZjQ5Mzc5ZjRlMjI1NDRhM2U1M2Rl">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/vlog_ending_hor_3.0.mp4?versionId=CAEQFxiBgICZgq.eyBciIGZjODlmNzAyZjQwZjQ5Mzc5ZjRlMjI1NDRhM2U1M2Rl" type="video/mp4">      </video><hr><p><strong><em>Made by Mike_Zhang 更多内容 敬请期待</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Blog Development</category>
      
      <category>yilia Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>第一篇</tag>
      
      <tag>yilia</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
