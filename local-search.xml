<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多米诺配对问题 Domino Matching with Python</title>
    <link href="/2021/11/04/domino-matching/"/>
    <url>/2021/11/04/domino-matching/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2020/08/05/josephus-problem/" target="_blank" rel="noopener">约瑟夫问题的高效解决方法 Josephus Problem with Python</a><br><a href="https://ultrafish.cn/plus/files/josephus_problem.html" target="_blank" rel="noopener">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a><br><a href="https://ultrafish.cn/2021/11/04/domino-matching/" target="_blank" rel="noopener">多米诺配对问题 Domino Matching with Python</a></p></blockquote><hr><h3 id="1-Preview"><a href="#1-Preview" class="headerlink" title="1. Preview"></a>1. Preview</h3><p><strong>Domino Matching(多米诺配对)</strong> 问题来自于我的一门名为 <em>Computational Thinking and Problem Solving (计算思维和问题解决 )</em> 的课，主要培养我们的计算思维。<br><a id="more"></a></p><center><img src="/2021/11/04/domino-matching/1.png" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>情景：</p><blockquote><p>如上图所示，有四块多米诺骨牌（1～4），每块都有<strong>上和下两部分组成</strong>，上下两部分的成分是相同的（同为字母、同为数字…），每块多米诺骨牌都<strong>存在无数块</strong>。</p></blockquote><p>问题：</p><blockquote><p>从提供的一组多米诺骨牌（如上图中的4块）中选取多米诺骨牌，并将它们<strong>水平（如麻将般）组合</strong>起来，<strong>可重复选取</strong>，要求最后的<strong>组合体</strong>的<strong>上面部分和下面部分相同</strong>。问，此组多米诺骨牌能否组成要求的组合体，若能，组合的顺序如何？</p></blockquote><p>示例：</p><center><img src="/2021/11/04/domino-matching/2.png" srcset="/img/loading.gif" lazyload width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌配对体 Matched Domino</div></center><hr><p>示例：</p><center><img src="/2021/11/04/domino-matching/7.png" srcset="/img/loading.gif" lazyload width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌配对体 Matched Domino</div></center><hr><h3 id="2-Computational-Thinking"><a href="#2-Computational-Thinking" class="headerlink" title="2. Computational Thinking"></a>2. Computational Thinking</h3><p>我们可能会对每一种组合进行尝试，但在此过程中会有一些影响组合决定的条件。</p><h4 id="2-1-Two-Conditions"><a href="#2-1-Two-Conditions" class="headerlink" title="2.1 Two Conditions"></a>2.1 Two Conditions</h4><p>当<strong>尝试</strong>把下一个多米诺骨牌连接到现有的组合体时，即将产生的新组合体会有<strong>两个检查条件</strong>：</p><blockquote><ol><li>其是否为<strong>完全</strong>配对体(Matched Domino)，也就是最后我们希望得到的配对体。</li><li>其是否为<strong>部分</strong>配对体(Partially Matched Domino)，检查将其添加到组合体后，此时的组合体能否有成为配对体的可能。</li></ol></blockquote><p>例如：</p><center><img src="/2021/11/04/domino-matching/3.png" srcset="/img/loading.gif" lazyload width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">完全配对体 Matched Domino</div></center><center><img src="/2021/11/04/domino-matching/41.png" srcset="/img/loading.gif" lazyload width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">部分配对体 Partially Matched Domino</div></center><center><img src="/2021/11/04/domino-matching/6.png" srcset="/img/loading.gif" lazyload width="90%" height="90%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">非部分配对体 Non-Partially Matched Domino<br>(非完全配对体 Non-Matched Domino)</div></center><hr><blockquote><p>在第一个例子中，若将[21,1]多米诺骨牌连接到原有组合体后，使原有组合体变成<strong>完全配对体 (Matched Domino)</strong>，因此[21,1]多米诺骨牌为下一个连接的选择，并且其为最后一块多米诺骨牌。</p><p>在第二个例子中，若将[2,1]多米诺骨牌连接到原有组合体后，会使原有组合体变成<strong>部分配对体 (Partially Matched Domino)</strong>，因此[2,1]多米诺骨牌可以作为下一个连接的选择。</p><p>在第三个例子中，若将[12,1]多米诺骨牌连接到原有组合体后，会使原有组合体变成<strong>非部分配对体 (Non-Partially Matched Domino)</strong>，因此[12,1]多米诺骨牌不能作为下一个连接的选择。</p></blockquote><p>通过这两个检查条件，可以判断哪些多米诺骨牌可以成为下一个连接的选择。</p><hr><h4 id="2-2-Starting-Domino"><a href="#2-2-Starting-Domino" class="headerlink" title="2.2 Starting Domino"></a>2.2 Starting Domino</h4><p>万事开头难。<br>上面明确了选择多米诺骨牌的中间过程，但是还需要确定第一块多米诺骨牌的选择。</p><p>可以明确的是，最后的组合体上下两部分一定是相同的。因此，第一块多米诺骨牌的上下两部分肯定是部分相同的。也就是说第一块多米诺骨牌的“组合体”肯定是<strong>部分配对体 (Partially Matched Domino)</strong>。</p><p>例如：</p><center><img src="/2021/11/04/domino-matching/1.png" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>上图所示的一组多米诺骨牌中，只有3号是<strong>部分配对体 (Partially Matched Domino)</strong>，因此只有其可以作为第一块多米诺骨牌。</p><hr><center><img src="/2021/11/04/domino-matching/71.png" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">多米诺骨牌 Dominos</div></center><p>上图所示的一组多米诺骨牌中，只有1号是<strong>部分配对体 (Partially Matched Domino)</strong>，因此只有其可以作为第一块多米诺骨牌。</p><hr><h4 id="4-3-Process"><a href="#4-3-Process" class="headerlink" title="4.3 Process"></a>4.3 Process</h4><p>根据以上思考，可以产生对此问题的处理步骤：</p><blockquote><ol><li>找到<strong>第一块多米诺骨牌</strong>；</li><li>若找不到能作为第一块的多米诺骨牌，则这一组多米诺骨牌不能组成组合体，程序结束；</li><li>向现有组合体连接任意一块多米诺骨牌；</li><li>若其可以组成<strong>完全配对体 (Matched Domino)</strong>，则<strong>完成配对</strong>，得到最后的组合体，程序结束；</li><li>若其可以组成<strong>部分配对体 (Partially Matched Domino)</strong>，则<strong>重复步骤</strong>2；</li><li>若其可以组成<strong>非部分配对体 (Non-Partially Matched Domino)</strong>，则将其<strong>移出</strong>现有组合体，并<strong>重复步骤2</strong>，尝试<strong>不同</strong>的多米诺骨牌；</li><li>若任何一块多米诺骨牌都不能连接到第一块多米诺骨牌后，则程序结束。</li></ol></blockquote><hr><h3 id="3-Problem-Python-Code"><a href="#3-Problem-Python-Code" class="headerlink" title="3. Problem Python Code"></a>3. Problem Python Code</h3><p>以下为多米诺配对问题 (Domino Matching) 的 Python 解决方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Made by Mike_Zhang</span><br><span class="hljs-comment"># Domino Matching</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatchedDomino</span><span class="hljs-params">(inDomino)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    function to check whether this Domino is matched</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: Domino to check</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - True: it is matched</span><br><span class="hljs-string">        - False : it is NOT matched</span><br><span class="hljs-string">    """</span><br>    upperList = []<br>    lowerList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDomino:<br>        upperList.append(d[<span class="hljs-number">0</span>])<br>        lowerList.append(d[<span class="hljs-number">1</span>])<br>    upper = <span class="hljs-string">""</span>.join(upperList)<br>    lower = <span class="hljs-string">""</span>.join(lowerList)<br>    <span class="hljs-keyword">if</span> (len(upper)==len(lower)):<br>        <span class="hljs-keyword">if</span> (upper == lower):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isPartialMatched</span><span class="hljs-params">(inDomino)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    function to check whether a part of this Domino is matched, part refers to the longest part of a Domino having same lenth of upper half and lower half part</span><br><span class="hljs-string">    e.g., [["a","ab"],["b","ca"]] is Partially Matched, [["a","ab"],["b","ca"],["ca","a"],["abc","c"]] is NOT Partially Matched</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: Domino to check</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    return: </span><br><span class="hljs-string">        - mark:</span><br><span class="hljs-string">            - True: Partially Matched</span><br><span class="hljs-string">            - False: NOT Partially Matched</span><br><span class="hljs-string">    """</span><br>    upperList = []<br>    lowerList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDomino:<br>        upperList.append(d[<span class="hljs-number">0</span>])<br>        lowerList.append(d[<span class="hljs-number">1</span>])<br>    upper = <span class="hljs-string">""</span>.join(upperList)<br>    lower = <span class="hljs-string">""</span>.join(lowerList)<br>    i = min(len(upper),len(lower))<span class="hljs-number">-1</span><br>    mark = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span>(mark == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> i &gt;= <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">if</span> (upper[i] != lower[i]):<br>            mark = <span class="hljs-literal">False</span><br>        i=i<span class="hljs-number">-1</span><br>    <span class="hljs-keyword">return</span> mark<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getStartDominoList</span><span class="hljs-params">(inDominoList)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    function to get a list of Dominos that each one is partially matched Domino</span><br><span class="hljs-string">    e.g. getStartDominoList([["010","0"],["111","000"],["001","0101"],["11","10110"]]) = [["010","0"]]</span><br><span class="hljs-string">    getStartDominoList([["b","ca"],["abc","c"],["a","ab"],["ca","a"]]) = [["a","ab"]]</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    the first Domino in a matched Domino must be selected from that list of Dominos</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDominoList: a list of Dominos to check</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - a list of required Dominos</span><br><span class="hljs-string">    """</span><br>    resultList = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> inDominoList:<br>        <span class="hljs-keyword">if</span> (isPartialMatched([d])):<br>            resultList.append(d)<br>    <span class="hljs-keyword">return</span> resultList<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isNextDominoValid</span><span class="hljs-params">(inDomino,inNext,Dominos)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    the CORE function </span><br><span class="hljs-string">    to recursively check whether next Domino can generate a matched Domino after appending to the original Domino,</span><br><span class="hljs-string">    and finally modify the original Domino to a matched Domino, if can generate.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    parameter:</span><br><span class="hljs-string">        - inDomino: the original Domino</span><br><span class="hljs-string">        - inNext: the next Domino </span><br><span class="hljs-string">        - Dominos: all given Dominos</span><br><span class="hljs-string">    return:</span><br><span class="hljs-string">        - flag: </span><br><span class="hljs-string">            - True: can generate a matched Domino</span><br><span class="hljs-string">            - False: can NOT generate a matched Domino</span><br><span class="hljs-string">    """</span><br>    flag = <span class="hljs-literal">False</span><br>    inDomino.append(inNext)<br>    <span class="hljs-keyword">if</span> (isMatchedDomino(inDomino) == <span class="hljs-literal">True</span>):<br>        flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> (isPartialMatched(inDomino) == <span class="hljs-literal">False</span>):<br>        flag = <span class="hljs-literal">False</span><br>        inDomino.pop()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> Dominos:<br>            <span class="hljs-keyword">if</span> (isNextDominoValid(inDomino,d,Dominos)):<br>                flag = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    Dominos = [[<span class="hljs-string">"b"</span>,<span class="hljs-string">"ca"</span>],[<span class="hljs-string">"abc"</span>,<span class="hljs-string">"c"</span>],[<span class="hljs-string">"a"</span>,<span class="hljs-string">"ab"</span>],[<span class="hljs-string">"ca"</span>,<span class="hljs-string">"a"</span>]]<br>    <span class="hljs-comment">#Dominos = [["010","0"],["111","000"],["001","0101"],["11","10110"]]</span><br>    <span class="hljs-comment">#Dominos = [["001","00"],["0","100"]]</span><br><br>    flag = <span class="hljs-literal">False</span><br>    resultDominos = list()<br>    startDominoList = getStartDominoList(Dominos)<br><br>    <span class="hljs-keyword">if</span> (len(startDominoList) == <span class="hljs-number">0</span>):<br>        flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> startDomino <span class="hljs-keyword">in</span> startDominoList:<br>            tmpList = list()<br>            tmpList.append(startDomino)<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> Dominos:<br>                <span class="hljs-keyword">if</span> (isNextDominoValid(tmpList,d,Dominos)):<br>                    resultDominos = tmpList<br>                    flag = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">True</span>):<br>        print(<span class="hljs-string">"Yes, exist a solution:"</span>)<br>        print(resultDominos)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"No, not exist any solutions"</span>)<br><br>main()<br><span class="hljs-comment"># Domino Matching</span><br><span class="hljs-comment"># Made by Mike_Zhang</span><br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>解决多米诺配对问题的方法有很多种，我的方法并非最优解，欢迎大家尝试。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Domino Matching</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Domino Matching</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础Java- String Array Wrapper &amp; Enum Type</title>
    <link href="/2021/10/31/Java-learning-4/"/>
    <url>/2021/10/31/Java-learning-4/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><a id="more"></a><h3 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a>1. String</h3><hr><h3 id="2-Array"><a href="#2-Array" class="headerlink" title="2. Array"></a>2. Array</h3><hr><h3 id="3-Wrapper"><a href="#3-Wrapper" class="headerlink" title="3. Wrapper"></a>3. Wrapper</h3><hr><h3 id="4-Enum-Type"><a href="#4-Enum-Type" class="headerlink" title="4. Enum Type"></a>4. Enum Type</h3><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019.</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
      <category>Strings Arrays Wrappers &amp; Enum Types</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础Java异常处理 Basic Exception handling in Java</title>
    <link href="/2021/10/08/Java-learning-3/"/>
    <url>/2021/10/08/Java-learning-3/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><a id="more"></a><h3 id="1-Exception"><a href="#1-Exception" class="headerlink" title="1. Exception"></a>1. Exception</h3><p>在运行程序的时候，经常会遇到很多异常(Exception)被抛出，使得程序不受我们的控制，因此在设计代码的时候会经常考虑很多情况，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (object != <span class="hljs-keyword">null</span>)&#123;<br>    object.doSth();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>)&#123;<br>    System.out.println(<span class="hljs-string">"Error!"</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是很多时候我们并不能考虑到所有的异常情况，或者不能表达出这种异常，这会导致某个步骤因为异常而没有完成。</p><p>当一个成员方法抛出异常时，此方法不会返回任何值，只会抛出一个包含了异常信息的对象，并且此方法会立即终止。调用次方法的代码不会继续执行，而会用一种异常处理机制来寻找能够处理此异常的异常处理方法。</p><p>此时程序应该做：</p><blockquote><ol><li>使程序回到一个安全的状态并让用户执行其他程序；或者，</li><li>使用户保存所有步骤并且温柔地终止次程序。</li></ol></blockquote><p>因此需要有一种异常处理方法来把产生异常的地方转移到某一能过处理此异常的异常处理器。</p><hr><h4 id="1-2-Exception-classification"><a href="#1-2-Exception-classification" class="headerlink" title="1.2 Exception classification"></a>1.2 Exception classification</h4><p>异常(Exception)对象所属的类是从<code>Throwable</code>类继承来的，因此除了Java所定义的异常外，用户还可以通过继承来定义自己的异常。<br>以下为<code>Throwable</code>类的层级关系图：</p><center><img src="/2021/10/08/Java-learning-3/1.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Exception hierarchy in Java - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><code>Throwable</code>类有两个子类，<code>Error</code>和<code>Exception</code>。</p><blockquote><ol><li><p><code>Error</code>类描述的是在运行时的内部错误和资源穷尽情况。程序员<strong>不该抛出</strong>这类对象的错误，对应措施很少。</p></li><li><p><code>Exception</code>类也有两个子类，<code>IOException</code>和<code>RuntimeException</code>。<code>RuntimeException</code>的产生是由于程序员<strong>自己在编写代码时产生了错误</strong>。<code>IOException</code>是由于<strong>客观因素</strong>产生的，如I/O的错误。</p><blockquote><p><code>RuntimeException</code>包含：<br>不当的转型；<br>数组的out-of-bounds错误；<br>访问一个空指针(null pointer)等</p><p><code>IOException</code>包括：<br>在EOF(End of file)之后继续读取；<br>打开一个不存在的文件；<br>从一个不存在的类中寻找对象等</p></blockquote></li></ol></blockquote><p>记住：<strong>“如果产生了一个<code>RuntimeException</code>，这就是你的错。”</strong></p><p>Java规定所有从<code>Error</code>类或者<code>RuntimeException</code>类继承来的<code>Exception</code>对象都是<strong>Unchecked exception</strong>。其余的被称为<strong>Checked exception</strong>。</p><p>Java编译器会根据你提供的异常处理器去检查所有的<strong>Checked exception</strong>。</p><hr><h3 id="2-Throwing-exception"><a href="#2-Throwing-exception" class="headerlink" title="2. Throwing exception"></a>2. Throwing exception</h3><h4 id="2-1-Checked-exception-declaration"><a href="#2-1-Checked-exception-declaration" class="headerlink" title="2.1 Checked exception declaration"></a>2.1 Checked exception declaration</h4><p>在Java中，成员方法在监测到其不能处理的情况后可以抛出异常。成员方法不仅仅可以<strong>返回值给编译器</strong>，也可以<strong>给编译器抛出异常</strong>。<br>此类方法语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException</span><br></code></pre></td></tr></table></figure><p>这个方法说明在创建此对象时，不仅仅可以产生一个<code>FileInput</code>对象，也可以在此对象产生错误的时候抛出一个<code>FileNotFoundException</code>异常。如果在创建对象的过程中产生了错误，那次对象不会被初始化，只会抛出一个异常。同时，系统也会去寻找一个能处理<code>FileNotFoundException</code>异常的异常处理器。</p><p>异常会在一下四种情况中被抛出：</p><blockquote><ol><li>引用一个会抛出Checked exception的方法，如上面的<code>FileInput</code>方法；</li><li>当检测到异常时通过<code>throw</code>语句抛出Checked exception；</li><li>在编写程序时产生了错误，如<code>RuntimeException</code>；</li><li>运行程序时的客观环境错误，如JVM的错误。</li></ol></blockquote><p>当遇到到前两点抛出的错误时，必须有相对应的异常处理器去处理这些异常，因为可以抛出异常的方法都是有可能陷入死循环的，必须有相应的处理措施。</p><p>在以上例子中，使用了<code>exception specification</code>去定义了一个可抛出异常的方法，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputClass</span></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException</span>&#123; <br>        <span class="hljs-comment">//exception specification:throws FileNotFoundException</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>当然，一个方法也可能抛出不止一种类型的异常，需要在定义时<strong>列出所有异常类型，并用逗号隔开</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputClass</span></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileInput</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> FileNotFoundException，EOFException</span>&#123; <br>        <span class="hljs-comment">// ...</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，一方法必须声明其所有的可能抛出的Checked exception。Unchecked exception是你不能控制的 (Error) 或者是你应该避免的 (RuntimeExcwption)。如果一个方法没有全部定义出其可能抛出的Checked exception，编译器会报错。</p><hr><h4 id="2-2-Exception-throwing"><a href="#2-2-Exception-throwing" class="headerlink" title="2.2 Exception throwing"></a>2.2 Exception throwing</h4><p>异常声明完成后，需要在方法体中抛出(throw)异常。<br>一般过程为：</p><blockquote><ol><li>寻找合适的异常类型；</li><li>创建此类异常的对象；</li><li>抛出异常对象。</li></ol></blockquote><p>首先需要寻找并定义异常的类型，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> EOFException();<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> EOFException();<br><span class="hljs-keyword">throw</span> e;<br></code></pre></td></tr></table></figure><p>再抛出异常，<br>结合到例子中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">String <span class="hljs-title">readData</span><span class="hljs-params">(Scanner in)</span> <span class="hljs-keyword">throws</span> EOFException</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//. . .</span><br>    <span class="hljs-keyword">while</span> (. . .)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!in.hasNext()) <span class="hljs-comment">// EOF encountered</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n &lt; len)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> EOFException();<br>        &#125;<br>        <span class="hljs-comment">//. . .</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>EOFException()</code>同时有一个有参构造方法，参数为字符串类型，可以更好的的描述此异常的含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String i = <span class="hljs-string">"This is an End of file Exception!"</span>;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> EOFException(i);<br></code></pre></td></tr></table></figure><hr><h4 id="2-3-Create-exception-class"><a href="#2-3-Create-exception-class" class="headerlink" title="2.3 Create exception class"></a>2.3 Create exception class</h4><p>当遇到的异常类型并不在标准异常类中时，可以创建我们自己的异常类。只需要从父类<code>Exception</code>或者其子类<strong>继承</strong>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileChildException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EOFException</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EOFException</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EOFException</span><span class="hljs-params">(String i)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">String <span class="hljs-title">readData</span><span class="hljs-params">(Scanner in)</span> <span class="hljs-keyword">throws</span> FileChildException</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//. . .</span><br>    <span class="hljs-keyword">while</span> (. . .)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!in.hasNext()) <span class="hljs-comment">// EOF encountered</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n &lt; len)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FileChildException();<br>        &#125;<br>        <span class="hljs-comment">//. . .</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FileChildException</code>子类一般会有一个<strong>默认的无参构造方法</strong>，以及一个<strong>有参的构造方法</strong>以表明此异常的具体信息。父类<code>Throwable</code>的方法<code>toString()</code>可以返回前面定义在有参构造方法里的信息。</p><hr><h3 id="3-Catching-exception"><a href="#3-Catching-exception" class="headerlink" title="3. Catching exception"></a>3. Catching exception</h3><p>如果一个异常被抛出后没有对应的处理措施，则包含其的程序就回被终止，并且在终端输出异常的类型以及stack trace。</p><p>为获取一个异常并提供异常处理方法，可以使用try-catch语句块，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果try语句块中抛出了定义在catch中类型的异常，则：</p><blockquote><ol><li>跳过try语句块中剩余的语句；</li><li>执行catch语句块中的语句。</li></ol></blockquote><p>如果try语句块中没有抛出任何异常，则catch语句块就会被跳过。<br>如果一个方法中的try语句块抛出了一个没有定义在catch中的异常，则立即跳出此方法，不会执行后面的语句。</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(String filename)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> in = <span class="hljs-keyword">new</span> FileInputStream(filename);<br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            process input<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException exception)<br>    &#123;<br>        exception.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>read()</code>方法可能会抛出<code>IOException</code>异常，一旦异常被抛出，程序就回跳过其后的<code>while</code>循环，直接进入<code>catch</code>中的语句，最后输出<code>StackTrace</code>.</p><p>同时我们也可以直接把异常声明在方法头中，一旦方法体中有异常，直接让此方法抛出异常，并不用去catch，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">var</span> in = <span class="hljs-keyword">new</span> FileInputStream(filename);<br>    <span class="hljs-keyword">int</span> b;<br>    <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>)<br>    &#123;<br>        process input<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，<strong>明确该如何处理某一异常</strong>情况下<strong>使用try-catch方法</strong>，<strong>否则</strong>就把异常在方法头中声明，<strong>抛出给方法</strong>。</p><p>注意：</p><blockquote><p>当一子类继承没有抛出异常的父类后，必须在子类方法中抓取所有的<code>check exception</code>，不允许在子类方法的方法头后使用<code>throws</code>关键字声明异常。</p></blockquote><p>也可以抓取多个exception，分开进行异常处理，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(UnknownHostException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以进行结合 (Java7)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-keyword">catch</span>(FileNotFoundException ｜ UnknownHostException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>    <span class="hljs-comment">// handler of Exception e</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是使用这种结构的异常类之间不能有继承关系。</p><p>在抓取到异常后，也可以受用异常类的方法去获取异常对象的信息：</p><p>得到异常对象的更多信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">e.getMessage();<br></code></pre></td></tr></table></figure><br>得到具体的错误信息，或者异常对象的所属类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">e.getClass.getName();<br></code></pre></td></tr></table></figure></p><p><code>retry</code>语句可以使<code>try</code>语句块再次运行一遍，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;      <span class="hljs-comment">// pseudo code</span><br>    <span class="hljs-keyword">boolean</span> hasFailed = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(!hasFailed)&#123;<br>            <span class="hljs-comment">// do the normal thing, which may trigger</span><br>            <span class="hljs-comment">// an exception </span><br>        &#125;      <br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// do something safe </span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(ExceptionType et)&#123;<br>        <span class="hljs-comment">// log exception</span><br>        hasFailed = <span class="hljs-keyword">true</span>;<br>        retry; <span class="hljs-comment">// resumes from the beginning of try &#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="3-1-NDECC"><a href="#3-1-NDECC" class="headerlink" title="3.1 NDECC"></a>3.1 NDECC</h4><p>当一个异常被抛出，程序就会寻找<strong>能够</strong>处理此异常的<strong>nearest dynamically enclosing catch clause(NDECC)</strong>，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;g();&#125;<br>    <span class="hljs-keyword">catch</span>(ET3 e)&#123; ... &#125; <span class="hljs-comment">// c1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;f();&#125;<br>    <span class="hljs-keyword">catch</span>(ET2 e)&#123; ... &#125; <span class="hljs-comment">// c2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">try</span>&#123;statement;&#125;<br>    <span class="hljs-keyword">catch</span>(ET1 e)&#123; ... &#125; <span class="hljs-comment">// c3</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>讨论以下种情况：</p><blockquote><ol><li><code>statement</code>语句抛出了<code>ET1</code>类的异常，并且处于c3的语句能够处理此异常，则进行处理；</li><li><code>statement</code>语句抛出了<code>ET2</code>类的异常，并且处于c3的语句不能够处理此异常，则处于c2的语句进行处理；</li><li><code>statement</code>语句抛出了<code>ET3</code>类的异常，并且处于c3的语句不能够处理此异常，则处于c1的语句进行处理；</li></ol></blockquote><p>注意：</p><blockquote><p>若<code>ET1</code>类是<code>ET</code>类的子类，则<code>ET</code>类的<code>catch clause</code>可以处理<code>ET1</code>类的异常。</p></blockquote><h4 id="3-2-Rethrowing-excepltion"><a href="#3-2-Rethrowing-excepltion" class="headerlink" title="3.2 Rethrowing excepltion"></a>3.2 Rethrowing excepltion</h4><p>重新抛出异常通常有两种情况：<br>1.改变异常的类型；</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>    access the database<br>&#125; <br><span class="hljs-keyword">catch</span> (SQLException e)<br>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(<span class="hljs-string">"database error: "</span> + e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>2.只记录异常，不改变异常的类型，再次抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>    access the database<br>&#125; <br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>    logger.log(level, message, e);<br>    <span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4-The-finally-statement"><a href="#4-The-finally-statement" class="headerlink" title="4. The finally statement"></a>4. The finally statement</h3><p>当一个方法抛出异常后，它就回终止运行之后的代码并跳出此方法。但有时需要此方法运行完成，此时就需要用到<code>finally</code>关键字。</p><p>不管有无异常抛出，<code>finally</code>语句块中的内容都会被执行。</p><p>看以下例子，来自C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019（优秀的Java参考书，十分推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> in = <span class="hljs-keyword">new</span> FileInputStream(. . .);<br><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-comment">// code that might throw exceptions</span><br>    <span class="hljs-comment">// 2</span><br>&#125; <br><span class="hljs-keyword">catch</span> (IOException e)<br>&#123;<br>    <span class="hljs-comment">// 3</span><br>    <span class="hljs-comment">// show error message</span><br>    <span class="hljs-comment">// 4</span><br>&#125; <br><span class="hljs-keyword">finally</span><br>&#123;<br>    <span class="hljs-comment">// 5</span><br>    in.close();<br>&#125; <br><span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>讨论以下几种情况：</p><blockquote><ol><li><strong><em>没有</em>抛出异常</strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，再执行<code>finally</code>语句块中的代码，最后执行<code>finally</code>语句块后的第一行代码。顺序为<strong>1，2，5，6</strong>；</p></blockquote></li><li><strong><em>抛出</em>异常并被catch语句 <em>获取</em></strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，直到抛出异常的那行代码，其后的代码都会被跳过。再执行<code>catch</code>语句块中的代码，最后执行<code>finally</code>代码块中的代码。之后再分两类情况：</p><blockquote><p><strong>catch代码块中<em>没有</em> 异常抛出</strong>：<br>在上述过程后，最后执行<code>finally</code>语句块后的第一行代码。顺序为<strong>1，3，4，5，6</strong>；</p><p><strong>catch代码块中<em>有</em> 异常抛出</strong>：<br>catch语句块中只会运行到抛出异常的那行代码，之后的代码会被跳过。此异常被抛出后，会抛出至引用此方法的方法。顺序为<strong>1，3，5</strong>；</p></blockquote></blockquote></li><li><strong>抛出异常并<em>没有</em> 被catch语句获取</strong>：<blockquote><p>首先执行<code>try</code>语句块中的代码，直到抛出异常的那行代码，其后的代码都会被跳过。再执行<code>finally</code>代码块中的代码。异常被抛出至引用此方法的方法。 顺序为<strong>1，5</strong>。</p></blockquote></li></ol></blockquote><hr><h3 id="6-Standard-exception-in-Java"><a href="#6-Standard-exception-in-Java" class="headerlink" title="6. Standard exception in Java"></a>6. Standard exception in Java</h3><p>参考：<br><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html" target="_blank" rel="noopener">Exception (Java SE 11 &amp; JDK 11) - docs.oracle.com</a></p><iframe height="850" width="100%" src="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html" frameborder="0" allowfullscreen> </iframe><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.<br>“Java API Reference,” <em>docs.oracle.com</em>. <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html</a> (accessed Oct. 08, 2021).</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本章只介绍了Java异常抛出的基本内容。如Rethrowing and Chaining Exceptions、try-with-Resources Statement、Stack Trace等内容会持续更新。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
      <category>异常处理基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程之接口 Java OOP Interface</title>
    <link href="/2021/10/05/Java-oop-interface/"/>
    <url>/2021/10/05/Java-oop-interface/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792" target="_blank" rel="noopener">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed!"</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Equilateral Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Triangle x)</span></span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewRightTriangle);; <span class="hljs-comment">// 打印直角三角形</span><br><br>        Triangle aNewIsoscelesRightTriangle = <span class="hljs-keyword">new</span> IsoscelesRightTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        Triangle aNewEquilateralTriangle = <span class="hljs-keyword">new</span> EquilateralTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例是在在之前文章<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a>与<a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a>中提到了，运用了OOP的两大特性。</p><p>看以下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Shape"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Shape printed."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Rectangle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Rectangle printed."</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Circle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Circle printed."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Triangle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintAbsShape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Shape s)</span></span>&#123;<br>        s.print();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> Rectangle());<br>        PrintOut(<span class="hljs-keyword">new</span> Triangle());<br>        PrintOut(<span class="hljs-keyword">new</span> Circle());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是仔细观察发现，<strong>第一个例子中的父类<code>Triangle</code>与第二个例子中的父类<code>Shape</code>中的方法始终没有被引用</strong>，显得十分多余。因为此<code>Shape</code>父类本来就是提供一个<strong>入口</strong>，并让其子类继承并对其方法进行重写等操作。<br>因此父类中的方法不需要被定义的十分具象，只需要告诉衍生类方法的大概模样就足够了，因此父类可以变的 <strong>抽象(abstract)</strong> 或者只成为一个连通子类的 <strong>接口(interface)</strong>。</p><hr><h3 id="Abstract-class-amp-method"><a href="#Abstract-class-amp-method" class="headerlink" title="Abstract class &amp; method"></a>Abstract class &amp; method</h3><p>在Java中，通过修饰符<code>abstract</code>来修饰一个方法为<strong>抽象的</strong>。此修饰的方法是<strong>残缺的，不完整的</strong>，<strong>只包含方法的声明并没有方法体</strong>，语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>把<code>abstract</code>应用到上面的例子中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// abstract 类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Rectangle"</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Circle"</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Triangle"</span>); <span class="hljs-comment">// 重写父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Right Triangle"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Isosceles Triangle"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Equilateral Triangle"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Equilateral Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintAbsShape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Shape s)</span></span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> RightTriangle());<br>        PrintOut(<span class="hljs-keyword">new</span> IsoscelesTriangle());<br>        PrintOut(<span class="hljs-keyword">new</span> EquilateralTriangle());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>包含<code>abstract</code>方法的类被称为<code>abstract</code>类，此类必须<strong>被修饰为<code>abstract</code></strong>。<code>abstract</code>类允许在其类中创建<strong>0个，一个或者多个</strong><code>abstract</code>方法，</p></li><li><p><code>abstract</code>类中的<strong>所有<code>abstract</code>方法需要被其子类重写</strong>以完成方法体。当某一子类继承<code>abstract</code>父类后，如要使用此子类创造对象，必须完成子类中所有从父类<code>abstract</code>方法继承来方法的定义。<strong><code>static</code>方法、<code>private</code>实例方法、构造方法不能被重写</strong></p><ul><li>若<strong>不对父类中所有的<code>abstract</code>方法进行重写</strong>，则此子类也包含了从父类继承的<code>abstract</code>方法，<strong>则其也是<code>abstract</code>类</strong>，也需要修饰为<code>abstract</code>。</li></ul></li><li><p><strong>不允许直接用abstract类来创建实例</strong>，只可以来定义类型。以下不允许：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Shape aShape = <span class="hljs-keyword">new</span> Shape(); <span class="hljs-comment">// Error!</span><br></code></pre></td></tr></table></figure></li><li><p>子类<strong>可以重写父类中的非<code>abstract</code>方法</strong>并定义为<code>abstract</code>，可以使此父类中的方法在子类中失效。</p></li><li>一个<code>abstract</code>类的父类可能是非<code>abstract</code>类。</li></ul><hr><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul><li><code>interface</code>把<code>abstract</code>类更进一步的抽象，使这个类变得<strong>完全<code>abstract</code></strong>。</li><li>在此类中只声明<strong>方法名</strong>、<strong>参数列表</strong>和<strong>返回值类型</strong>，<strong>没有方法体</strong>，只提供方法的<strong>形式</strong>，没有定义<strong>方法体</strong>。<ul><li>对于实例成员(Instance members)：<ul><li>不可以定义属性；</li><li>都被<code>public</code>和<code>abstract</code>修饰（隐性修饰，关键字可省略）；</li></ul></li><li>对于静态成员(Static members)：<ul><li>所有属性都被<code>public</code>,<code>static</code>和<code>final</code>修饰（隐性修饰，关键字可省略）；</li><li>所有方法都被<code>public</code>（隐性修饰，关键字可省略），并为非<code>abstract</code>类。</li></ul></li></ul></li><li>任何 <strong>实现(implement)</strong> 此接口的类都会与<code>interface</code>类相似，都会得知能从此接口调用到什么方法，类似于类之间建立了一个协议。</li><li>使用<code>interface</code>时，<strong>用<code>interface</code>关键字</strong>代替原来的<code>class</code>关键字。</li></ul><p><code>interface</code>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">10</span>; <span class="hljs-comment">// public, static and final field</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// public abstract 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// public abstract 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getShapeSuperName</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"Shape"</span>&#125; <span class="hljs-comment">// public static 方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Rectangle"</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Circle"</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// 实现 Shape 接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Triangle"</span>); <span class="hljs-comment">// 实现父类 abstract 方法， 为其添加方法体</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Equilateral Triangle printed"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintShape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Shape s)</span></span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PrintOut(<span class="hljs-keyword">new</span> RightTriangle());<br>        PrintOut(<span class="hljs-keyword">new</span> IsoscelesTriangle());<br>        PrintOut(<span class="hljs-keyword">new</span> EquilateralTriangle());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>当某一类要使用此接口时，也就是说此类要实现(implements)此接口，就需要使用<code>implements</code>关键字，类似于继承。</p><ul><li>此类可以访问父类中constants 和 <code>static</code> 的方法;</li><li>此类通过重写来具化声明在接口中的方法;</li><li>如果没有初始化父类中所有的<code>abstract</code>方法，则此方法需要被定义为<code>abstract</code>。</li></ul></li><li><p>当此类实现接口后，其就变成了一个常规的类，能够被子类继承，如 <code>RightTriangle</code>继承 <code>Triangle</code>等。</p></li><li><p><code>interface</code>中的方法是被隐性修饰为<code>public</code>的。当某类实现此<code>interface</code>时，此类中从<code>interface</code>重写的方法必须被修饰为<code>public</code>，否则会变为默认访问权限，会导致此类被继承后的访问权限变小，产生错误。</p></li><li><p>上面例子main()中发生了upcasting，但是并不用明确到底转型到了哪个<code>Shape</code>，无论是正常的<code>Shape</code>，<code>abstract</code>修饰的<code>Shape</code>还是<code>Shape</code>接口。</p></li><li><p>以上例子中，还有一个定义在<code>interface</code>中的属性<code>int NUM = 10;</code>，此属性都是隐性修饰为<code>static</code>和<code>final</code></p></li></ul><hr><h3 id="Interface-inheritance"><a href="#Interface-inheritance" class="headerlink" title="Interface inheritance"></a>Interface inheritance</h3><h4 id="Combined-interface"><a href="#Combined-interface" class="headerlink" title="Combined interface"></a>Combined interface</h4><ul><li>在继承中，子类每次<strong>只能继承一个</strong>父类，因为父类是一个完整的类，有具体的内存空间联系，同时继承多个类会导致冲突，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassA</span></span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassB</span></span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassAandB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassA</span>, <span class="hljs-title">ClassB</span></span>&#123;...&#125; <span class="hljs-comment">// Error! 不允许</span><br></code></pre></td></tr></table></figure><ul><li>但是一个<code>interface</code>只是一个形式，没有具体的内存空间与之联系，因此<code>interface</code>与继承不同，一个类可以同时实现<strong>多个</strong><code>interface</code>，只需要在<code>implements</code>关键字后列出所有<code>interface</code>名并用逗号隔开。语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InterfaceA</span>, <span class="hljs-title">InterfaceB</span>, <span class="hljs-title">InterfaceC</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Perimeter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Area</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreatShape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span>, <span class="hljs-title">Perimeter</span>, <span class="hljs-title">Area</span></span>&#123; <span class="hljs-comment">// GreatShape类结合了3个接口一起实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Great Shape with Perimeter and Area"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"A Great Shape printed"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Perimeter of A Great Shape"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Area of A Great Shape"</span>);&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreatTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GreatShape</span></span>&#123; <span class="hljs-comment">// 继承父类GreatShape</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Great Triangle with Perimeter and Area"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"A Great Triangle printed"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Perimeter of A Great Triangle"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Area of A Great Triangle"</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintShape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Shape s)</span></span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">(Shape x)</span></span>&#123;<br>        x.name();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintPerimeter</span><span class="hljs-params">(Perimeter x)</span></span>&#123;<br>        x.getPerimeter();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintArea</span><span class="hljs-params">(Area x)</span></span>&#123;<br>        x.getArea();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        GreatTriangle g = <span class="hljs-keyword">new</span> GreatTriangle();<br>        PrintOut(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintName(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintPerimeter(g); <span class="hljs-comment">// 可看作Perimeter的方法</span><br>        PrintArea(g); <span class="hljs-comment">// 可看作Area的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">A Great Triangle printed<br>Great Triangle with Perimeter and Area<br>Print the Perimeter of A Great Triangle printed<br>Print the Area of A Great Triangle printed<br></code></pre></td></tr></table></figure><ul><li>以上例子中，<code>PrintShape</code>类中有4个方法，分别使用了不同接口当作其方法的参数，在其<code>main()</code>中当一个<code>GreatTriangle</code>对象创建并调用这4个方法时，此对象会upcast到这4个接口，并late binding到相应的方法体。</li></ul><hr><h4 id="Inherited-interface"><a href="#Inherited-interface" class="headerlink" title="Inherited interface"></a>Inherited interface</h4><ul><li>当需要给某个<code>interface</code><strong>添加新的方法</strong>，或者要<strong>结合</strong>多个<code>interface</code>时，可以让某个<code>interface</code>对另一个或多个<code>interface</code>进行继承，这会产生<strong>新的</strong><code>interface</code>。</li></ul><p>应用到上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span></span>&#123; <span class="hljs-comment">// Shape 接口</span><br>    <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract 方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Perimeter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Area</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GreatShapeInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span>, <span class="hljs-title">Perimeter</span>, <span class="hljs-title">Area</span></span>&#123; <span class="hljs-comment">// 继承了3个接口并产生一个新的接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 以下结合了3个接口的4个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">what</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 并添加了新的方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreatTriangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GreatShapeInterface</span></span>&#123; <span class="hljs-comment">// 继承新的接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Great Triangle with Perimeter and Area"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"A Great Triangle printed"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerimeter</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Perimeter of A Great Triangle"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Print the Area of A Great Triangle"</span>);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">what</span><span class="hljs-params">()</span></span>&#123;System.out.println(<span class="hljs-string">"Inherited form several interfaces!"</span>);&#125; <span class="hljs-comment">// 完成新方法的定义</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintShape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Shape s)</span></span>&#123;<br>        s.print(); <span class="hljs-comment">// late binding</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintName</span><span class="hljs-params">(Shape x)</span></span>&#123;<br>        x.name();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintPerimeter</span><span class="hljs-params">(Perimeter x)</span></span>&#123;<br>        x.getPerimeter();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintArea</span><span class="hljs-params">(Area x)</span></span>&#123;<br>        x.getArea();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">What</span><span class="hljs-params">(GreatShapeInterface x)</span></span>&#123;<br>        x.what(); <span class="hljs-comment">// 调用新方法</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        GreatTriangle g = <span class="hljs-keyword">new</span> GreatTriangle();<br>        PrintOut(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintName(g); <span class="hljs-comment">// 可看作Shape的方法</span><br>        PrintPerimeter(g); <span class="hljs-comment">// 可看作Perimeter的方法</span><br>        PrintArea(g); <span class="hljs-comment">// 可看作Area的方法</span><br>        What(g); <span class="hljs-comment">// 可看作GreatShapeInterface的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>当通过继承来结合一些接口时，要注意各个接口中的方法名是否相同，为<strong>增加可读性</strong>以及<strong>减少错误</strong>的产生，最好<strong>避免使用同名的方法</strong>。</p><hr><h3 id="Interface-field"><a href="#Interface-field" class="headerlink" title="Interface field"></a>Interface field</h3><p>定义在接口中的属性都是隐性修饰为<code>static</code>和<code>final</code>，并且是<code>public</code>的。<br>注意定义在接口中的属性必须为<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-1-final-%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">编译时常量 (compile-time constant) 不能是空白常量 (blank final)</a>。<br>此类属性并不是接口的一部分，只是被储存在接口的静态 (static) 内存中。</p><hr><h3 id="Interface-Cloning"><a href="#Interface-Cloning" class="headerlink" title="Interface Cloning"></a>Interface Cloning</h3><h4 id="Original-copy"><a href="#Original-copy" class="headerlink" title="Original copy"></a>Original copy</h4><p>一般对一个基础变量进行复制会进行以下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> int1 = <span class="hljs-number">1</span>;<br>int1 = int2;<br></code></pre></td></tr></table></figure><p>但对一个对象进行复制也进行类似语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">classType object1 = <span class="hljs-keyword">new</span> classType();<br>classType object2 = object1;<br></code></pre></td></tr></table></figure><p>这样会使两个对象指向同一个引用，并不是单独的，改变一个对象的属性会影响到另外一个，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNum)</span></span>&#123;<br>        number = inNum;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyObjectTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Shape s1 = <span class="hljs-keyword">new</span> Shape();<br>        s1.setNumber(<span class="hljs-number">111111</span>);<br>        Shape s2 = s1; <span class="hljs-comment">// 直接复制对象</span><br>        s1.setNumber(<span class="hljs-number">222222</span>); <span class="hljs-comment">// 改变一个对象的属性</span><br>        System.out.printf(<span class="hljs-string">"s1 number: %d\ns2 number: %d\n\n"</span>,s1.getNumber(),s2.getNumber());<br>        System.out.printf(<span class="hljs-string">"s1 == s2? %b"</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 number: <span class="hljs-number">222222</span><br>s2 number: <span class="hljs-number">222222</span> <span class="hljs-comment">// 收到另一对象的影响，一起改变</span><br><br>s1 == s2? <span class="hljs-keyword">true</span> <span class="hljs-comment">// 实际上指向同一引用，为同一对象</span><br></code></pre></td></tr></table></figure><hr><h4 id="Shallow-Clone"><a href="#Shallow-Clone" class="headerlink" title="Shallow Clone"></a>Shallow Clone</h4><p>为了解决上面所说的问题，就需要用到<code>clone</code>方法，可以使复制的对象一开始有和被复制的对象有相同的成员，但之后也可以被<strong>单独对待</strong>，有自己的属性。</p><center><img src="/2021/10/05/Java-oop-interface/1.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">A shallow copy - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><code>clone</code>方法是在<code>Object</code>类中被修饰为<code>protected</code>的方法。不能随意的调用。只能进行属性间的复制，也就是说只能对对象中为基础类型（primitive type）的属性进行复制。若对一个引用类型的属性或对象进行复制，则只会使克隆的对象指向相同的引用，和被克隆的对象有相同的信息。<br>因此clone分为<strong>Shallow Clone(浅克隆)和Deep Clone(深克隆)</strong>。</p><hr><p><strong>Shallow Clone</strong>只会克隆基础类型的属性，不会克隆引用类型的属性。</p><center><img src="/2021/10/05/Java-oop-interface/2.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">A shallow copy - C. S. Horstmann, Core Java. Boston: Pearson, 2019.</div></center><p><strong>Shallow Clone步骤：</strong></p><ol><li>实现<code>Cloneable</code>接口，否则在非<code>Cloneable</code>对象调用<code>clone()</code>方法会抛出<code>CloneNotSupportedException</code>异常；</li><li>重写<code>clone()</code>方法并修饰为<code>public</code>，添加异常处理以处理<code>CloneNotSupportedException</code>异常。</li></ol><p>应用到前面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNum)</span></span>&#123;<br>        number = inNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        Shape temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-keyword">super</span>.clone();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShallowCloneTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Shape s1 = <span class="hljs-keyword">new</span> Shape();<br>        s1.setNumber(<span class="hljs-number">11111</span>);<br>        s1.setName(<span class="hljs-string">"shape1&amp;2"</span>);<br>        Shape s2 = (Shape)s1.clone();<br>        System.out.printf(<span class="hljs-string">"s1 number: %d, s2 number: %d\ns1 name: %s, s2 name: %s\n\n"</span>,s1.getNumber(),s2.getNumber(),s1.getName(),s2.getName());<br><br>        s1.setNumber(<span class="hljs-number">22222</span>);<br>        s1.setName(<span class="hljs-string">"s1 Updated"</span>);<br>        System.out.printf(<span class="hljs-string">"s1 number: %d, s2 number: %d\ns1 name: %s, s2 name: %s\n\n"</span>,s1.getNumber(),s2.getNumber(),s1.getName(),s2.getName());<br><br>        System.out.printf(<span class="hljs-string">"s1 == s2? %b"</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 number: <span class="hljs-number">11111</span>, s2 number: <span class="hljs-number">11111</span><br>s1 name: shape1&amp;<span class="hljs-number">2</span>, s2 name: shape1&amp;<span class="hljs-number">2</span><br><br>s1 number: <span class="hljs-number">22222</span>, s2 number: <span class="hljs-number">11111</span> <span class="hljs-comment">// s1改变 不会影响到克隆的s2</span><br>s1 name: s1 Updated, s2 name: shape1&amp;<span class="hljs-number">2</span><br><br>s1 == s2? <span class="hljs-keyword">false</span> <span class="hljs-comment">// 被克隆的对象与克隆对象指向不同的引用</span><br></code></pre></td></tr></table></figure><p>接下来加入一个新的类<code>Position</code>，并当作Shape类的一个属性，进行Shallow Clone：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Position pos; <span class="hljs-comment">// a reference type field</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNum)</span></span>&#123;<br>        number = inNum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String n)</span></span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPos</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> pos.getPosition();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPos</span><span class="hljs-params">(Position inPos)</span></span>&#123;<br>        pos = inPos;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        Shape temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-keyword">super</span>.clone(); <span class="hljs-comment">// shallow clone ONLY</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Position</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPosition</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"("</span>+x+<span class="hljs-string">","</span>+y+<span class="hljs-string">")"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> InX, <span class="hljs-keyword">int</span> Iny)</span></span>&#123;<br>        x = InX;<br>        y = Iny;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Position aPos = <span class="hljs-keyword">new</span> Position();<br>        aPos.setPosition(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        Shape s1 = <span class="hljs-keyword">new</span> Shape();<br>        s1.setPos(aPos);<br>        Shape s2 = (Shape)s1.clone(); <span class="hljs-comment">// clone</span><br>        System.out.printf(<span class="hljs-string">"s1 position: %s, s2 position: %s\n\n"</span>,s1.getPos(),s2.getPos());<br><br>        aPos.setPosition(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        s1.setPos(aPos); <span class="hljs-comment">// 改变s1的 reference type file value</span><br>        System.out.printf(<span class="hljs-string">"s1 position: %s, s2 position: %s\n\n"</span>,s1.getPos(),s2.getPos());<br><br>        System.out.printf(<span class="hljs-string">"s1 == s2? %b"</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>s1 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), s2 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">// 发现s1和s2的reference type filed - pos同时改变了</span><br><br>s1 == s2? <span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>以上例子印证了<strong>Shallow Clone</strong>只会克隆基础类型的属性，不会克隆引用类型的属性。</p><p>因此需要Deep Clone，不仅仅把reference type的属性克隆，也同时把reference type属性的引用地址克隆，达到彻底的克隆。</p><hr><h4 id="Deep-Clone"><a href="#Deep-Clone" class="headerlink" title="Deep Clone"></a>Deep Clone</h4><p>为了实现Deep Clone，在以上例子中也需要把<code>Position</code>类可克隆化，并且修改其<code>clone()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Position pos;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNum)</span></span>&#123;<br>        number = inNum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String n)</span></span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPos</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> pos.getPosition();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPos</span><span class="hljs-params">(Position inPos)</span></span>&#123;<br>        pos = inPos;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        Shape temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Shape) <span class="hljs-keyword">super</span>.clone(); <span class="hljs-comment">// 浅克隆</span><br>            temp.pos = (Position) pos.clone(); <span class="hljs-comment">// 深克隆</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Position</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123; <span class="hljs-comment">// 可克隆化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写clone()方法</span><br>        Position temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            temp = (Position) <span class="hljs-keyword">super</span>.clone();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPosition</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"("</span>+x+<span class="hljs-string">","</span>+y+<span class="hljs-string">")"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> InX, <span class="hljs-keyword">int</span> Iny)</span></span>&#123;<br>        x = InX;<br>        y = Iny;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Position aPos = <span class="hljs-keyword">new</span> Position();<br>        aPos.setPosition(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        Shape s1 = <span class="hljs-keyword">new</span> Shape();<br>        s1.setPos(aPos);<br>        Shape s2 = (Shape)s1.clone();<br>        System.out.printf(<span class="hljs-string">"s1 position: %s, s2 position: %s\n\n"</span>,s1.getPos(),s2.getPos());<br><br>        aPos.setPosition(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        s1.setPos(aPos);<br>        System.out.printf(<span class="hljs-string">"s1 position: %s, s2 position: %s\n\n"</span>,s1.getPos(),s2.getPos());<br><br>        System.out.printf(<span class="hljs-string">"s1 == s2? %b"</span>,s1 == s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">s1 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>s1 position: (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), s2 position: (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">// 深克隆进行后 s1改变并不会影响s2</span><br><br>s1 == s2? <span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>在决定是否使用<code>clone()</code>方法前，考虑：</p><ol><li>默认的<code>clone()</code>方法是否适合；</li><li>若不适合，则重写<code>clone()</code>方法；</li><li>不应该使用<code>clone()</code>方法。</li></ol><p>若考虑使用：</p><ol><li>实现<code>Cloneable</code>接口；</li><li>重写<code>clone()</code>方法，并用<code>public</code>修饰。</li></ol><hr><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>两个使用<code>interface</code>的原因：</p><ol><li>使某一对象upcast至不止一个父类型，使其变得灵活；</li><li>防止这一抽象的类被直接使用</li></ol><p>如果明确某一类会被定义为父类，则可以直接让其定义成一个<code>interface</code>（或者<code>abstract</code>，但是优先考虑<code>interface</code>）。<br>但要注意不能过度使用<code>interface</code>，可以先写出具象的父类，分析必要性之后再将其改成<code>interface</code>。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>C. S. Horstmann, <em>Core Java</em>. Boston: Pearson, 2019.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java的接口还有更深层次的内容，会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
      <category>接口 Interface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的多态性(Polymorphism)</title>
    <link href="/2021/10/02/Java-oop-polymorphism/"/>
    <url>/2021/10/02/Java-oop-polymorphism/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792" target="_blank" rel="noopener">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="Polymorphism-Introduction"><a href="#Polymorphism-Introduction" class="headerlink" title="Polymorphism Introduction"></a>Polymorphism Introduction</h3><p>多态性(Polymorphism)与<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">继承性(Inheritance)</a>有着密不可分的联系，是对继承性(Inheritance)的延伸与扩展。<strong>其能改进代码的组织，增加可读性，以及使代码具有跟好的扩展性</strong>。<br>我归纳的多态性(Polymorphism)定义：</p><blockquote><p>Polymorphic method invoking allows one (sub)class to <strong>perform differently</strong> from another similar (sub)class, and both of them <strong>are inherited from the same base class</strong>. And the different performance refer to the <strong>methods that can be invoked through the base class</strong>, which means the base class is invoking the method of the derived class(<strong>late banding</strong>).<br>The three conditions of Polymorphism are the occurrence of <strong>inheritance, overwriting and upcasting</strong>. </p></blockquote><p>先看一个案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed!"</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Equilateral Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(RightTriangle x)</span></span>&#123; <span class="hljs-comment">// 打印直角三角形的方法</span><br>        x.Print();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(IsoscelesRightTriangle x)</span></span>&#123; <span class="hljs-comment">// 打印等腰直角三角形的方法</span><br>        x.Print();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(EquilateralTriangle x)</span></span>&#123; <span class="hljs-comment">// 打印等边三角形的方法</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br><br>        RightTriangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle();<br>        PrintOut(aNewRightTriangle); <span class="hljs-comment">// 打印直角三角形</span><br><br>        IsoscelesRightTriangle aNewIsoscelesRightTriangle = <span class="hljs-keyword">new</span> IsoscelesRightTriangle();<br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        EquilateralTriangle aNewEquilateralTriangle = <span class="hljs-keyword">new</span> EquilateralTriangle();<br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>上面的例子中定义了一个<code>Triangle</code>父类，衍生出了三个子类<code>RightTriangle</code>、<code>IsoscelesRightTriangle</code>和<code>EquilateralTriangle</code>。定义了一个打印工具<code>PrintTriangle</code>，为了打印出不同类的对象，在其中定义了有对应类型参数的方法<code>PrintOut(Type x)</code>.</p></blockquote><p>上面的例子运行没有问题，但是也带来了一些问题：</p><ol><li>为了实现一个相同的方法<code>PrintOut()</code> 要针对每一类写一个方法，增加了很多行代码；</li><li>如果要增加一个类似于<code>PrintOut()</code>的方法或者增加<code>Triangle</code>的衍生类，就需要添加或者修改很多代码。</li></ol><p>为了解决这些问题，可以把这些相同的<code>PrintOut()</code>方法<strong>写成一个方法</strong>，并用<strong>父类当作参数</strong>，而不是具体的某一个衍生类。这样可以不考虑这个父类有多少个衍生类，让<strong>方法直接与父类沟通</strong>，让父类决定把方法具体给哪一个子类调用。</p><p>而这就是多态性(Polymorphism)的作用。</p><p>因此可以把代码修改成以下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed!"</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Equilateral Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Triangle x)</span></span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewRightTriangle);; <span class="hljs-comment">// 打印直角三角形</span><br><br>        Triangle aNewIsoscelesRightTriangle = <span class="hljs-keyword">new</span> IsoscelesRightTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesRightTriangle); <span class="hljs-comment">// 打印等腰直角三角形</span><br><br>        Triangle aNewEquilateralTriangle = <span class="hljs-keyword">new</span> EquilateralTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewEquilateralTriangle); <span class="hljs-comment">// 打印等边三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Conditions-of-polymorphic-method-call"><a href="#Conditions-of-polymorphic-method-call" class="headerlink" title="Conditions of polymorphic method call"></a>Conditions of polymorphic method call</h3><p>Polymorphic method call 实现需要有三个条件：</p><blockquote><ol><li><strong>Inheritance (继承)</strong></li><li><strong>Overriding (重写)</strong></li><li><strong>Upcasting (向上转型)</strong></li></ol></blockquote><h4 id="Condition1-Inheritance"><a href="#Condition1-Inheritance" class="headerlink" title="Condition1-Inheritance"></a>Condition1-Inheritance</h4><p>Polymorphic method call适用的不同类之间需要有<strong>继承关系</strong>，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed!"</span>); <span class="hljs-comment">// 父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等边三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Equilateral Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="Condition2-Overriding"><a href="#Condition2-Overriding" class="headerlink" title="Condition2-Overriding"></a>Condition2-Overriding</h4><p>正如上面例子中每个子类中都有<strong>重写</strong>父类方法的方法<br>条件：</p><ol><li>重写父类的实例方法，不能是<code>static</code>修饰的方法（包括<code>this</code>和<code>super</code>关键字）;</li><li>方法必须是从父类继承的；</li><li>与父类的方法有相同的Signature(i.e. method name, method argument type list)。</li></ol><h4 id="Condition3-Upcasting"><a href="#Condition3-Upcasting" class="headerlink" title="Condition3-Upcasting"></a>Condition3-Upcasting</h4><p>Upcasting（向上转型）指的是使一个对象<strong>引用至它的父类</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br></code></pre></td></tr></table></figure><p>例子中首先创建了一个<code>RightTriangle</code>类的对象，然后马上赋值给了一个<code>Triangle</code>类对象。这并不会使编译器报错，因为这两个类有继承的关系，形成了Upcasting（向上转型）。</p><hr><h3 id="Late-Binding"><a href="#Late-Binding" class="headerlink" title="Late Binding"></a>Late Binding</h3><p>Polymorphsim又称<strong>late binding(后链接)、dynamic binding(动态链接) 或 run-time binding(运行时链接)</strong>。</p><blockquote><p>Binding(链接)：<br>连接一个<strong>方法调用语句</strong>与<strong>方法体</strong>叫做Binding(链接)。</p><p>Early binding(前链接)：<br>Binding(链接)发生在程序<strong>运行之前</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br>aNewRightTriangle.Print(); <span class="hljs-comment">// 打印直角三角形</span><br></code></pre></td></tr></table></figure><p>但是在例子中运行到以上代码的时候，编译器并不能用Early binding(前链接)去找到<code>Print()</code>方法的<strong>正确的方法体</strong>，因为在<code>Print()</code>方法的定义中只有一个<code>Triangle</code>类的参数，它并不知道具调用了哪一个类型的参数类型以找到对应的正确方法体。</p><hr><p>解决方法就是late binding(后链接)，也就是Polymorphic method call。late binding(后链接)发生在运行时，因此也被称为dynamic binding(动态链接) 或 run-time binding(运行时链接)。</p><p>当late binding（后链接）被使用时，<strong>一种后链接机制</strong>会<strong>判断</strong>运行时的<strong>对象类型</strong>，并调用其<strong>相对应正确的方法体</strong>，尽管<strong>编译器还是不知道</strong>现时的对象类型。</p><p>在Java中，所有的方法链接都是使用late binding(后链接)，除了<code>static</code>或者<code>final</code>方法。<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-3-final-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">一旦定义成<code>final</code>方法，此方法就<strong>无法被修改</strong>，也不会被子类重写</a>。这就保证了其可以在编译前就被连接起来，即，使用了early binding(前链接)，使得late binding(后链接)变得没有必要，不用去在<code>final</code>方法使用。这也会使调用<code>final</code>方法更加有效率（但大多数情况下并不会有明显的提升，因为JVM会自动处理好运行的效率）。</p><hr><p>当在<code>PrintOut(Triangle x)</code>方法体中运行以下代码时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.Print();<br></code></pre></td></tr></table></figure><br>看似调用的是<code>Triangle</code>父类的<code>Print()</code>方法，但是因为late binding(后链接)，实际上调用的是<code>RightTriangle.Print()</code>方法，这就体现出了Polymorphism的用处。</p><hr><p>总的来说，Polymorphism体现在<strong>继承和重写方法的基础上</strong>，并由upcasting从<strong>子类向上到父类</strong>，再由late binding从<strong>父类向下到子类</strong>，这一环形体现。</p><hr><h3 id="Extensibility"><a href="#Extensibility" class="headerlink" title="Extensibility"></a>Extensibility</h3><p>基于Polymorphism，可以向现有的代码中更方便的<strong>加入新的类或者方法</strong>。用以上案例举例，可以添加新的Triangle子类，而无需去改变PrintOut()方法，使参数<strong>只与父类联系</strong>，无须具体到某一子类。这就是提高了代码的<strong>拓展性</strong>。</p><p>在原来的类中加入新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Triangle printed!"</span>); <br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义等腰三角形子类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Right Triangle printed!"</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpecialRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RightTriangle</span></span>&#123; <span class="hljs-comment">//定义特殊直角三角形子类继承直角三角形</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Special Right Triangle printed!"</span>); <span class="hljs-comment">// 重写父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Right Triangle printed!"</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EquilateralTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"A Isosceles Equilateral Triangle printed!"</span>); <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 无须改变此类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintOut</span><span class="hljs-params">(Triangle x)</span></span>&#123; <span class="hljs-comment">// 打印三角形的方法，使用父类当作参数类型</span><br>        x.Print();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <br>        PrintOut(aNewRightTriangle); <br><br>        Triangle aNewIsoscelesRightTriangle = <span class="hljs-keyword">new</span> IsoscelesRightTriangle(); <br>        PrintOut(aNewIsoscelesRightTriangle); <br><br>        Triangle aNewEquilateralTriangle = <span class="hljs-keyword">new</span> EquilateralTriangle(); <br>        PrintOut(aNewEquilateralTriangle); <br><br>        Triangle aNewIsoscelesTriangle = <span class="hljs-keyword">new</span> IsoscelesTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewIsoscelesTriangle); <span class="hljs-comment">// 打印等腰三角形</span><br><br>        Triangle aNewSpecialRightTriangle = <span class="hljs-keyword">new</span> SpecialRightTriangle(); <span class="hljs-comment">// upcasting</span><br>        PrintOut(aNewSpecialRightTriangle); <span class="hljs-comment">// 打印特殊直角三角形</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>添加了两个新的类，<code>IsoscelesTriangle</code>类继承了<code>Triangle</code>类，<code>SpecialRightTriangle</code>继承了<code>RightTriangle</code>类，并且这两个新的类都重写了父类的<code>Print()</code>方法。而因为Polymorphism，<code>PrintOut()</code>方法不需要改变，就可以使新的类调用，因为他们都是父类<code>Triangle</code>的衍生类。</p></blockquote><p>Polymorphism可以使程序员把<strong>需要改变的部分</strong>与<strong>保持不变的部分</strong>分开来。</p><hr><h3 id="WARNING-private-method-“overriding”"><a href="#WARNING-private-method-“overriding”" class="headerlink" title="WARNING-private method “overriding”"></a>WARNING-<code>private</code> method “overriding”</h3><p>在之前文章中提到过<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-3-3-final-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">重写父类的<code>private</code>方法</a>，看似可行，实则子类不能访问父类的<code>private</code>方法，无法重写，只是创造了一个同名的方法。<br>因此当子类中出现了“重写父类的<code>private</code>方法”，并没有满足Polymorphism条件之一的Overriding，所以无法应用Polymorphism。</p><hr><h3 id="WARNING-invoking-filed-and-static-method"><a href="#WARNING-invoking-filed-and-static-method" class="headerlink" title="WARNING-invoking filed and static method"></a>WARNING-invoking filed and <code>static</code> method</h3><p>只有调用方法的时候才会用到Polymorphism，若<strong>直接访问对象属性</strong>，则就会在编译时访问，不会应用Polymorphism，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">30</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Angle;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">90</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Angle;&#125;    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br>        System.out.println(<span class="hljs-string">"Angle1: "</span>+ aNewRightTriangle.Angle); <span class="hljs-comment">// 直接访问Triangle类对象的属性</span><br>        System.out.println(<span class="hljs-string">"getAngle1: "</span>+ aNewRightTriangle.getAngle()+<span class="hljs-string">"\n"</span>); <span class="hljs-comment">// Polymorphism应用</span><br><br>        RightTriangle aNewRightTriangle2 = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// NO upcasting</span><br>        System.out.println(<span class="hljs-string">"Angle2: "</span>+ aNewRightTriangle2.Angle); <span class="hljs-comment">// 直接访问RightTriangle类对象的属性</span><br>        System.out.println(<span class="hljs-string">"getAngle2: "</span>+ aNewRightTriangle2.getAngle()); <span class="hljs-comment">//直接调用RightTriangle类对象的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Angle1: <span class="hljs-number">30</span><br>getAngle1: <span class="hljs-number">90</span><br><br>Angle2: <span class="hljs-number">90</span><br>getAngle2: <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>因此这也是通常把所有属性用<code>private</code>修饰的原因，防止直接访问属性带来的问题，经常选择<strong>用方法去访问属性</strong>。</p><hr><p>如果一个方法是被<code>static</code>修饰的，则它不会应用Polymorphism，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">30</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Angle;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getAngleStatic</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"30"</span>;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">90</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> Angle;&#125;    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getAngleStatic</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"90"</span>;&#125;    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        Triangle aNewRightTriangle = <span class="hljs-keyword">new</span> RightTriangle(); <span class="hljs-comment">// upcasting</span><br>        System.out.println(<span class="hljs-string">"getAngle: "</span>+ aNewRightTriangle.getAngle()+<span class="hljs-string">"\n"</span>); <span class="hljs-comment">// Polymorphism应用</span><br>        System.out.println(<span class="hljs-string">"getAngleStatic: "</span>+ aNewRightTriangle.getAngleStatic()); <span class="hljs-comment">// 访问Triangle类对象的static方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">getAngle: <span class="hljs-number">90</span><br><br>getAngleStatic: <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>因为一个方法被<code>static</code>修饰后，它不会被子类继承，所以不会被重写，以至于不能使用Polymorphism。</p><hr><h3 id="Polymorphic-methods-in-constructors"><a href="#Polymorphic-methods-in-constructors" class="headerlink" title="Polymorphic methods in constructors"></a>Polymorphic methods in constructors</h3><p>当一个构造函数中调用了多态（or dynamically-bound）的方法，可能会产生错误。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">30</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"Triangle Angle:"</span> + Angle);&#125;<br>    Triangle()&#123; <span class="hljs-comment">// 构造方法</span><br>        System.out.println(<span class="hljs-string">"This is a Triangle before RightTriangle"</span>);<br>        getAngle(); <span class="hljs-comment">// 多态（dynamically-bound）方法</span><br>        System.out.println(<span class="hljs-string">"This is a Triangle after RightTriangle"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> Angle = <span class="hljs-number">60</span>;<br>    RightTriangle(<span class="hljs-keyword">int</span> angle)&#123;<br>        Angle = angle;<br>        System.out.println(<span class="hljs-string">"Right Triangle Angle:"</span> + Angle);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAngle</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"Right Triangle Angle:"</span> + Angle);&#125;  <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintTriangle</span> </span>&#123; <span class="hljs-comment">// 定义一个打印三角形的类</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        <span class="hljs-keyword">new</span> RightTriangle(<span class="hljs-number">90</span>); <span class="hljs-comment">// upcasting</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">This is a Triangle before RightTriangle<br>Right Triangle Angle:<span class="hljs-number">0</span> <span class="hljs-comment">// not yet initialized, only binary zero</span><br>This is a Triangle after RightTriangle<br>Right Triangle Angle:<span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>根据<a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/#3-1-%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">前面的文章</a>，在继承中，<strong>父类的构造方法是当一个被调用完成的、最先完成初始化的</strong>。如果在父类的构造方法中调用多态（dynamically-bound）方法，并且此方法通过late binding到了其子类对应的方法，此时<strong>子类还没有被完全的初始化</strong>。如例子中，在<code>Triangle</code>构造函数中调用到了<code>RightTriangle</code>的<code>getAngle()</code>方法，此方法中的属性<code>Angle</code>还没有被初始化成设计的<code>Angle = 60</code>，因此返回了<code>0</code>，输出<code>Right Triangle Angle:0</code>。</p><p>上述案例的运行流程为：</p><blockquote><ol><li>给对象分配内存，并<strong>初始化为0(binary zero)</strong>；</li><li>按照上述过程调用父类的构造函数，并且在其中调用了子类<code>RightTriangle</code>的<code>getAngle()</code>方法（<strong>尽管子类的构造函数还没有被调用</strong>），此时属性Angle的值为0（根据上一步）；</li><li>从上至下运行；</li><li>运行子类的构造函数。</li></ol></blockquote><p>因此，在构造函数中，不要调用任何类中的其他方法，除被<code>final</code>和<code>private</code>修饰的方法外，因为它们修饰的方法不会被重写，不会应用Polymorphism，可以防止上述问题的出现。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
      <category>多态性 Polymorphism</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习2-表达式、控制流与I/O</title>
    <link href="/2021/09/17/Java-learning-2/"/>
    <url>/2021/09/17/Java-learning-2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><a id="more"></a><p>本文将记录Java基础学习的三大内容 - <strong>表达式 (Expressions)</strong> 、<strong>控制流 (Control Flow)</strong> 与 <strong>I/O</strong>。</p><hr><h2 id="1-表达式-Expressions"><a href="#1-表达式-Expressions" class="headerlink" title="1. 表达式 (Expressions)"></a>1. 表达式 (Expressions)</h2><h3 id="1-1-转义字符-Escape-Character"><a href="#1-1-转义字符-Escape-Character" class="headerlink" title="1.1 转义字符 (Escape Character)"></a>1.1 转义字符 (Escape Character)</h3><div class="table-container"><table><thead><tr><th style="text-align:center">转义字符 (Escape Character)</th><th style="text-align:center">描述</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">‘\n’</td><td style="text-align:center">new line</td><td style="text-align:center">换行-光标移动至下一行开头</td></tr><tr><td style="text-align:center">‘\t’</td><td style="text-align:center">tab</td><td style="text-align:center">水平移动-光标移动至下一个TAB后</td></tr><tr><td style="text-align:center">‘\b’</td><td style="text-align:center">backspace</td><td style="text-align:center">退格（删除）-光标移动至前一列</td></tr><tr><td style="text-align:center">‘\r’</td><td style="text-align:center">return</td><td style="text-align:center">回车-光标移动至本行开头</td></tr><tr><td style="text-align:center">‘\f’</td><td style="text-align:center">form feed</td><td style="text-align:center">换页-光标移动至下页开头</td></tr><tr><td style="text-align:center">‘\\\’</td><td style="text-align:center">backslash</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\‘’</td><td style="text-align:center">single quote</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\“‘</td><td style="text-align:center">double quote</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\0’</td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">‘\000’</td><td style="text-align:center">1-3位八进制数</td><td style="text-align:center">范围\000~\377</td></tr><tr><td style="text-align:center">‘\u0000’</td><td style="text-align:center">Unicode字符 4位16进制数 (‘\u0000’为空字符)</td><td style="text-align:center">范围0~65535</td></tr></tbody></table></div><p>运行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaLearningTwo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"1. Hello World!\n"</span>);<br>        System.out.println(<span class="hljs-string">"2. \tHello World!"</span>);<br>        System.out.println(<span class="hljs-string">"3. Hello World!\b"</span>);<br>        System.out.println(<span class="hljs-string">"4. Hello World!\rHi World!"</span>);<br>        System.out.println(<span class="hljs-string">"5. Hello World!\f"</span>);<br>        System.out.println(<span class="hljs-string">"6. Hello World!"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>. Hello World!<br><br><span class="hljs-number">2</span>. Hello World!<br><span class="hljs-number">3</span>. Hello World<br>Hi World!<br><span class="hljs-number">5</span>. Hello World!<br><span class="hljs-number">6</span>. Hello World!<br></code></pre></td></tr></table></figure><hr><h3 id="1-2-运算符-Operator"><a href="#1-2-运算符-Operator" class="headerlink" title="1.2 运算符 (Operator)"></a>1.2 运算符 (Operator)</h3><h4 id="1-2-1-数字运算符-Arithmetic-Operator"><a href="#1-2-1-数字运算符-Arithmetic-Operator" class="headerlink" title="1.2.1 数字运算符 (Arithmetic Operator)"></a>1.2.1 数字运算符 (Arithmetic Operator)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数字运算符 (Arithmetic Operator)</th><th style="text-align:center">描述 </th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">addition </td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">subtraction</td></tr><tr><td style="text-align:center">$*$</td><td style="text-align:center">multiplication</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">division</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">modulo (take the remainder)</td></tr></tbody></table></div><h4 id="1-2-2-字符串连接符-String-Concatenation"><a href="#1-2-2-字符串连接符-String-Concatenation" class="headerlink" title="1.2.2 字符串连接符 (String Concatenation)"></a>1.2.2 字符串连接符 (String Concatenation)</h4><p>$+$为字符串连接符 (String Concatenation)，例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String aString = <span class="hljs-string">"This"</span>;<br>String bString = <span class="hljs-string">"is"</span>;<br>String cString = aString + bString;<br>Stirng dString = cStirng + <span class="hljs-string">"my book"</span>; <span class="hljs-comment">// dString = "This is my book"</span><br></code></pre></td></tr></table></figure></p><h4 id="1-2-3-自增与自减运算符-Increment-and-Decrement-Operator"><a href="#1-2-3-自增与自减运算符-Increment-and-Decrement-Operator" class="headerlink" title="1.2.3 自增与自减运算符 (Increment and Decrement Operator)"></a>1.2.3 自增与自减运算符 (Increment and Decrement Operator)</h4><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = i++;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">int</span> k = i--;<br></code></pre></td></tr></table></figure><br>类似于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = i;<br>i = i + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">int</span> k = i;<br>i = i - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></p><blockquote><p>上面的例子中，自增或自减符号位于变量后，则先进行赋值操作，再对变量进行自增或自减。若自增或自减符号位于变量前，则先对变量进行自增或自减，再进行赋值操作。如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = ++i;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">int</span> k = --i;<br></code></pre></td></tr></table></figure><p>类似于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>i = i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = i;<br><span class="hljs-comment">// ...</span><br>i = i - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> k = i;<br></code></pre></td></tr></table></figure></p><h4 id="1-2-4-逻辑运算符-Logical-Operator"><a href="#1-2-4-逻辑运算符-Logical-Operator" class="headerlink" title="1.2.4 逻辑运算符 (Logical Operator)"></a>1.2.4 逻辑运算符 (Logical Operator)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数字逻辑运算符</th><th style="text-align:center">描述 </th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">less than  </td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">less than or equal to</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">greater than</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">greater than or equal to</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">equal to</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">not equal to</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">布尔逻辑运算符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:center">not(prefix)</td><td style="text-align:center">!true = false</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">AND</td><td style="text-align:center">true &amp;&amp; false = false</td></tr><tr><td style="text-align:center">｜｜</td><td style="text-align:center">OR</td><td style="text-align:center">true ｜｜ false = true</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">Exclusive OR</td><td style="text-align:center">true ^ false = true</td></tr></tbody></table></div><h4 id="1-2-5-位运算符-Bitwise-Operator"><a href="#1-2-5-位运算符-Bitwise-Operator" class="headerlink" title="1.2.5 位运算符 (Bitwise Operator)"></a>1.2.5 位运算符 (Bitwise Operator)</h4><p>假设：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> a = (<span class="hljs-keyword">byte</span>)<span class="hljs-number">0B10101010</span>;<br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>)<span class="hljs-number">0B00100000</span>;<br></code></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th style="text-align:center">位运算符 (Bitwise Operator)</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">～</td><td style="text-align:center">complement</td><td style="text-align:center"><code>(byte)~a = 0B01010101</code></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">AND</td><td style="text-align:center"><code>(byte)(a &amp; b) = 0B00100000</code></td></tr><tr><td style="text-align:center">｜</td><td style="text-align:center">OR</td><td style="text-align:center"><code>(byte)(a ｜ b) = 0B10101010</code></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">Exclusive OR</td><td style="text-align:center"><code>(byte)(a ^ b) = 0B10001010</code></td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">Signed left shift, fill with 0</td><td style="text-align:center"><code>(bytr)(a &lt;&lt; 2) = 0B10101000</code></td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">Signed right shift, fill with sign bit</td><td style="text-align:center"><code>(bytr)(a &gt;&gt; 2) = 0B11101010</code></td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">Unsigned right shift, fill with 0</td><td style="text-align:center"><code>(bytr)(a &gt;&gt; 2) = 0B00101010</code></td></tr></tbody></table></div><h4 id="1-2-6-赋值运算符-Assignment-Operator"><a href="#1-2-6-赋值运算符-Assignment-Operator" class="headerlink" title="1.2.6 赋值运算符 (Assignment Operator)"></a>1.2.6 赋值运算符 (Assignment Operator)</h4><p><code>=</code>为赋值符号，把一个值赋值给某一变量，语法如下：</p><p><code>variable = expression</code></p><p>例子：<br><code>i = 2;</code></p><p>以下情况会从右往左进行赋值：<br><code>i = j = 3;</code><br>相当于：<br><code>j = 3;</code><br><code>i = j;</code></p><h4 id="1-2-7-复合赋值运算符-Compound-Assignment-Operator"><a href="#1-2-7-复合赋值运算符-Compound-Assignment-Operator" class="headerlink" title="1.2.7 复合赋值运算符 (Compound Assignment Operator)"></a>1.2.7 复合赋值运算符 (Compound Assignment Operator)</h4><p>语法如下：<br><code>variable op= expression</code></p><p>相当于：<br><code>variable = variable op expression</code></p><p>例如：<br><code>i =+ 1;</code> 相当于：<code>i = i + 1</code></p><p>若出现下列的表达式，则需要根据<strong>运算符号优先级</strong>来判断运算顺序：</p><p><code>i = j += (k * 2) / 8</code></p><p><strong>运算符号优先级</strong>详见1.2.9节。</p><h4 id="1-2-8-条件表达式-Conditional-Expression"><a href="#1-2-8-条件表达式-Conditional-Expression" class="headerlink" title="1.2.8 条件表达式 (Conditional Expression)"></a>1.2.8 条件表达式 (Conditional Expression)</h4><p>语法如下：<br><code>boolean-expression ? exp1 : exp2</code></p><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println((num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)? <span class="hljs-string">"EVEN"</span> : <span class="hljs-string">"ODD"</span>)<br></code></pre></td></tr></table></figure></p><p>解释：<br>如果 <code>boolean-expression == true</code> 那么<strong>整个表达式</strong>等于<code>exp1</code>，否则等于<code>exp2</code>。</p><h4 id="1-2-9-运算符优先级-Operator-Precedence"><a href="#1-2-9-运算符优先级-Operator-Precedence" class="headerlink" title="1.2.9 运算符优先级 (Operator Precedence)"></a>1.2.9 运算符优先级 (Operator Precedence)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">级别</th><th style="text-align:center">运算方向</th></tr></thead><tbody><tr><td style="text-align:center">[ ]</td><td style="text-align:center">access array element</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">access object member</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">( )</td><td style="text-align:center">invoke a method</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">post-increment</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">post-decrement</td><td style="text-align:center">1</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">pre-increment</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">pre-decrement</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">unary plus</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">unary minus</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">logical NOT</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">bitwise NOT</td><td style="text-align:center">2</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">( )</td><td style="text-align:center">cast</td><td style="text-align:center">3</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"><code>new</code></td><td style="text-align:center">object creation</td><td style="text-align:center">3</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">multiplication</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">division</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">modulo</td><td style="text-align:center">4</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">+ -</td><td style="text-align:center">addition, subtraction</td><td style="text-align:center">5</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">string concatenation</td><td style="text-align:center">5</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td style="text-align:center">shift</td><td style="text-align:center">6</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt; &lt;= &gt; &gt;= <code>instanceof</code></td><td style="text-align:center">relational type comparison</td><td style="text-align:center">7</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">== !=</td><td style="text-align:center">equality</td><td style="text-align:center">8</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">bitwise AND</td><td style="text-align:center">9</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">bitwise XOR</td><td style="text-align:center">10</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">｜</td><td style="text-align:center">bitwise OR</td><td style="text-align:center">11</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">conditional AND</td><td style="text-align:center">12</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">｜｜</td><td style="text-align:center">conditional OR</td><td style="text-align:center">13</td><td style="text-align:center">L to R</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">?:</td><td style="text-align:center">conditional</td><td style="text-align:center">14</td><td style="text-align:center"><strong>R to L</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">= += -= *= /= %= &amp;= ^=  ｜= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td><td style="text-align:center">assignment</td><td style="text-align:center">15</td><td style="text-align:center"><strong>R to L</strong></td></tr></tbody></table></div><hr><h2 id="2-控制流-Control-Flow"><a href="#2-控制流-Control-Flow" class="headerlink" title="2. 控制流 (Control Flow)"></a>2. 控制流 (Control Flow)</h2><h3 id="2-1-条件语句-Conditional-Statement"><a href="#2-1-条件语句-Conditional-Statement" class="headerlink" title="2.1 条件语句 (Conditional Statement)"></a>2.1 条件语句 (Conditional Statement)</h3><h4 id="2-1-1-if-表达式"><a href="#2-1-1-if-表达式" class="headerlink" title="2.1.1 if 表达式"></a>2.1.1 <code>if</code> 表达式</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (booleanExpression)<br>  trueBody<br><span class="hljs-keyword">else</span><br>  falseBody<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (firstBooleanExpression)<br>  firstBody<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (secondBooleanExpression)<br>  secondBody<br><span class="hljs-keyword">else</span><br>  thirdBody<br></code></pre></td></tr></table></figure><p><code>trueBody</code>、<code>falseBody</code>、<code>firstBody</code>、<code>secondBody</code>和<code>thirdBody</code>可以为单行的语句或者是语句块（写在<code>{}</code>内），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (booleanExpression)&#123;<br>  trueBody1<br>  trueBody2<br>  trueBody3<br>&#125;<br><span class="hljs-keyword">else</span><br>  falseBody<br></code></pre></td></tr></table></figure><h4 id="2-1-2-switch-表达式"><a href="#2-1-2-switch-表达式" class="headerlink" title="2.1.2 switch 表达式"></a>2.1.2 <code>switch</code> 表达式</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(selector) &#123; <br>  <span class="hljs-keyword">case</span> value1:<br>    statement; <br>    <span class="hljs-keyword">break</span>; <br>  <span class="hljs-keyword">case</span> value2: <br>    statement; <br>    <span class="hljs-keyword">break</span>; <br>  <span class="hljs-keyword">case</span> value3: <br>    statement; <br>    <span class="hljs-keyword">break</span>; <br> <br> <span class="hljs-comment">// ... </span><br>  <span class="hljs-keyword">default</span>: <br>    statement; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>selector</code>会与每个<code>value</code>进行比较，若相等则运行后面的<code>statement</code>语句，若没有一个相等的，则运行<code>default</code>之后的语句。 每个<code>case</code>中的<code>break;</code>语句是可选择的，一般选择加上，以便满足<code>case</code>条件后直接退出。<code>default</code> 语句后不需要<code>break;</code>语句，因为运行default后会直接退出。</p><p><code>selector</code>应为整型数据，如<code>int</code>或者<code>char</code>。如需要使用非整型数据，如<code>string</code>或者<code>float</code>，则需要使用<code>if</code>语句，或者<code>switch</code>中使用<code>enum</code>作为数据类型。</p><hr><h3 id="2-2-循环语句-Loop-Statement"><a href="#2-2-循环语句-Loop-Statement" class="headerlink" title="2.2 循环语句 (Loop Statement)"></a>2.2 循环语句 (Loop Statement)</h3><h4 id="2-2-1-while-循环"><a href="#2-2-1-while-循环" class="headerlink" title="2.2.1  while 循环"></a>2.2.1  <code>while</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (booleanExpression)<br>  loopBody<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">5</span>)&#123;<br>  System.out.println(i);<br>  i++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-do-while-循环"><a href="#2-2-2-do-while-循环" class="headerlink" title="2.2.2 do-while 循环"></a>2.2.2 <code>do-while</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span><br>  loopBody<br><span class="hljs-keyword">while</span> (booleanExpression)<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>  System.out.println(i);<br>  i++;<br>  &#125; <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>与<code>while</code>循环不同的是，每一次<code>do-while</code>循环先执行循环体的语句，最后进行循环条件的判断。这种循环可以实现进入循环后再询问用户的输入，不用在循环前询问。</p><h4 id="2-2-3-for-循环"><a href="#2-2-3-for-循环" class="headerlink" title="2.2.3 for 循环"></a>2.2.3 <code>for</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (initialization; booleanCondition; increment)<br>  loopBody<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>  System.out.println(i);<br>  i++;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for</code> 循环可以转换为<code>while</code> 循环，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">initialization;<br><span class="hljs-keyword">while</span> (booleanExpression)<br>  loopBody;<br>  increment;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-for-each-循环"><a href="#2-2-4-for-each-循环" class="headerlink" title="2.2.4 for-each 循环"></a>2.2.4 <code>for-each</code> 循环</h4><p>语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (elementType name : container)<br>  loopBody<br></code></pre></td></tr></table></figure><p><code>container</code>为<code>elementType</code>类型的数组，此循环会遍历数组内的元素。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">int</span> total;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr)<br>  total += i;<br></code></pre></td></tr></table></figure><p>此循环遍历<code>arr</code>数组的全部元素，最后得出其总和。</p><p>注意：<br><code>for-each</code> 循环并不会访问到具体的元素及其下标，因此以下代码是不合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr)<br>  i++; <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><p>所以如果要进行对具体元素的修改，则需要用<code>for</code>或者<code>while</code>循环，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>  arr[i]++;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><h4 id="2-2-5-强制跳转-Unconditional-Branching"><a href="#2-2-5-强制跳转-Unconditional-Branching" class="headerlink" title="2.2.5 强制跳转 (Unconditional Branching)"></a>2.2.5 强制跳转 (Unconditional Branching)</h4><p>   <code>return</code></p><blockquote><ol><li>当一个方法的返回值被定义为<code>void</code>后，只有运行完此方法的最后一行代码之后才会跳出此方法。但是当一个方法的返回值定义到一个具体的数据类型，当运行到<code>return</code>关键字后就会跳出此方法。</li><li><code>return</code>语句必须是一个方法中最后被执行的语句，其后的语句都不会被执行。<code>return</code>语句行不一定是方法代码的最后一行，但是最后被运行的那一行。如下：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>&#123;<br>  <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> -num <span class="hljs-comment">// if negative, return -num and exit the loop</span><br>  <span class="hljs-keyword">return</span> num <span class="hljs-comment">// else return num</span><br>&#125;<br></code></pre></td></tr></table></figure><p>   <code>break</code><br>   <code>break</code>语句可以跳出目前所在的循环体(e.g. <code>for</code>, <code>while</code>, <code>do-while</code>, <code>switch</code>)。跳出后开始执行此循环的后一行代码。</p><hr><p>   <code>continue</code><br>   <code>continue</code>语句会跳过其后的本次正在循环的代码，并且开始执行此循环体的下一次循环（如果还满足循环的条件），并不会像<code>break</code>语句一样直接跳出循环体。</p><hr><h2 id="3-I-O"><a href="#3-I-O" class="headerlink" title="3. I/O"></a>3. I/O</h2><h3 id="3-1-输出-output"><a href="#3-1-输出-output" class="headerlink" title="3.1 输出 (output)"></a>3.1 输出 (output)</h3><p>语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">"Hello,World!"</span>);<br>System.out.println(<span class="hljs-string">"Hello,World!"</span>); <span class="hljs-comment">// followed by a newline</span><br></code></pre></td></tr></table></figure><br><code>System.out</code>对象属于<code>java.io.PrintStream</code>类的一个实例</p><h3 id="3-2-输入-input"><a href="#3-2-输入-input" class="headerlink" title="3.2 输入 (input)"></a>3.2 输入 (input)</h3><p>一般语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.print(<span class="hljs-string">"Enter :"</span>);<br>    <span class="hljs-keyword">double</span> num = input.nextDouble();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>Scanner</code>会根据<strong>分隔符</strong>把输入内容分成好几个<strong>小节</strong>后再进行一一读取。<br><strong>分隔符</strong>一般为whitespace(i.e. space, tabs, and newlines)</p><p><code>Scanner</code>的方法有以下几种：</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>hasNext()</code></td><td style="text-align:center">如果输入中还有小节，返回<code>true</code></td></tr><tr><td style="text-align:center"><code>next()</code></td><td style="text-align:center">返回输入中的下一个<code>string</code>小节。若没有小节，返回错误</td></tr><tr><td style="text-align:center"><code>hasNextType()</code></td><td style="text-align:center">如果输入中还有对应的<code>Type</code>类的小节，返回<code>true</code>。<code>Type</code>类可为<code>Boolean</code> <code>Byte</code> <code>Double</code> <code>Float</code> <code>Int</code> <code>Long</code> <code>Short</code></td></tr><tr><td style="text-align:center"><code>nextType()</code></td><td style="text-align:center">返回输入中的下一个<code>Type</code>类小节。若没有小节或者小节不是<code>Type</code>类，返回错误</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>hasNextLine()</code></td><td style="text-align:center">如果输入中还有另外一行文本，返回<code>true</code></td></tr><tr><td style="text-align:center"><code>nextLine()</code></td><td style="text-align:center">返回一整行的输入到回车结束（包括空格），并把光标移到下一行的开头</td></tr><tr><td style="text-align:center"><code>findInLine(Stirng s)</code></td><td style="text-align:center">尝试寻找输入的一行中是否有给定字符<code>s</code>。 若有则返回此字符并把光标移到此字符后，若无则返回<code>null</code>并且不移动光标。</td></tr></tbody></table></div><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.<br>Java转义字符, <em>知乎专栏</em>. <a href="https://zhuanlan.zhihu.com/p/30158394" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30158394</a> (accessed Sep. 14, 2021).</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Java相关的基础知识十分重要，会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
      <category>表达式、控制流与I/O</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习1-声明和初始化与修饰符</title>
    <link href="/2021/09/02/Java-learning-1/"/>
    <url>/2021/09/02/Java-learning-1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><p>本文将记录Java基础学习的两大内容 - <strong>声明 (Declarations)</strong> 和<strong>初始化 (Initialization)</strong> 与 <strong>修饰符 (Modifiers)</strong>。</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>先上代码：</p><p><strong><em>Book.java</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih; <span class="hljs-comment">// package named "ultrafish"</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> safe = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> bookAmount; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">000000</span>; <span class="hljs-comment">// private field</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> subBookId = <span class="hljs-number">000000</span>; <span class="hljs-comment">// protected field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> totalBookUnm; <span class="hljs-comment">// static field</span><br><br>    Book()&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-string">"NoBookName"</span>); <span class="hljs-comment">// "this" keyword used to Calling constructors from constructors</span><br>    &#125;<br>    Book(String initName)&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">1</span>);<br>        name = initName;<br>    &#125;<br>    Book(<span class="hljs-keyword">int</span> initBookAmount)&#123;<br>        bookAmount = initBookAmount;<br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象,请修改书名！"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">addAmount</span><span class="hljs-params">()</span></span>&#123;<br>        bookAmount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// "this" keyword used to refer to the current abject </span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name; <span class="hljs-comment">// "this" keyword used to solve the ambiguity</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seal</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Sealer.getSealed(<span class="hljs-keyword">this</span>));<br>        <span class="hljs-comment">// "this" keyword used to passing the current object to another method "Sealer.getSealed"</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">totalBookUnmAdd</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// static method</span><br>        totalBookUnm++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idNum)</span></span>&#123;<br>        id = idNum;<br>        System.out.println(<span class="hljs-string">"id set, is"</span>+id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">( Book book)</span></span>&#123;<br>        book.safe = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    textBook()&#123;<br>        textBook myTextBook = <span class="hljs-keyword">new</span> textBook();<br>        myTextBook.subBookId++;<br>        myTextBook.bookAmount++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">//</span><br>        System.out.println(myBook.page); <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//System.out.println(myBook.id); // Error</span><br>        System.out.println(myBook.subBookId); <span class="hljs-comment">//</span><br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-声明-Declarations-和初始化-Initialization"><a href="#1-声明-Declarations-和初始化-Initialization" class="headerlink" title="1. 声明 (Declarations)和初始化 (Initialization)"></a>1. 声明 (Declarations)和初始化 (Initialization)</h2><h3 id="1-1-属性声明与初始化"><a href="#1-1-属性声明与初始化" class="headerlink" title="1.1 属性声明与初始化"></a>1.1 属性声明与初始化</h3><p>在<a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/#1-%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7-Field" target="_blank" rel="noopener">之前文章的章节中</a>有大致介绍了类的属性。<br>属性又称成员变量，有不同的数据类型：</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型名称</th><th style="text-align:center">描述</th><th style="text-align:center">内存大小</th><th style="text-align:left">取值范围</th><th style="text-align:center">默认初始值</th></tr></thead><tbody><tr><td style="text-align:center"> <code>boolean</code></td><td style="text-align:center">布尔类型</td><td style="text-align:center">1b</td><td style="text-align:left"><code>true</code>  <code>false</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"> <code>char</code></td><td style="text-align:center">字符类型</td><td style="text-align:center">16b(2B)</td><td style="text-align:left">0x0000~0xffff (Unicode)</td><td style="text-align:center">\u0000</td></tr><tr><td style="text-align:center"> <code>byte</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">8b(1B)</td><td style="text-align:left">-128~127(2^8)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>short</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">16b(2B)</td><td style="text-align:left">-32768~32767(2^16)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>int</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">32b(4B)</td><td style="text-align:left">-2147483648~2147483647(2^32)</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"> <code>long</code></td><td style="text-align:center">整数类型</td><td style="text-align:center">64b(8B)</td><td style="text-align:left">-9223372036854775808~9223372036854775807(2^64)</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center"> <code>float</code></td><td style="text-align:center">单精度浮点类型</td><td style="text-align:center">32b(4B)</td><td style="text-align:left">1.4E-45~3.4028235E+38</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center"> <code>double</code></td><td style="text-align:center">双精度浮点类型</td><td style="text-align:center">64b(8B)</td><td style="text-align:left">4.9E-324~1.7976931348623157E+308</td><td style="text-align:center">0.0D</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> safe = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">char</span> word = <span class="hljs-string">"A"</span>;<br><span class="hljs-keyword">byte</span> page = <span class="hljs-number">1</span>; <br><span class="hljs-keyword">short</span> pageNum = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> bookNum = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">long</span> loogNum = <span class="hljs-number">10000L</span>; <span class="hljs-comment">//followed by an "L" or "l"</span><br><span class="hljs-keyword">float</span> floatNum = <span class="hljs-number">1.3333F</span>; <span class="hljs-comment">//followed by an "F" or "f"</span><br><span class="hljs-keyword">double</span> doubleNum = <span class="hljs-number">1.3333e30</span>D; <span class="hljs-comment">//followed by a "D" or "d"</span><br></code></pre></td></tr></table></figure><h3 id="1-2-方法声明与初始化"><a href="#1-2-方法声明与初始化" class="headerlink" title="1.2 方法声明与初始化"></a>1.2 方法声明与初始化</h3><p>参考<a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/#2-%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-Method" target="_blank" rel="noopener">之前的文章章节</a>。</p><h3 id="1-3-this-关键字"><a href="#1-3-this-关键字" class="headerlink" title="1.3 this 关键字"></a>1.3 <code>this</code> 关键字</h3><p>看以下案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">000000</span>;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 声明一个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idNum)</span></span>&#123;<br>        id = idNum;<br>        System.out.println(<span class="hljs-string">"id set, is"</span>+id);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用此方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>思考：<br><code>setId(int idNum)</code>只有一个参数，可是在对象调用的时候只把参数值<code>000001</code>传递给了<code>setId(int idNum)</code>方法，并没有告知方法所对应的具体对象 (myBook)。</p></blockquote><p>实际上，Java在编译此代码时，会编译成以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Book <span class="hljs-keyword">this</span>, <span class="hljs-keyword">int</span> idNum)</span></span>&#123;<span class="hljs-comment">/*...*/</span>&#125; <span class="hljs-comment">// 声明一个方法</span><br>myBook.setId(myBook, <span class="hljs-number">000001</span>); <span class="hljs-comment">// 调用此方法</span><br></code></pre></td></tr></table></figure></p><blockquote><p>解释：<br>编译后，会在自动添加一个参数<code>this</code>，通过此参数把<strong>目前操作的对象</strong>传递到相应的方法中去。</p></blockquote><hr><p> <code>this</code> 关键字可以用在非静态方法中，使其指向正在调用此方法的对象。</p><p>通常用在这4种场景中：</p><blockquote><p>1.当语句出现重名导致语义不清（ambiguity）时，使用 <code>this</code> 使其指向正在调用的对象，例如：</p></blockquote><p>看一个案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        name = name; <br>&#125;<br></code></pre></td></tr></table></figure><p> <code>setName()</code> 方法是用来设定 <code>name</code> 属性的值，使其被赋值成方法中的String参数。<br>可是第二行的语句 <code>name = name;</code> 是有问题的。对象的属性名和方法的参数重名了，造成了ambiguity（模糊不清）。<br>这时就需要 <code>this</code> 关键字了，使第一个 <code>name</code> 清楚的代表对象的属性名。修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name; <span class="hljs-comment">// "this" keyword used to solve the ambiguity</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>2.用于return中，返回当前正在调用的对象，可以实现类似于递归的功能，例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">addAmount</span><span class="hljs-params">()</span></span>&#123;<br>        bookAmount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// "this" keyword used to refer to the current abject </span><br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        <span class="hljs-comment">//addAmount()的返回值即为当前调用的对象，因此可以反复调用自身，功能类似于自加</span><br>        myBook.addAmount().addAmount().addAmount(); <br>        <span class="hljs-comment">//*****************************************</span><br>        myBook.seal();<br>    &#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>3.当一个方法内部需要访问到外部类的其他方法时，可以使用 <code>this</code> 传递现在指向的对象，例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seal</span><span class="hljs-params">()</span></span>&#123; <br>            System.out.println(Sealer.getSealed(<span class="hljs-keyword">this</span>));<br>            <span class="hljs-comment">// "this" keyword used to passing the current object to another method "Sealer.getSealed（）"</span><br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal(); <span class="hljs-comment">//调用方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">( Book book)</span></span>&#123;<br>        book.safe = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>4.<code>this</code> 关键字可以在构造函数中调用另一个构造函数，例子如下：</p><blockquote><p>注：当一个类有多个构造函数时，即包含了无参构造方法 <code>Book()</code> 和有参构造方法 <code>Book(String initName)</code> ，会根据<code>new</code> 时调用的构造函数来选择。即：<code>new Book()</code>调用<code>Book()</code>, <code>new Book(&quot;MyBook&quot;)</code>调用<code>Book(String initName)</code>, <code>new Book(100)</code>调用<code>Book(int initBookAmount)</code>，参数的数据类型需要一一对应。</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">Book()&#123;<br>    <span class="hljs-keyword">this</span>(<span class="hljs-string">"NoBookName"</span>); <span class="hljs-comment">// mian() 方法调用的是 Book() 无参构造方法</span><br>    <span class="hljs-comment">// this("NoBookName"); 相当于 Book("NoBookName");，因此调用 Book(String initName) 有参构造方法</span><br>&#125;<br>Book(String initName)&#123; <span class="hljs-comment">// 被this("NoBookName"); 调用</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 相当于 Book(1);，因此调用 Book(int initBookAmount) 有参构造方法</span><br>    name = initName;<br>&#125;<br>Book(<span class="hljs-keyword">int</span> initBookAmount)&#123; <span class="hljs-comment">// 被 this(1); 调用</span><br>    bookAmount = initBookAmount;<br>    System.out.println(<span class="hljs-string">"成功创建一个Book类对象,请修改书名！"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Book myBook  = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">//调用无参构造方法 Book()</span><br>    myBook.setId(<span class="hljs-number">000001</span>);<br>    System.out.println(myBook.name);<br>    myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>    System.out.println(myBook.getName());<br>    System.out.println(Book.totalBookUnm); <br>    myBook.addAmount().addAmount().addAmount();<br>    myBook.seal(); <br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><blockquote><p>当一个构造方法有两个参数时，如：<code>Book(String initName，int initBookAmount)</code>, 使用<code>this</code>关键字只能传递一个参数，即<code>this(&quot;NoBookName&quot;);</code>或<code>this(1);</code>, 结合体<code>this(&quot;NoBookName&quot;,1);</code>是不合法的。</p></blockquote><hr><h2 id="2-修饰符-Modifiers"><a href="#2-修饰符-Modifiers" class="headerlink" title="2. 修饰符 (Modifiers)"></a>2. 修饰符 (Modifiers)</h2><h3 id="2-1-static-修饰符"><a href="#2-1-static-修饰符" class="headerlink" title="2.1 static 修饰符"></a>2.1 <code>static</code> 修饰符</h3><p>通常来说，当一个类创建完成后，我们就完成了这个类静态部分和动态部分的描述。但是只有当我们使用<code>new</code>关键字创建后才会真正得到一个此类的对象，并且储存这个对象的属性以及激活这个对象的方法。</p><p>但是如果 </p><blockquote><ol><li><strong>用户只想把这一类的某一个属性或者方法储存在同一个内存中，并且想统一管理，不管此类创建了多少对象</strong>;</li><li>再或者 <strong>想在创建此类的的对象前就能访问类的静态和动态部分，不关联任何一个此类的对象</strong>。</li></ol><p>举个实例：</p><p>创建一个名为<code>纸质书</code>的类, 并创建一个名为<code>材质</code>的属性。那通常来说<code>纸质书</code>类的<code>材质</code>属性值就为<code>纸</code>，适用于所有的<code>纸质书</code>对象，不需要为每一位对象单独添加一个<code>材质</code>属性，只需要统一管理。并且不需要创建任何对象，就可以访问或者修改<code>材质</code>属性值。</p></blockquote><p>那我们可以说这一类属性或方法是<strong>统一的或者是静态的（static）</strong>，那在Java中这一类的就用<code>static</code>修饰符来修饰其静态的特征。</p><p>举例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> totalBookUnm; <span class="hljs-comment">// static field</span><br></code></pre></td></tr></table></figure><br>上述例子中，在Book类中创建了一个名为<code>totalBookUnm</code>的静态属性。并在下面对其进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//访问静态属性，直接使用类名Book，无须使用对象名myBook</span><br>        myBook.seal();<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意：</p><blockquote><ol><li>类的静态属性和方法不会联系到类所创建的任何一个特定的对象；</li><li>无须创建一个此类的对象即可访问到此类的静态属性和方法；</li><li>对于非静态的属性和方法，必须创建一个此类的对象才能访问。</li></ol></blockquote><p>静态属性和方法最大的用处就是，它允许我们在不创建然后此类的对象的条件下都可以访问其属性和方法。</p><p>主函数（主方法）<code>main()</code> 就是一个静态方法，无须创建对象即可访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br></code></pre></td></tr></table></figure><p> <code>static</code> 看起来有如此高的访问权限，当它遇到访问权限修饰符 <code>public</code>, <code>protected</code> 和 <code>private</code> 的时候会发生什么呢，下文会提到。</p><hr><h3 id="2-2-访问权限修饰符-Access-Control-Modifiers"><a href="#2-2-访问权限修饰符-Access-Control-Modifiers" class="headerlink" title="2.2 访问权限修饰符 (Access Control Modifiers)"></a>2.2 访问权限修饰符 (Access Control Modifiers)</h3><p>Java是一门面向对象的编程语言 (Object Oriented Programming)，封装性 (Encapsulation)是其一大特征, 旨在把过程抽象并隐藏起来，并只允许客户访问必要的要素，这样可以保护项目的安全，不会担心外部客户影响内部功能，也可以避免内部功能的改变影响到客户对项目的使用。因此访问控制 (Access Control) 就起到了看门人的作用，设置了三道拥有不同权限的门，即<code>public</code>, <code>protected</code> 和 <code>private</code>，称为访问权限修饰符 (Access Control Modifiers)。</p><h4 id="2-2-1-public"><a href="#2-2-1-public" class="headerlink" title="2.2.1 public"></a>2.2.1 <code>public</code></h4><p><code>public</code> 的属性和方法是对所有人开放的，包括 <strong>本类，子类，同包内的类，不同包内的类</strong>。例如：</p><p><strong><em>Book.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> safe = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// public field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> bookAmount; <span class="hljs-comment">// public field</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">addAmount</span><span class="hljs-params">()</span></span>&#123; <br>        bookAmount++; <span class="hljs-comment">// 类内方法访问 public 属性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123; <span class="hljs-comment">// public method</span><br>        <span class="hljs-keyword">this</span>.name = name; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">// 访问 public 属性</span><br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>); <span class="hljs-comment">// 访问 public 方法</span><br>        System.out.println(myBook.getName()); <span class="hljs-comment">// 访问 public 方法</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">( Book book)</span></span>&#123;<br>        book.safe = <span class="hljs-keyword">true</span>; <span class="hljs-comment">//其他类访问 public 属性</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    textBook()&#123;<br>        textBook myTextBook = <span class="hljs-keyword">new</span> textBook();<br>        myTextBook.subBookId++;<br>        myTextBook.bookAmount++; <span class="hljs-comment">//子类访问 public 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">// 同包的类访问 public 属性</span><br>        System.out.println(myBook.page); <span class="hljs-comment">// 同包的类访问 public 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-protected"><a href="#2-2-2-protected" class="headerlink" title="2.2.2 protected"></a>2.2.2 <code>protected</code></h4><p><code>protected</code>的属性和方法相比于<code>public</code>减少了外部类（不同包的类）的访问权限，强调了继承类的访问，权限包括 <strong>本类，子类，同包内的类</strong>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> subBookId = <span class="hljs-number">000000</span>; <span class="hljs-comment">// protected field</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>);<br>        System.out.println(myBook.name);<br>        myBook.setName(<span class="hljs-string">"MyFirstBook"</span>);<br>        System.out.println(myBook.getName());<br>        System.out.println(Book.totalBookUnm); <br>        myBook.addAmount().addAmount().addAmount();<br>        myBook.seal();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    textBook()&#123;<br>        textBook myTextBook = <span class="hljs-keyword">new</span> textBook();<br>        myTextBook.subBookId++; <span class="hljs-comment">//子类访问 protected 属性</span><br>        myTextBook.bookAmount++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>);<br>        System.out.println(myBook.subBookId); <span class="hljs-comment">// 同包的类访问 protected 属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-3-private"><a href="#2-2-3-private" class="headerlink" title="2.2.3 private"></a>2.2.3 <code>private</code></h4><p><code>private</code>的属性和方法限制最多，<strong>只有其所在的类可以访问。其子类，或者同一包内的类都不能访问</strong>。例如：</p><p><strong><em>Book.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">000000</span>; <span class="hljs-comment">// private field</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idNum)</span></span>&#123; <span class="hljs-comment">// private method</span><br>        id = idNum;<br>        System.out.println(<span class="hljs-string">"id set, is"</span>+id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book();<br>        myBook.setId(<span class="hljs-number">000001</span>); <span class="hljs-comment">// No error, in a same class with field "id" and method "setId"</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// foreign class and method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">( Book book)</span></span>&#123;<br>        book.safe = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>        book.setId(<span class="hljs-number">000002</span>); <span class="hljs-comment">// Error, access setId() in a foreign class</span><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    textBook()&#123;<br>        textBook myTextBook = <span class="hljs-keyword">new</span> textBook();<br>        myTextBook.setId(<span class="hljs-number">000003</span>); <span class="hljs-comment">// Error, access setId() in a child class</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong><em>Tool.java</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>);<br>        System.out.println(myBook.id); <span class="hljs-comment">// Error, access setId() in another class in a same package</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>private</code>成员甚至限制了开发者对于项目的访问权限，但是这也减小了在修改此成员时对处于同一包内其他类的影响。</p><hr><h4 id="2-2-4-static与-public-protected-和-private"><a href="#2-2-4-static与-public-protected-和-private" class="headerlink" title="2.2.4 static与 public, protected 和 private"></a>2.2.4 <code>static</code>与 <code>public</code>, <code>protected</code> 和 <code>private</code></h4><p>上文提过，<code>static</code>看起来有如此高的访问权限，到那时访问权限修饰符(access specifiers)的等级还是高于<code>static</code>，当遇到<code>private static</code>时， 修饰的对象还是只有其所在的类可以访问。</p><hr><h3 id="2-3-final-修饰符"><a href="#2-3-final-修饰符" class="headerlink" title="2.3 final 修饰符"></a>2.3 <code>final</code> 修饰符</h3><p><code>final</code> 修饰符是用来修饰某一成员是一个常量，是不能被修改的。<code>final</code> 修饰符可以用来修饰类的属性，参数，方法以及一整个类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> safe = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// safe 属性被final修饰，其值只能被对象读取，无法被修改</span><br></code></pre></td></tr></table></figure><h4 id="2-3-1-final-属性"><a href="#2-3-1-final-属性" class="headerlink" title="2.3.1 final 属性"></a>2.3.1 <code>final</code> 属性</h4><p>属性(field)常量指的是类的某一属性值为常量，分为编译时常量( <em>compile-time</em> constant)和空白常量(blank finals)</p><h5 id="2-3-1-1-编译时常量"><a href="#2-3-1-1-编译时常量" class="headerlink" title="2.3.1.1 编译时常量"></a>2.3.1.1 编译时常量</h5><p>编译时常量( <em>compile-time</em> constant)需要在声明时被初始化，即给定属性值，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> safe = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// safe 属性被final修饰，为编译时常量，需要被赋值</span><br></code></pre></td></tr></table></figure></p><p>当 <code>final</code> 和 <code>static</code> 修饰符同时修饰一个属性时，此属性名通常由大写字母组成，并且词间用下划线(_)分割，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TOTAL_BOOK_NUM = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><hr><blockquote><p>注：当 <code>static final</code> 修饰一个属性时，此属性值不会随着对象的创建而改变，这也是 <code>static</code>修饰符自带的特性。而当仅仅一个 <code>final</code> 修饰属性时，其属性值可能会随着对象的创建而修改，但是在对象创建后，此属性值不能被修改，<br>例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">finalTest</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INT_ONE = rand.nextInt(<span class="hljs-number">10</span>); <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> int_two = rand.nextInt(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>两个属性<code>INT_ONE</code>和<code>int_two</code>都被赋值成随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">finalTest t1 = <span class="hljs-keyword">new</span> finalTest();<br>finalTest t2 = <span class="hljs-keyword">new</span> finalTest();<br></code></pre></td></tr></table></figure><p>创建两个对象t1和t2，假设创建后t1两个属性为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">t1.INT_ONE = <span class="hljs-number">5</span>;<br>t1.int_two = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">t2.INT_ONE = <span class="hljs-number">5</span>; <span class="hljs-comment">// 静态的、编译时常量，不会随着不同对象的创建而变化，创建后属性值也不能被覆盖</span><br>t1.int_two = <span class="hljs-number">3</span>; <span class="hljs-comment">// 编译时常量，会随着不同对象的创建而变化，但是创建后属性值不能被覆盖</span><br></code></pre></td></tr></table></figure><p>同时，这个例子也表明了，编译时常量( <em>compile-time</em> constant)并不代表在表达式内就需要明确属性值，<code>INT_ONE</code>和<code>int_two</code> 都是在运行程序时被<strong>随机数函数</strong>赋值的。</p><hr><h5 id="2-3-1-2-空白常量"><a href="#2-3-1-2-空白常量" class="headerlink" title="2.3.1.2 空白常量"></a>2.3.1.2 <strong>空白常量</strong></h5><p>空白常量 (blank final) 不需要需要在声明时被初始化，即不需要给定属性值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> safe;<br></code></pre></td></tr></table></figure><p>但是空白常量在使用前必须被赋值，通常会在<strong>构造方法</strong>中进行赋值。</p><p>总之，不管是 <strong>编译时常量( <em>compile-time</em> constant)</strong> 还是 <strong>空白常量 (blank final)</strong> 都需要在使用前被赋值，即在声明中或者构造方法中被赋值。</p><hr><h4 id="2-3-2-final-参数"><a href="#2-3-2-final-参数" class="headerlink" title="2.3.2 final 参数"></a>2.3.2 <code>final</code> 参数</h4><p><code>final</code> 参数可以修饰某一方法的<strong>形式参数</strong>为常量，在这个方法内，不能对此<strong>形式参数所指向的参数</strong>进行修改，只能读取此参数值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Book book)</span></span>&#123;<br>        book = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">// Error, illegal to rewrite "book"</span><br>        book.safe = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> idNum)</span></span>&#123;<br>        idNum++; <span class="hljs-comment">// Error, illegal to rewrite "idNum"</span><br>        id = idNum + <span class="hljs-number">1</span>; <span class="hljs-comment">// OK, can only read "idNum"</span><br>        System.out.println(<span class="hljs-string">"id set, is"</span>+id);<br>    &#125;<br></code></pre></td></tr></table></figure></p><hr><h4 id="2-3-3-final-方法"><a href="#2-3-3-final-方法" class="headerlink" title="2.3.3 final 方法"></a>2.3.3 <code>final</code> 方法</h4><p> <code>final</code> 方法用来修饰某一类的方法为常量，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br></code></pre></td></tr></table></figure><p> <code>final</code> 方法主要有两个目的：</p><blockquote><ol><li>保护一个类的某一方法被重写，尤其是保护此方法被此类的继承类（子类）重写，例如：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getName()为父类Book的一个final方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br><span class="hljs-comment">//textBook是继承Book的子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写父类的方法</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"This textBook's name is, "</span> + name); <span class="hljs-comment">// Error, getName()为父类Book的一个final方法，不能被重写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><ol><li>提高代码的运行效率。<br>编译时，编译器会优先运行被final修饰的方法，因此程序员可以根据需求，告知编译器需要优先运行那一部分的方法。然而在Java SE 5/6中，编译器以及JVM会处理程序的编译优先级，自动提高运行效率。</li></ol></blockquote><p>总之，目前只有当程序员需要保护某些方法不被重写才会使用到 <code>final</code>。</p><hr><p>注意：</p><blockquote><p><strong>当 <code>final</code> 和 <code>private</code>同时修饰一个方法：</strong><br>事实上任何 <code>private</code>方法都是 <code>final</code>，因为不能从一个类的外部访问<code>private</code>方法，因此当然不能对其进行修改，成为 <code>final</code>。所以给一个 <code>private</code>方法加上 <code>final</code>修饰符并没有什么意义。</p><p><strong>但是当在重写一个 <code>final private</code>方法时，情况会变得不一样，举例：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getName()和getBookName()为父类Book的两个方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getBookName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"The name is: "</span> + name);<br>    &#125;<br><br><span class="hljs-comment">//textBook是继承Book的子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">textBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写父类Book的方法(private final)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"This textBook's name is, "</span> + name); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getBookName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写父类Book的方法(private)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"This textBook's name is, "</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//workBook是继承textBook的子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">workBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">textBook</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写父类textBook的方法(public final)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"This workBook's name is, "</span> + name); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBookName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 重写父类textBook的方法(public)</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"This workBook's name is, "</span> + name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在main()中运行以下代码：</span><br><span class="hljs-comment">// 下面的代码正常运行，无报错</span><br>textBook myTextBook = <span class="hljs-keyword">new</span> textBook(<span class="hljs-string">"newTextBook"</span>);<br>myTextBook.getName();<br>myTextBook.getBookName();<br><span class="hljs-comment">// **********************</span><br><span class="hljs-comment">// 下面的代码运行失败，报错</span><br>workBook myTextBook2 = myTextBook; <span class="hljs-comment">// upcating</span><br>myTextBook2.getName();<br>myTextBook2.getBookName();<br></code></pre></td></tr></table></figure><p>解释：</p><blockquote><p>子类不能重写父类中的 <code>final</code>方法是因为每当子类运行重写父类的方法时，都会回溯到父类，与父类中的被继承方法进行连接，但是因为<code>final</code>而被阻止。<br><strong>但是当子类“重写父类<code>private</code>方法”时，子类并不能访问到父类的<code>private</code>方法，这也正是<code>private</code>修饰的特性。因此这个看似“重写父类<code>private</code>方法”方法，并没有重写父类的方法，只是在子类中创建了一个属于子类的新方法，只不过与父类方法刚好重名了，所以并无关联。</strong><br>而例子中不能运行的代码，是因为没有重写父类方法而导致不能使用<a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">多态(Polymorphism)</a>。</p></blockquote><h4 id="3-3-4-final-类"><a href="#3-3-4-final-类" class="headerlink" title="3.3.4 final 类"></a>3.3.4 <code>final</code> 类</h4><p><code>final</code> 类修饰的是整个类，修改整个类或者对此类进行继承都是不允许的。<code>final</code> 类可以保障一个类的安全，适用于一个不用被修改的类，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sealer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getSealed</span><span class="hljs-params">( Book book)</span></span>&#123;<br>        book.safe = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">"Sealed!"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个类被 <code>final</code> 修饰后，其<strong>属性值</strong>还是可以被改变，也可以选择其<strong>属性</strong>是否被 <code>final</code>进行修饰。<br>但是其<strong>方法</strong>就同样为<code>final</code>，不能被修改，这样才保证了 <code>final</code>类不会被继承，其<strong>方法</strong>不会被重写。<code>final</code>类中的方法前可选加<code>final</code>修饰符，但是不会有任何其他意义。</p><hr><h3 id="2-4-package-语句"><a href="#2-4-package-语句" class="headerlink" title="2.4 package 语句"></a>2.4 <code>package</code> 语句</h3><p>在Java中，每个独立的<code>public</code>类都被安排在分开的文件夹中，每个文件夹中可能还包括其他的非<code>public</code>的类。为了更好的管理这些有关联的类，可以应用到<code>package</code>。<code>package</code>包含了一组class，并且被管理在统一的<code>namespace</code>（命名空间）下。<br>这些有关系的类必须放在一个名<code>packageName</code>的文件夹中，并且每个类的源文件必须把以下代码写在开头：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> packageName;<br></code></pre></td></tr></table></figure></p><p>例如，定义一个名为<code>triangle</code>的 <strong><em>package</em></strong>，并包含<code>RightTriangle</code>，<code>IsoscelesTriangle</code>两个类，那必须在这两个类文件开头写出 <strong><em>package</em></strong> 语句，否则这两个文件就被放在 <strong><em>default package</em></strong> 中。如果需要引用package中的类，就需要使用fully qualified name，例如：</p><blockquote><p><code>triangle.RightTriangle</code> ：引用<code>RightTriangle</code>类<br><code>triangle.IsoscelesTriangle</code> ：引用<code>IsoscelesTriangle</code>类</p></blockquote><p>同时，在 <strong><em>package</em></strong> 文件夹中也可以定义子文件夹，并通过fully qualified name去引用，以<code>Scanner</code>类举例：</p><blockquote><p><code>Scanner</code>类位于java.util这一子文件夹中，可以用以下语句引用到<code>Scanner</code>类：<br><code>java.util.Scanner</code></p></blockquote><hr><p>如果要引用<code>Scanner</code>类创建对象，则可以使用它的fully qualified name：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.Scanner input = <span class="hljs-keyword">new</span> java.util.Scanner(System.in);<br></code></pre></td></tr></table></figure></p><p>但是每次都使用fully qualified name会十分麻烦，那就可以使用import语句导入某个类或者一整个package，如下：</p><blockquote><p><code>import packageName.className;</code>或者<br><code>import packageName.*;</code></p></blockquote><p>以<code>Scanner</code>类为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">// 导入一个类</span><br><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-comment">// 导入一整个package</span><br></code></pre></td></tr></table></figure></p><p>则在创建对象时就可以使用类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner<br><span class="hljs-comment">// import java.util.*</span><br>Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果从两个不同的package中import两个相同名字的类，或者import的类与现有现有的类重名的话，单单使用一个unqualified name是不合法的，如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> abox.tool;<br><span class="hljs-keyword">import</span> bbox.tool;<br>tool myTool =  <span class="hljs-keyword">new</span> tool(); <span class="hljs-comment">// Error!</span><br>abox.tool myToola = <span class="hljs-keyword">new</span> abox.tool(); <span class="hljs-comment">// OK</span><br>bbox.tool myToolb = <span class="hljs-keyword">new</span> bbox.tool(); <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><hr><p>例如：</p><p>此语句同时写在Book.java和Tool.java两个文件中，因此两个文件可以互相访问对方的class。</p><p><strong><em>Tool.java</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ultrafsih;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Book myBook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>);<br>        System.out.println(myBook.name); <span class="hljs-comment">//访问Book类的属性</span><br>        System.out.println(myBook.page); <span class="hljs-comment">//访问Book类的属性</span><br>        <span class="hljs-comment">//System.out.println(myBook.id); // Error</span><br>        System.out.println(myBook.subBookId); <span class="hljs-comment">//</span><br>        System.out.println(Book.totalBookUnm); <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>Tool类因为包含在<code>ultrafish package</code>中，因此它可以直接访问同样在package中Book类属性以及方法。因此使用package可以很方便的管理需要访问不同Java文件的Java开发工程。</p><blockquote><p>注意:</p><ol><li><code>package</code>语句必须写在Java文件除注释以外的第一行；</li><li><code>package</code>语句中的包名一般使用小写字母。</li><li>建议把包文件放在同一个子目录下，可以解决 <strong>重名</strong> 以及 <strong>寻找class不易</strong> 的问题</li></ol></blockquote><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Java相关的基础知识十分重要，会继续学习，继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
      <category>声明和初始化与修饰符</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog3.0-开发UltraFish Plus页面 &amp; 安装SSL证书开启https &amp; 更换主题为fluid</title>
    <link href="/2021/07/27/blog3/"/>
    <url>/2021/07/27/blog3/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2020/07/29/hello-ultrafisher/" target="_blank" rel="noopener">blog1.0更新-第一篇文章 “Hello UltraFisher”</a><br><a href="https://ultrafish.cn/2020/10/15/blog2/" target="_blank" rel="noopener">blog2.0更新-部署到阿里云服务器以及更新域名 </a><br><a href="https://ultrafish.cn/2021/07/27/blog3/" target="_blank" rel="noopener">blog3.0更新-开发UltraFish Plus页面 &amp; 安装SSL证书开启https &amp; 更换主题为fluid</a></p></blockquote><h2 id="UltraFish回顾"><a href="#UltraFish回顾" class="headerlink" title="UltraFish回顾"></a>UltraFish回顾</h2><h3 id="blog1-0"><a href="#blog1-0" class="headerlink" title="blog1.0"></a>blog1.0</h3><p>2020年7月29日，也就是一年前，我发布了第一篇文章<a href="https://ultrafish.cn/2020/07/29/hello-ultrafisher/" target="_blank" rel="noopener">第一篇文章 “Hello UltraFisher”</a>，标志着我正式建立起我的博客网站并发布在公网上，当时我用的是<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo框架</a>、<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia主题</a>并且部署在GitHub上，起名为<a href="https://ultrafisher.github.io" target="_blank" rel="noopener">UltraFisher</a>(点击链接还可以访问，但已停止更新和维护)<br><a id="more"></a></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/1.png?versionId=CAEQGxiBgMDw.peb1xciIDcwYmEwNmQxMWRmNzQwYmY5MzM5ZTVmMDk5ZDE0ODZl" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog1.0-UltraFisher网站</div></center><hr><h3 id="blog2-0"><a href="#blog2-0" class="headerlink" title="blog2.0"></a>blog2.0</h3><p>2020年10月15日，我发布了blog2.0的更新文章<a href="https://ultrafish.cn/2020/10/15/blog2/" target="_blank" rel="noopener">blog2.0-部署到阿里云服务器以及更新域名</a>。框架和主题都没有变化，但从GitHub部署到了阿里云ECS云服务器部署，提高了在国内的访问速度，并且购买以及使用了新的域名（ultrafish.cn）。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/2.png?versionId=CAEQGxiBgMCm_peb1xciIGQxZGIwYmQ2YTE4NzRkYjlhMTFiMDViZWJkMmQ4NWU0" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog2.0-UltraFish网站</div></center><hr><p>而今天，2021年7月27日，临近建站1周年，迎来了blog3.0！</p><h2 id="blog3-0"><a href="#blog3-0" class="headerlink" title="blog3.0"></a>blog3.0</h2><p>主要更新了三个地方:</p><blockquote><ol><li>新增了UltraFish Plus开发性页面;</li><li>安装了SSL证书，开启https访问;</li><li>主题从yilia改为fluid</li></ol></blockquote><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>首先看一眼外观</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/3.png?versionId=CAEQGxiBgICU.Zeb1xciIGY5NTMxNTkwNzM1ODQ5NDBhNTYwYzMzZTBhNWMxOTg5" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/6.png?versionId=CAEQGxiBgICX.Zeb1xciIDhiZjcxYzBmMjI1MTRhOGFiMzNmMzVlMmRlNDdmYjlj" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/4.png?versionId=CAEQGxiBgMDY.5eb1xciIDcxM2Y0MDgzZmIyNzRmNzc4NDMyMDBmMmYxMDdkMjA4" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish所有文章页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/5.png?versionId=CAEQGxiBgIDl_peb1xciIDlhYTg2NDcyZWZkNjQ2YTM5Y2E3ZGZmNGQzMTI1ODhi" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">blog3.0-UltraFish关于我页</div></center><hr><h3 id="新增UltraFish-Plus开发性页面"><a href="#新增UltraFish-Plus开发性页面" class="headerlink" title="新增UltraFish Plus开发性页面"></a>新增UltraFish Plus开发性页面</h3><p><a href="https://ultrafish.cn/plus/index.html" target="_blank" rel="noopener">UltraFish Plus</a>这个页面和博客页面划分了开来，可以让我脱离现成的框架自己开发一些项目或者实现可视化操作。<br>例如之前的文章<a href="https://ultrafish.cn/2020/09/19/Signed-binary-number-representation/" target="_blank" rel="noopener">有符号二进制数表示方法Signed binary number representation</a>中提供了有符号二进制数的转换方法及其代码，因此我就在UltraFish Plus中加入了一个可交互的<a href="https://ultrafish.cn/plus/files/signed_binary_number_representation.html" target="_blank" rel="noopener">有符号二进制数转换器 Signed binary number convertor</a>，浏览者以及我可以使用它进行交互。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/7.png?versionId=CAEQGxiBgMCy.Jeb1xciIDUyNDU4ODY2OWFjYjRkODdiMzc4ZmE1NGU4YzJmNjJi" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish Plus主页</div></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/8.png?versionId=CAEQGxiBgMDH.peb1xciIGI1ZWNiYTliZTg3ZjQyOTdhNDQxYjlkODQzYjRhZjQx" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish Plus-有符号二进制数转换器 Signed binary number convertor</div></center><p>虽然有些项目网上已经存在了，但是通过自己的开发还是能学到很多知识，积累一定经验的。UltraFish Plus里的项目开发周期都比较长，因此更新频率不会很快。</p><hr><h3 id="安装SSL证书-开启https访问"><a href="#安装SSL证书-开启https访问" class="headerlink" title="安装SSL证书 开启https访问"></a>安装SSL证书 开启https访问</h3><p>使用新的域名后，并没有安装SSL证书，导致每次访问的网站都会显示“不安全”，在各大搜索引擎搜索时也会有限制，网站安全性也不高。我就在阿里云上购买了SSL证书，并花了九牛二虎之力配置到了服务器中。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/9.png?versionId=CAEQGxiBgMCi95eb1xciIDFjOTYyYzBiYzE4ZDRlMWNhNGU0MGY3ZDhhY2RjZDc0" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">安全访问</div></center><hr><h3 id="使用fluid主题"><a href="#使用fluid主题" class="headerlink" title="使用fluid主题"></a>使用fluid主题</h3><p>之前一直使用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia主题</a>，它简约并不简单，开发时间比较早，网上也有很多对问题的解决方法。但是过度的动画不太流畅，对手机移动端的支持不太好，加载时间较长，最主要的是作者最新一次的更新已经是2017年了。<br>因此我就转到了一个2020年开发出来的<a href="https://hexo.fluid-dev.com/docs/" target="_blank" rel="noopener">fluid主题</a>，就像它的名字一样，使用起来十分流畅，官方配置文档也很全面，网页加载也十分迅速。</p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/10.png?versionId=CAEQGxiBgIC3_peb1xciIGE4YWI5OTUzNDg4NTRhNmViMTcwMWNiNjVlNjljOTEw" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Fluid主题</div></center><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>UltraFish Plus会尽可能加快更新，新的主题也正在完善配置，会持续更新。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UltraFish Plus</tag>
      
      <tag>SSL</tag>
      
      <tag>https</tag>
      
      <tag>fiuid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《第二年》</title>
    <link href="/2021/07/04/second-year/"/>
    <url>/2021/07/04/second-year/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>嗨, 各位好.<br>两年前, 很多人知道我高考后去了香港大学(HKU), 实际上我去的读的并不是本科, 不是学士学位, 而是去读了<strong>副学士学位(Associate degree)</strong>, 类似内地的专科, 但不完全是, 因此我的学校是香港大学的附属学院 <strong><a href="https://www1.hkuspace.hku.hk/cc/" target="_blank" rel="noopener">香港大学专业进修学院-HKU SPACE (HKU School of Professional and Continuing Education)</a></strong> , 学习计算机工程学(Computer Engineering).</p><a id="more"></a><center><img src="/2021/07/04/second-year/1.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港大学专业进修学院-九龙东校区</div></center><center><img src="/2021/07/04/second-year/11.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">计算机工程(Computer Engineering)</div></center><p>读完两年课程之后才可以继续申报香港的大学, 修读本科的课程, 以拿到学士学位. 也有很多香港本地学生选择先读副学士再申请大学. 申请的条件是基于我<strong>副学士两年的成绩(GPA)、雅思成绩以及软实力</strong>. 当时我的目标就是留在香港继续念书, 并且升入香港前八所大学中的香港大学. </p><center><img src="/2021/07/04/second-year/2.jpeg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港八大</div>    </center><p>因此我也不断努力, 而且副学士文凭在内地是不认可的, 所以我只能向前, 升入本科, 别无选择. 幸运的是, 课程内容都是我喜欢并且擅长的, 所以最终两年副学士的成绩(GPA)得到了4.0的满分; 雅思也拿到了6.5分; 软实力方面因为疫情的影响, 并没有参加比赛或实习, 但我参加了学校老师组织的暑期学习小组, 研究了MicroPython, 我也建立了我的第一个博客网站UltraFish(<a href="http://ultrafish.cn" target="_blank" rel="noopener">ultrafish.cn</a>), 把我平时的学习研究分享在了上面. 最后拿到了Recipient of Academic Excellence Award(学术优秀奖)、Student on Principal’s Honours List(校长荣誉名单)等奖项,也拿到了香港政府的Self-financing Post-secondary Scholarship Scheme(自资专上奖学金计划)的全额奖学金.</p><center><img src="/2021/07/04/second-year/3.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 2px;">GPA</div></center><center><img src="/2021/07/04/second-year/31.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 2px;">奖学金证书</div></center><center><img src="/2021/07/04/second-year/4.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">UltraFish网站</div></center><p>后来, 在和我们专业主管老师交谈中了解到, <strong>我们作为内地学生, 除非你出奇优秀, 相比于香港本地同学, 从副学士升学到学士是比较难的, 名额比较少, 尤其是香港的前三大学, 十分困难, 录取名额大概是80%本地学生, 20%非本地学生(包括内地副学士学生, 应届高考生, 国际高中学生, 国外学生等)</strong>. 也了解到我们专业到现在也只有一个内地学生从副学士升入了科技大学. 这让我意识到作为内地生的升学不易, 但我也只能继续努力.在之后的大学申请时期, 我申请了香港大学, 香港中文大学, 香港科技大学, 香港城市大学, 香港理工大学, 香港浸会大学这六所大学的与计算机工程相关专业. <strong>之后我先后收到了理工大学(大一入学), 中文大学(大三入学)以及浸会大学(大三入学)的面试. 最后拿到了理工大学(大一入学)以及浸会大学(大三入学)的录取, 其他的学校都没有成功录取, 也没有面试, 这也验证了之前老师的话. 最后我选择了香港理工大学(大一入学), 就读电子计算学(Computing), 类似计算机科学.</strong></p><center><img src="/2021/07/04/second-year/5.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">录取通知书</div></center><p><strong>香港理工大学在最新的QS2022全球大学排名中是66名, 前几年也在不断上前, 潜力很大.</strong> 目前我也收到了理工大学的学生签证, 将在理工从大一开始修读四年的课程, 我也能用副学士的课程转换一部分学分, 提前毕业.</p><center><img src="/2021/07/04/second-year/6.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">QS2022全球大学排名-香港地区</div></center><center><img src="/2021/07/04/second-year/7.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"></center><center><img src="/2021/07/04/second-year/8.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"></center><center><img src="/2021/07/04/second-year/9.jpg" srcset="/img/loading.gif" lazyload width="75%" height="75%"><br>    <div style="color:orange;     border-bottom: px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">香港理工大学校园</div></center><p><a href="https://www.polyu.edu.hk/sc/photo-gallery/" target="_blank" rel="noopener">点击查看更多图片&gt;&gt;</a></p><p>目前, 我副学士已经毕业了, 过去这两年的学习过程十分特别, 经历了香港的社会运动和紧接着的疫情, 导致两年课程大部分都是在网上进行的, 只有差不多两个月的线下课程, 但我大部分时间都留在香港. 好在两年的副学士学习压力并没有像本科课程那样大, 给我熟悉香港的生活和学习环境提供了机会, 我不仅从课上学习到了很多专业的基础知识, 摸索了学习方法, 而且也自学了很多新的内容, 探索了很多新的领域, 也能让我准备好应对之后的挑战. 毫无疑问, 之后在理工的学习压力和竞争会越来越大, 相信自己能够继续克服困难, 一直向前, 加油!</p><hr><p>引用:<br><a href="https://www.polyu.edu.hk/sc/photo-gallery/" target="_blank" rel="noopener">Photo Gallery-The Hong Kong Polytechnic University</a><br><a href="https://www.topuniversities.com/university-rankings/world-university-rankings/2022" target="_blank" rel="noopener">QS World University Rankings 2022</a><br><a href="https://www.163.com/dy/article/FLBMU2GR0538LBG4.html" target="_blank" rel="noopener">为什么要考香港“八大”？所有原因都在这里</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>第二年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>香港第二年</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hexo中用Markdown通过阿里云OSS添加视频文件</title>
    <link href="/2021/04/25/post-video-with-oss/"/>
    <url>/2021/04/25/post-video-with-oss/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/" target="_blank" rel="noopener">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/" target="_blank" rel="noopener">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/" target="_blank" rel="noopener">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>在我之前的文章<a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/" target="_blank" rel="noopener">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a>中介绍了如何在Blog中用Markdown添加本地视频或者网络视频. 但是都有限制: 本地视频受限于git, 能够上传的文件体积很小, 并且上传过大文件会<a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/" target="_blank" rel="noopener">引发错误</a>; 网络视频需要用户先把视频上传到视频平台 (如: bilibili, 优酷等) 才能添加到网站中, 并且视频分辨率不高.</p><p>于是, 我想到把视频放到云服务器中, 再让网站直接访问, 这样不必通过git上传文件, 也可以获取原来的画质. 我在升级我的<a href="http://ultrafish.cn/2020/10/15/blog2/" target="_blank" rel="noopener">blog2.0</a>时, 购买了阿里云的云服务器, 于是我想到可以用阿里云的OSS (Object Storage Service), 即对象存储来实现视频文件的添加.<br><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.11186623.6.540.488a4c13156lrt" target="_blank" rel="noopener">查看阿里云官方对OSS的介绍</a></p><p>把文件上传到OSS, 获取URL, 再把URL添加到文章中, 即可在文章中添加文件, 如: 视频、图片、音乐等.</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h3 id="开通对象存储OSS服务"><a href="#开通对象存储OSS服务" class="headerlink" title="开通对象存储OSS服务"></a>开通对象存储OSS服务</h3><p>先在阿里云官网注册一个账号 (若有可以跳过).<br>并在左侧产品与服务菜单栏中找到<strong>对象存储OSS</strong>, 点击即可进入开通页面.</p><p><img src="/2021/04/25/post-video-with-oss/1.jpg" srcset="/img/loading.gif" lazyload alt></p><hr><h3 id="创建Bucket并上传文件"><a href="#创建Bucket并上传文件" class="headerlink" title="创建Bucket并上传文件"></a>创建Bucket并上传文件</h3><p>Bucket是存放对象的容器, 可以存入文档, 照片, 视频等文件.<br>1.OSS服务开通后, 进入OSS页面, 点击左侧<strong>创建Bucket</strong>按钮:</p><p><img src="/2021/04/25/post-video-with-oss/2.jpg" srcset="/img/loading.gif" lazyload alt></p><p>2.填写<strong>Bucket名称</strong>, 存储类型选择<strong>标准存储</strong>, 读写权限选择<strong>公共读</strong>, 其他选项保持默认或根据需求修改, 最后点击确认:</p><p><img src="/2021/04/25/post-video-with-oss/3.jpg" srcset="/img/loading.gif" lazyload alt><br>现在, Bucket已经创建完成.</p><p>3.上传文件<br>点击创建好的Bucket名称, 进入管理页面. 点击<strong>上传文件</strong>, 选择文件即可上传:</p><p><img src="/2021/04/25/post-video-with-oss/4.jpg" srcset="/img/loading.gif" lazyload alt></p><hr><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>为确保上传的文件添加到博客网站后不被盗用以及下载, 需要给OSS设置防盗链.</p><p>在左侧菜单栏选择<strong>权限管理</strong>, 找到<strong>防盗链</strong>, 在<strong>Referer</strong>一栏中填入你的blog域名, 记得在域名前加上“ <em> ”, 以及在域名后加上“ / ”, 把权限扩大到blog网站的所有页面. 然后关闭<strong>空Referer</strong>选项, 最后点击<em>*保存</em></em>.</p><p><img src="/2021/04/25/post-video-with-oss/5.jpg" srcset="/img/loading.gif" lazyload alt></p><hr><h3 id="获取文件URL并添加相应代码到文章"><a href="#获取文件URL并添加相应代码到文章" class="headerlink" title="获取文件URL并添加相应代码到文章"></a>获取文件URL并添加相应代码到文章</h3><p>点击上传到Bucket的文件名, 即可找到文件URL, 并复制.</p><p>添加以下代码到文章的Markdown中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;video id=<span class="hljs-string">"video"</span> controls=<span class="hljs-string">""</span> preload=<span class="hljs-string">"none"</span> allowfullscreen=<span class="hljs-string">"true"</span> position= <span class="hljs-string">"absolute"</span> width=<span class="hljs-string">"100%"</span> poster=<span class="hljs-string">"你的URL"</span>&gt;<br>      &lt;source id=<span class="hljs-string">"mp4"</span> src=<span class="hljs-string">"你的URL"</span> type=<span class="hljs-string">"video/mp4"</span> &gt;<br>      &lt;<span class="hljs-regexp">/video&gt;</span><br></code></pre></td></tr></table></figure><br>把以上代码的两处<strong>你的URL</strong>替换成之前复制过来的<strong>文件URL</strong>.</p><p>效果如下:</p><p><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0"><br>      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0" type="video/mp4">      </video><br><em>( 视频来自我的文章: <a href="http://ultrafish.cn/2021/01/02/1kcpphny/" target="_blank" rel="noopener">用1000多行C++代码写给2021元旦的祝福-C++像素字实现方法</a> )</em></p><hr><p>引用:<br><a href="https://help.aliyun.com/product/31815.html?spm=a2c4g.11186623.6.540.488a4c13156lrt" target="_blank" rel="noopener">对象存储 OSS-阿里云</a></p><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>不仅仅可以使用OSS来上传视频, 网站中的图片, 音乐等都可以通过OSS来展示. 这样可以减少本地服务器(我的电脑)的压力, 也可以提高访问速度. 之后会继续尝试.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
      <tag>hexo</tag>
      
      <tag>OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino蓝牙模块相互通信</title>
    <link href="/2021/03/08/Arduino%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/03/08/Arduino%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>在使用Arduino做项目时, 各个元件都需要使用跳线与MCU或者其他元件连接, 一旦元件数量变多, 跳线数量也会变得很多很杂, 这不利于后期的整理和调整, 也会对信号的传输造成影响, 同时外观也不好看. 因此想用蓝牙代替传统的跳线, 并且能让蓝牙模块配合单片机实现互相通信.<br><a id="more"></a></p><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><blockquote><p>MCU: Arduino UNO R3 <em>2<br>蓝牙模块: HC-08D </em>2<br>USB-TTL转接板 : HC-USB-T V2.0 *2<br>HC-USB-P串口助手 (<a href="https://mikezhang.cowtransfer.com/s/e54b2e749ce646" target="_blank" rel="noopener">下载链接</a>)</p></blockquote><h3 id="蓝牙模块初始化"><a href="#蓝牙模块初始化" class="headerlink" title="蓝牙模块初始化"></a>蓝牙模块初始化</h3><p>为了使两块蓝牙模块能够互相连接, 首先需要用<strong>USB-TTL转接板 和 HC-USB-P串口助手</strong>把两块HC-08D初始化并且设置其中一个为主机.</p><blockquote><ol><li>给两块HC-08D上电</li><li>把其中一块HC-08D与USB-TTL转接板相互连接, 然后把USB-TTL转接板接上电脑</li><li>打开HC-USB-P串口助手, 选择<strong>模块类型HC-08</strong>, 点击<strong>测试指令</strong>, 回复“<strong>OK</strong>”即为测试成功</li><li>点击“<strong>设置模块主机</strong>”, 然后在指令文本框中输入<strong>AT</strong>, 点击<strong>数据发送</strong>, 收到回复“<strong>OK</strong>”即为测试成功, 如图:<br><img src="/2021/03/08/Arduino%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/2.jpg" srcset="/img/loading.gif" lazyload alt></li><li>设置完成后, 两块蓝牙模块上的指示灯常亮说明连接已经成功, 之后断电后上电两块板会自动连接, 可以把两块板连接USB-TTL转接板, 并通过HC-USB-P串口助手互相给另一块板发送以及接收数据, 以测试连接的稳定性.</li></ol></blockquote><h3 id="蓝牙模块与MCU连接方式"><a href="#蓝牙模块与MCU连接方式" class="headerlink" title="蓝牙模块与MCU连接方式"></a>蓝牙模块与MCU连接方式</h3><p><img src="/2021/03/08/Arduino%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/1.jpg" srcset="/img/loading.gif" lazyload alt></p><p>连接方式参考上图</p><blockquote><p>VCC —- 5V<br>GND —- GND<br>TXD —- D5<br>RXD —- D3</p></blockquote><p>主机与从机与MCU连接方式相同, 虽然称为主机和从机, 但是两者都具有传输和接收数据的功能, 名称不同只为了区分两者.</p><h3 id="Arduino-UNO-测试程序"><a href="#Arduino-UNO-测试程序" class="headerlink" title="Arduino UNO 测试程序"></a>Arduino UNO 测试程序</h3><p>初始化与连接完成后, 可以开始Arduino的编程, 以达到用MCU传输以及接收数据.<br>程序主体部分, 主机与从机是相同的, 数据处理部分就取决于自己的需求.<br>需要用到 <strong>SoftwareSerial.h</strong> 这一头文件, 使用read()方法接收数据, write()方法传输数据, 更多关于此头文件的内容, 请查看<a href="https://www.arduino.cc/en/Reference/SoftwareSerial/" target="_blank" rel="noopener">Arduino官网对此的描述</a>.<br>参考程序如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-keyword">int</span> btRead;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  BT.begin(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.write(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    btRead = BT.read(); <span class="hljs-comment">// BT接收数据</span><br>    Serial.println(btRead); <span class="hljs-comment">// 串口打印数据</span><br>    delay(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>以上示例程序能够让两个MCU互相发送与接收数据, 随后在两个Arduino的串口监视器都能够看到接收的数据100. 可以让两块MCU发送不一样的数据, 以测试数据传输以及接收的成功.<br>在测试中可能会发现接收到的数据为-1, 这说明在某一时刻接收出错, 因此我们可以用<strong>available()方法</strong>或者<strong>检查read()的数据是否为-1</strong>来检查接收的成功性, 示例如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-keyword">int</span> btRead;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  BT.begin(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.write(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    <span class="hljs-keyword">if</span> (BT.available() &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 检查接收成功性</span><br>        btRead = BT.read(); <span class="hljs-comment">// BT接收数据</span><br>        Serial.println(btRead);<span class="hljs-comment">// 串口打印数据</span><br>    &#125; <br>    delay(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>或者<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-keyword">int</span> btRead;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  BT.begin(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化BT的频率, 一般为9600, 不建议修改</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    BT.write(<span class="hljs-number">100</span>); <span class="hljs-comment">// BT发送数据100到另一个蓝牙模块</span><br>    btRead = BT.read(); <span class="hljs-comment">// BT接收数据</span><br>    <span class="hljs-keyword">if</span> (btRead != <span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">// 检查接收成功性</span><br>        Serial.println(btRead);<span class="hljs-comment">// 串口打印数据</span><br>    &#125; <br>    delay(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="数据传输算法"><a href="#数据传输算法" class="headerlink" title="数据传输算法"></a>数据传输算法</h3><p>需要注意的是, read()方法只能每次传输以及接收<strong>一个</strong>数据, 并且传输以及接收的是<strong>character类型</strong>的数据, 数据大小<strong>介于0到255, 共256个数据</strong>. 若要传输较大的数据, 可以采用同比缩小和放大的方法. 例如, 若要传输一值为12345的数据, 可以在发送端整除100, 变为123后在传输; 并且在接收端乘以100, 最后接收到的数据即为12300. 当然, 这样的过程产生了数据的误差.</p><p>此外, 在实际操作中, 我在传输端有多个旋转电阻模块, 用来控制接收端连接的多个舵机, 每一个舵机都是单独被旋转电阻模块控制的. 这种情况下, 用蓝牙模块就需要注意数据的<strong>分组以及顺序的匹配性</strong>, 不能使接收到的数据与传输的数据错位.</p><p>考虑到此蓝牙模块一次只能传输一个数据, 并且在测试中发现, 传输数据的顺序与接收数据的顺序是一致的, 不会发生偏移. 那只需要在发送端使旋转电阻模块的数据以一个特定的顺序发送, 并且在接收端以相同的顺序接收, 那就可以实现一一对应. 之后唯一需要做的就是使第一个值对齐, 防止数据的整体偏移. </p><p>因此, 我在每一组传输数据第一位前加上“000”的校验符, 使得接收端每次接收到“000”后, 开始处理校验符之后的数据, 以此使数据对齐. 一旦接收端没有接收到完整的“000”, 则重新接收下一组数据.</p><p>参考程序: (传输端有5个传感器控制接收端连接的5个舵机)<br>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Arduino_Bluetooth_Transceiving" target="_blank" rel="noopener">https://github.com/zhangwengyu999/Arduino_Bluetooth_Transceiving</a></p><p>发送端程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// TX</span><br><span class="hljs-comment">// 发送端程序</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-keyword">int</span> zero = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  BT.begin(<span class="hljs-number">9600</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// sensor one A0</span><br>    <span class="hljs-keyword">int</span> Readone = analogRead(A0);<br>    <span class="hljs-keyword">int</span> Outone = <span class="hljs-built_in">map</span>(Readone, <span class="hljs-number">1023</span>, <span class="hljs-number">880</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// sensor two A1</span><br>    <span class="hljs-keyword">int</span> Readtwo = analogRead(A1);<br>    <span class="hljs-keyword">int</span> Outtwo = <span class="hljs-built_in">map</span>(Readtwo, <span class="hljs-number">270</span>, <span class="hljs-number">400</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>);<br><br>    <span class="hljs-comment">// sensor three A2</span><br>    <span class="hljs-keyword">int</span> Readthree = analogRead(A2);<br>    <span class="hljs-keyword">int</span> Outthree = <span class="hljs-built_in">map</span>(Readthree, <span class="hljs-number">280</span>, <span class="hljs-number">400</span>, <span class="hljs-number">18</span>, <span class="hljs-number">5</span>);<br>    <br>    <span class="hljs-comment">// sensor four A3</span><br>    <span class="hljs-keyword">int</span> Readfour = analogRead(A3);<br>    <span class="hljs-keyword">int</span> Outfour = <span class="hljs-built_in">map</span>(Readfour, <span class="hljs-number">1023</span>, <span class="hljs-number">700</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// sensor five A4</span><br>    <span class="hljs-keyword">int</span> Readfive = analogRead(A4);<br>    <span class="hljs-keyword">int</span> Outfive = <span class="hljs-built_in">map</span>(Readfive, <span class="hljs-number">0</span>, <span class="hljs-number">1023</span>, <span class="hljs-number">0</span>, <span class="hljs-number">180</span>);<br><br>    <span class="hljs-comment">// 000 校验符号发送</span><br>    BT.write(zero);<br>    delay(<span class="hljs-number">10</span>);<br>    BT.write(zero);<br>    delay(<span class="hljs-number">10</span>);<br>    BT.write(zero);<br>    delay(<span class="hljs-number">10</span>);<br>    <br>    <span class="hljs-comment">// 传感器数据以特定顺序传输</span><br>    BT.write(Outone); <span class="hljs-comment">// sensor one</span><br>    BT.write(Outtwo); <span class="hljs-comment">/// sensor two</span><br>    BT.write(Outthree); <span class="hljs-comment">// sensor three</span><br>    BT.write(Outfour); <span class="hljs-comment">// sensor three</span><br>    BT.write(Outfive); <span class="hljs-comment">// sensor five</span><br>    delay(<span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接收端程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// RX</span><br><span class="hljs-comment">// 接收端程序</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Servo.h&gt;</span></span><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">BT</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// RX:5, TX:3 实例化一个名为BT的SoftwareSerial对象</span><br><span class="hljs-keyword">int</span> val;<br><span class="hljs-keyword">int</span> zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于000校验符的计数</span><br>Servo myServoone;<br>Servo myServotwo;<br>Servo myServothree;<br>Servo myServofour;<br>Servo myServofive;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  BT.begin(<span class="hljs-number">9600</span>);<br>  myServoone.attach(<span class="hljs-number">0</span>);<br>  myServotwo.attach(<span class="hljs-number">1</span>);<br>  myServothree.attach(<span class="hljs-number">2</span>);<br>  myServofour.attach(<span class="hljs-number">3</span>);<br>  myServofive.attach(<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 000校验符检测</span><br>    <span class="hljs-keyword">while</span> (zeroCounter != <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">// 循环直到检测到连续的000</span><br>      val = BT.read();<br>      <span class="hljs-keyword">if</span> (val == <span class="hljs-number">0</span>)&#123;<br>        zeroCounter++; <span class="hljs-comment">// 若检测到0, 则计数加1</span><br>        &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 若检测到不是0, 则计数直接重置为0</span><br>        &#125;<br>    delay(<span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-comment">// 000校验完成后开始接收数据, 保证不会偏移</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)&#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)&#123;<br>        val = BT.read();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServoone.write(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>        val = BT.read();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServotwo.write(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>        val = BT.read();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServothree.write(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>        val = BT.read();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServofour.write(val);<br>          i++;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>        val = BT.read();<br>        <span class="hljs-keyword">if</span> (val != <span class="hljs-number">-1</span>)&#123;<br>          myServofive.write(val);<br>          i++;<br>        &#125;<br>      &#125;<br>    &#125;<br>    zeroCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">// 一组数据接收完成后, zeroCounter重置为0, 开始下一轮000校验</span><br>    delay(<span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这是第一次研究Arduino的蓝牙模块, 学到很多所以记录一下, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br><a href="https://www.arduino.cc/en/Reference/SoftwareSerial/" target="_blank" rel="noopener">Arduino-SoftwareSerial Library</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Arduino</category>
      
      <category>蓝牙</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>蓝牙</tag>
      
      <tag>相互通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的封装性(Encapsulation)</title>
    <link href="/2021/03/07/Java-oop-encapsulation/"/>
    <url>/2021/03/07/Java-oop-encapsulation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><hr><blockquote><h4 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h4><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792" target="_blank" rel="noopener">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><a id="more"></a><h4 id="封装性-Encapsulation"><a href="#封装性-Encapsulation" class="headerlink" title="封装性(Encapsulation)"></a>封装性(Encapsulation)</h4><p>封装性是OOP的核心思想, 目的是将类的静态部分和动态部分, 即类的属性和方法封装起来, 使某一对象的实现过程隐藏起来, 使用者只能看到对象的交互层面, 无须知道此对象内部是如何工作的. 封装性(Encapsulation)能保证类内部的完整性, 使用者既能使用某一类, 又不会影响到类内部的数据和结构, 提高了安全性.</p><hr><h4 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h4><h5 id="1-类的属性-Field"><a href="#1-类的属性-Field" class="headerlink" title="1. 类的属性 (Field)"></a>1. 类的属性 (Field)</h5><p>类的属性又称为成员变量, 英文为Field. 以下代码构造了一个Book类, Book为类的名称, 设置了两个属性, 字符串类的name, 用于存储书名, 以及整数类型的page, 用于存储页数. 属性可以设置初始值, 如不设置初始值, 则会有默认值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-类的方法-Method"><a href="#2-类的方法-Method" class="headerlink" title="2. 类的方法 (Method)"></a>2. 类的方法 (Method)</h5><p>类的方法又称为成员方法, 英文为Method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码给Book类添加了两个方法.<br>第一个方法setName为设置Book类的name属性, 即给书本一个名字. public为权限修饰符, public表示此方法可以被本类, 子类以及其他包中的类使用, 理解为公开的. void表示此方法无返回值, 理解为表示返回值为空. setName为方法的名称. 括号中的inName是方法的参数(parameter), String表明了参数的数据类型. name = inName; 表示把对象的name属性设置为setName中的参数inName, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Book mybook = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">// 构造Book类的对象</span><br>String mybookname = <span class="hljs-string">"ABC"</span>; <span class="hljs-comment">// 书名存入变量</span><br>mybook.setName(mybookname); <span class="hljs-comment">// 调用Book的setName方法, 设置书名为ABC</span><br></code></pre></td></tr></table></figure><p>第二个方法getName为获取并输出书的名字, String表示此方法有返回值, 并且返回值为字符串类型. return name; 表示返回对象的name属性, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Book mybook  = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">// 构造Book类的对象</span><br>String mybookname = <span class="hljs-string">"ABC"</span>; <span class="hljs-comment">// 书名存入变量</span><br>mybook.setName(mybookname); <span class="hljs-comment">// 调用Book的setName方法, 设置书名为ABC</span><br>System.out.println(mybook.getName()); <span class="hljs-comment">// 调用Book的getName方法, 获取书的名字并打印输出, 输出的即为方法的返回值“ABC”</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>当一个类中有多个相同名字的方法，则被称为方法重载。根据 <strong>方法名</strong> 和 <strong>参数类型（数量、类型以及排列顺序）</strong> 来判断是否能重载。参数的类型、返回值类型并不会被考虑。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNameNum)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, int参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, String参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>    <span class="hljs-comment">/* 以下两个方法都是不合法的重载</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public int setName(String inName)&#123; // 返回值不同并不考虑</span><br><span class="hljs-comment">        //...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public void setName(String theName)&#123; // 参数名不同并不考虑</span><br><span class="hljs-comment">        //...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName, <span class="hljs-keyword">int</span> inNameNum)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, String参数和int参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inNameNum, String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 和nt参数和String参数</span><br>        <span class="hljs-comment">/*...*/</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当以上某一方法被使用时，编译器会根据 <strong>方法名</strong> 和 <strong>参数类型（数量、类型以及排列顺序）</strong> 来调用相对应的方法。</p></blockquote><hr><h5 id="3-类的构造方法-Constructor"><a href="#3-类的构造方法-Constructor" class="headerlink" title="3. 类的构造方法 (Constructor)"></a>3. 类的构造方法 (Constructor)</h5><p>类的构造方法(Constructor)是一种的特殊的方法, 每次用类实例化一个对象时, 构造方法会自动调用.<br>构造方法有三个特性:<br><strong>&gt;构造方法的名称与类的名称相同;</strong><br><strong>&gt;构造方法没有返回值, 但是不需要用void修饰字符;</strong><br><strong>&gt;可含参数，但不能是<code>this</code>.</strong>  <a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#1-3-this-%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">(点此了解<code>this</code>)</a></p><p>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    Book()&#123; <span class="hljs-comment">// 无参构造方法</span><br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象"</span>); <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String initName)</span></span>&#123; <span class="hljs-comment">// 有参构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象"</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><blockquote><p>注：若一个类没有构造方法，在编译时编译器会自动加入一个无参的空构造方法，也会在对象创建时被调用。但是如果只定义了有参构造方法，在创建对象时调用无参构造方法是不合法的，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String initName)</span></span>&#123; <span class="hljs-comment">// 有参构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象"</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Book mybook = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">// 错误</span><br>Book mybook = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"myBookName"</span>); <span class="hljs-comment">// 运行</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>若一个类包括了多个构造函数，这就被称为构造函数重载 (Constructor Overloading)，其在构造函数的三个特性上还有<strong>需要有不同的参数类型</strong>，例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Book()&#123; <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-string">"NoBookName"</span>); <br>&#125;<br>Book(String initName)&#123; <span class="hljs-comment">// 有参构造方法，参数类型为 String</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">1</span>); <br>    name = initName;<br>&#125;<br>Book(<span class="hljs-keyword">int</span> initBookAmount)&#123; <span class="hljs-comment">// 有参构造方法，参数类型为int</span><br>    bookAmount = initBookAmount;<br>    System.out.println(<span class="hljs-string">"成功创建一个Book类对象,请修改书名！"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Book myBookA  = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">//调用无参构造方法 Book()</span><br>    Book myBookB  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"MyBookB"</span>); <span class="hljs-comment">//调用有参构造方法 Book(String initNam)</span><br>    Book myBookC  = <span class="hljs-keyword">new</span> Book(<span class="hljs-number">100</span>); <span class="hljs-comment">//调用有参构造方法 Book(int initBookAmount)</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在创建对象时，会根据不同的参数类型调用相对应参数类型的构造函数，实现一一对应。</p></blockquote><hr><h4 id="权限修饰符-Visibility-Modifiers"><a href="#权限修饰符-Visibility-Modifiers" class="headerlink" title="权限修饰符 (Visibility Modifiers)"></a>权限修饰符 (Visibility Modifiers)</h4><p>Java中的权限修饰符主要包括<strong>private</strong>, <strong>protected</strong>和<strong>public</strong>. 这三个权限修饰符决定了类, 类的属性和类的方法的访问范围. </p><blockquote><p><strong>private</strong><br>设置为<strong>private</strong>的属性和方法<strong>只能在本类中使用</strong>, 同包其他类或子类 以及 其他包的类或子类不可使用</p><p><strong>protected</strong><br>设置为<strong>protected</strong>的属性和方法<strong>只能在本类 以及 同包其他类或子类中使用</strong>, 其他包的类或子类不可使用</p><p><strong>public</strong><br>设置为<strong>public</strong>的属性和方法<strong>能在本类, 同包其他类或子类 以及 其他包的类或子类中都可以使用</strong></p></blockquote><p>具体见<a href="https://ultrafish.cn/2021/09/02/Java-learning-1/#2-2-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-Access-Control-Modifiers" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a></p><hr><h4 id="对象-object"><a href="#对象-object" class="headerlink" title="对象 (object)"></a>对象 (object)</h4><p>对象(object)是某一类的实例, 有具体的属性和方法.</p><h5 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h5><p>Java中通过 <strong>new</strong> 操作符号来创建对象, 语法为: <strong>类名 对象名 = new 类名( );</strong><br>每次创建一个实例, 都会调用一次类的构造方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Book mybook = <span class="hljs-keyword">new</span> Book(); <span class="hljs-comment">// 无参数, 无构造方法参数</span><br>Book mybook = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>); <span class="hljs-comment">// 有参数, My Book Name为构造方法的参数, 设置书名</span><br></code></pre></td></tr></table></figure><p>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String initName)</span></span>&#123; <span class="hljs-comment">// 构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象"</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <span class="hljs-comment">// 主方法</span><br>Book mybook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>); <span class="hljs-comment">// 构造一个名为mybook的Book类对象, 并使用构造方法设置name属性</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h5 id="对象属性和行为的访问"><a href="#对象属性和行为的访问" class="headerlink" title="对象属性和行为的访问"></a>对象属性和行为的访问</h5><p>对象属性和行为的访问结构为“对象.属性”或“对象.方法”, 例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">mybook.name; <span class="hljs-comment">// 获取mybook的name属性</span><br>mybook.getName(); <span class="hljs-comment">// 获取mybook的name属性, 并返回name的值</span><br>mybook.setName(<span class="hljs-string">"My Another Book"</span>); <span class="hljs-comment">// 调用mybook的成员方法, 设置name属性为“My Another Book”</span><br></code></pre></td></tr></table></figure></p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span>&#123; <span class="hljs-comment">// 构造名为Book的类</span><br>    String name; <span class="hljs-comment">// 构造Book类的一个属性name, 理解为书名</span><br>    <span class="hljs-keyword">int</span> page; <span class="hljs-comment">// 构造Book类的另一个属性page, 理解为页数</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String initName)</span></span>&#123; <span class="hljs-comment">// 构造方法</span><br>        name = initName; <span class="hljs-comment">// 有参数的构造方法, 创建对象时就设置对象name属性, 即为书名</span><br>        System.out.println(<span class="hljs-string">"成功创建一个Book类对象"</span>); <span class="hljs-comment">// 每当Book类创建一个实例对象, 会输出一语句</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String inName)</span></span>&#123; <span class="hljs-comment">// 构造一个名为setName的方法, 用于设置Book类的name属性.</span><br>        name = inName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 构造一个名为getName的方法, 用于获取Book类的name属性</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <span class="hljs-comment">// 主方法</span><br>    Book mybook  = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">"My Book Name"</span>); <span class="hljs-comment">// 构造一个名为mybook的Book类对象, 并使用构造方法设置name属性</span><br>        System.out.println(mybook.name); <span class="hljs-comment">// 通过对象的属性获取属性值</span><br>        System.out.println(mybook.getName()); <span class="hljs-comment">// 通过对象的方法获取属性值</span><br>        <br>        mybook.setName(<span class="hljs-string">"My Another Book"</span>); <span class="hljs-comment">// 通过对象属性重置属性值</span><br>        mybook.page = <span class="hljs-number">100</span>; <span class="hljs-comment">// 通过对象属性重置属性值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
      <category>封装性 Encapsulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用1000多行C++代码写给2021元旦的祝福-C++像素字实现方法</title>
    <link href="/2021/01/02/1kcpphny/"/>
    <url>/2021/01/02/1kcpphny/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/cpphny.mp4?versionId=CAEQFxiBgMC7__meyBciIDI5OTRjMDI4YjlhODRhNTE4NmVmODg2ZDI4NjkxODI0" type="video/mp4">      </video><p>首先祝各位2021新年快乐, 身体健康, 万事如意.<br>我在2021元旦发布了一条我制作的给2021元旦的祝福短片, 用C++输出了一些像素字, 内容是 ”元旦快乐 HAPPY NEW YEAR! 2021“<br>接下来我会简单介绍一下实现的方法, 并且开源我的代码供大家参考.</p><a id="more"></a><hr><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>总的来说, 是通过创建二维字符数组, 并修改其中每个字符的显示内容来构成不同的像素字.</p><p>二维字符数组:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span> aone[NYR][NYC];<br></code></pre></td></tr></table></figure></p><h4 id="1-量化字符"><a href="#1-量化字符" class="headerlink" title="1. 量化字符"></a>1. 量化字符</h4><p>首先确定好输出的字符, 其次确定输出背景的大小, 也就是二维字符数组的行数和列数. 需要注意的是, 二维字符数组的每一个字符在输出后的形状是一个长方形, 因此当我们需要一个正方形的背景时, 行数和列数是不一样的. 因此, 我是用的数据是:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NYR 24 <span class="hljs-comment">// ROW 行数</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NYC 47 <span class="hljs-comment">// COLUMN 列数</span></span><br></code></pre></td></tr></table></figure><br>接下来, 先输出一个都是下划线(_)的空背景, 并且添加竖线, 划分出每一个像素. 然后写上需要的字, 并且找出被覆盖的格子, 并记下坐标.<br>例如:<br><img src="/2021/01/02/1kcpphny/1.jpeg" srcset="/img/loading.gif" lazyload alt="量化字符"></p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><p>使用循环遍历二维字符数组, 通过if判断是否遍历到目标行, 然后可以通过循环遍历同一行中连续被覆盖的列, 并修改它们的字符内容.<br>以“元”字的3、4行的10-37列举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>             aone[i][m] = <span class="hljs-string">'X'</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这样就完成列“元”字的一笔, 其余笔画与字同理.</p><h4 id="3-输出速度控制"><a href="#3-输出速度控制" class="headerlink" title="3. 输出速度控制"></a>3. 输出速度控制</h4><p>为了能够达到一行一行输出的效果, 我在每一行输出时添加了一定的延时(delay). 实现的方法也很简单, 也有一点蠢, 就是通过大循环来延时.<br>如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SPEED 10000</span><br><span class="hljs-comment">// roll speed control</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span></span>&#123;<br>    <span class="hljs-keyword">float</span> p, q;<br>    <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; d; p = p + <span class="hljs-number">0.001</span>)&#123;<br>        q = q + <span class="hljs-number">0.01</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// output part</span><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; aone[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h4><p>以上是主要方法, 在具体实现过程中还有很多细节需要注意.<br>总体来说, 实现的方法并不困难, 但是过程比较复杂, 重复性工作较多, 只是一直在不断的循环. 但不管怎样, 输出效果还是比较好的, 也很有趣. 欢迎大家尝试, 交流以及分享你的方法.</p><hr><h3 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h3><p>由于源代码很长, 请点击以下链接下载<br><a href="https://github.com/zhangwengyu999/happy_new_year" target="_blank" rel="noopener">https://github.com/zhangwengyu999/happy_new_year</a><br>我也会在文章的最后附上源代码.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文介绍了如何用C++代码来写像素字, 之后会继续更新.<br>最后，再次祝大家新年快乐, 希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center><hr><p>C++源代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 用1000多行C++代码写给2021元旦的祝福</span><br><span class="hljs-comment">// 元旦快乐</span><br><span class="hljs-comment">// Happy New Year 2021</span><br><span class="hljs-comment">// Made by Mike_Zhang</span><br><span class="hljs-comment">// http://ultrafish.cn</span><br><span class="hljs-comment">// 2021.1.1</span><br><span class="hljs-comment">// 仅供学习交流使用</span><br><span class="hljs-comment">// *********************</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NYR 24</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NYC 47</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SPEED 10000</span><br><br><span class="hljs-comment">// roll speed control</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span></span>&#123;<br>    <span class="hljs-keyword">float</span> p, q;<br>    <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; d; p = p + <span class="hljs-number">0.001</span>)&#123;<br>        q = q + <span class="hljs-number">0.01</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//yuan</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">yuan</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> aone[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            aone[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span> || i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span> || i == <span class="hljs-number">12</span> || i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            aone[i][<span class="hljs-number">39</span>] = <span class="hljs-string">'X'</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">14</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            aone[i][<span class="hljs-number">6</span>] = <span class="hljs-string">'X'</span>;<br>            aone[i][<span class="hljs-number">7</span>] = <span class="hljs-string">'X'</span>;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                aone[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; aone[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// dan</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dan</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> atwo[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            atwo[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> || i == <span class="hljs-number">8</span> || i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span> || i == <span class="hljs-number">5</span> || i == <span class="hljs-number">6</span> || i == <span class="hljs-number">7</span> || i == <span class="hljs-number">9</span> || i == <span class="hljs-number">10</span> || i == <span class="hljs-number">11</span> || i == <span class="hljs-number">12</span> || i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span> || i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                atwo[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; atwo[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// kuai</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kuai</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> athree[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            athree[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span> || i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">20</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">20</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">8</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">4</span>; m&lt;=<span class="hljs-number">6</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">26</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">33</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">42</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                athree[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; athree[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// le</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">le</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> afour[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            afour[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span> || i == <span class="hljs-number">8</span> || i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">31</span>; m&lt;=<span class="hljs-number">33</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">7</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'x'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">22</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">23</span>;m++)&#123;<br>                afour[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; afour[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// HAPPY NEW YEAR</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">happynewyear</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> afive[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            afive[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>        <span class="hljs-comment">// HAPPY</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">45</span>; m&lt;=<span class="hljs-number">46</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">13</span>; m&lt;=<span class="hljs-number">14</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">17</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">27</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">41</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">18</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">42</span>; m&lt;=<span class="hljs-number">43</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">2</span>; m&lt;=<span class="hljs-number">3</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">9</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">18</span>; m&lt;=<span class="hljs-number">19</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">21</span>; m&lt;=<span class="hljs-number">22</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">42</span>; m&lt;=<span class="hljs-number">43</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//NEW</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">27</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">20</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">32</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">11</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">16</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">31</span>; m&lt;=<span class="hljs-number">32</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">34</span>; m&lt;=<span class="hljs-number">35</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">37</span>; m&lt;=<span class="hljs-number">38</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">20</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">9</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">17</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">19</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">35</span>; m&lt;=<span class="hljs-number">36</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//YEAR</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">5</span>; m&lt;=<span class="hljs-number">6</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">12</span>; m&lt;=<span class="hljs-number">13</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">26</span>; m&lt;=<span class="hljs-number">28</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">17</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">6</span>; m&lt;=<span class="hljs-number">7</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">11</span>; m&lt;=<span class="hljs-number">12</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">25</span>; m&lt;=<span class="hljs-number">26</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">25</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">29</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">39</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">19</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">16</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">24</span>; m&lt;=<span class="hljs-number">30</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">38</span>; m&lt;=<span class="hljs-number">40</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">8</span>; m&lt;=<span class="hljs-number">10</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">15</span>; m&lt;=<span class="hljs-number">21</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">30</span>; m&lt;=<span class="hljs-number">31</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">33</span>; m&lt;=<span class="hljs-number">34</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">39</span>; m&lt;=<span class="hljs-number">41</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">44</span>; m&lt;=<span class="hljs-number">45</span>;m++)&#123;<br>                afive[i][m] = <span class="hljs-string">'X'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; afive[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 2021</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">year</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> asix[NYR][NYC];<br>    <span class="hljs-keyword">int</span> i, j, m;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;NYR;i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            asix[i][j] = <span class="hljs-string">' '</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'1'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span> || i == <span class="hljs-number">3</span> || i == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">10</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">36</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'1'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'1'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span> || i == <span class="hljs-number">7</span> || i == <span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">2</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">15</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">23</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">29</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">43</span>; m&lt;=<span class="hljs-number">44</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'1'</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)&#123;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">1</span>; m&lt;=<span class="hljs-number">11</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">14</span>; m&lt;=<span class="hljs-number">24</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'0'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">28</span>; m&lt;=<span class="hljs-number">37</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'2'</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (m=<span class="hljs-number">40</span>; m&lt;=<span class="hljs-number">46</span>;m++)&#123;<br>                asix[i][m] = <span class="hljs-string">'1'</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;(NYR - <span class="hljs-number">10</span>);i++)&#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;NYC;j++)&#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; asix[i][j];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deLay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>        deLay(SPEED);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// main functions</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">yuan</span><span class="hljs-params">()</span></span>;<br>    yuan();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dan</span><span class="hljs-params">()</span></span>;<br>    dan();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kuai</span><span class="hljs-params">()</span></span>;<br>    kuai();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">le</span><span class="hljs-params">()</span></span>;<br>    le();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">happynewyear</span><span class="hljs-params">()</span></span>;<br>    happynewyear();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">year</span><span class="hljs-params">()</span></span>;<br>    year();<br>    <span class="hljs-built_in">cout</span>&lt;&lt; <span class="hljs-string">"元旦快乐"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"Happy New Year 2021"</span>&lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt;<span class="hljs-string">"Made by Mike_Zhang"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"http://ultrafish.cn"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"2021.1.1"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">// ********************</span><br><span class="hljs-comment">// 用1000多行C++代码写给2021元旦的祝福</span><br><span class="hljs-comment">// 元旦快乐</span><br><span class="hljs-comment">// Happy New Year 2021</span><br><span class="hljs-comment">// Made by Mike_Zhang</span><br><span class="hljs-comment">// http://ultrafish.cn</span><br><span class="hljs-comment">// 2021.1.1</span><br><span class="hljs-comment">// 仅供学习交流使用</span><br></code></pre></td></tr></table></figure></p><hr>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>像素字符</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Floating point numbers representation</title>
    <link href="/2020/12/20/floating%20point%20numbers%20representation/"/>
    <url>/2020/12/20/floating%20point%20numbers%20representation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>Relevant article links:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/" target="_blank" rel="noopener">Signed binary numbers representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/" target="_blank" rel="noopener">Floating point numbers representation</a><br><a href="https://ultrafish.cn/plus/files/ieee_754_single_representation.html" target="_blank" rel="noopener">UltraFish Plus - Floating point numbers convertor (IEEE 754 single precision)</a></p></blockquote><p>I have talked about the <a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/" target="_blank" rel="noopener"><strong>Signed binary number representation</strong></a> in a previous article. Then I am going to record the <strong>Floating point numbers (FPN) representation</strong>, including <strong>Floating point numbers normalization, hidden bit, FPN representation in the computer, and IEEE 754 Standard</strong>.</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h3 id="Floating-point-numbers-normalization"><a href="#Floating-point-numbers-normalization" class="headerlink" title="Floating point numbers normalization"></a>Floating point numbers normalization</h3><p>Usually, a floating point number can be represented by 3 parts: <strong>Sign, Exponent, and Fraction (aka Significand or Mantissa)</strong>.<br>Example:</p><blockquote><p>+1.23 * 10^45</p><p><strong>“+” is the Sign</strong><br> <strong>45 is the Exponent</strong><br><strong>1.23 is the Fracrion</strong><br>10 is the Base</p></blockquote><p>For a given number, the location of radix point is fixed. It is located immediately to the <strong>left OR right</strong> of the <strong>leftmost AND nonzero</strong> digit in the fraction.<br>Example:</p><blockquote><p><strong>+1.23 <em> 10^45 OR +0.123 </em> 10^46</strong></p></blockquote><p>FPN can be normalized in any base.</p><hr><h3 id="Hidden-bit"><a href="#Hidden-bit" class="headerlink" title="Hidden bit"></a>Hidden bit</h3><p>Hidden bit is aopptional choise for FPN normalization.<br>When the fraction is in binary, there will always be a leftmost “1” in the normalized fraction, because the point is always located immediately to the <strong>left OR right</strong> of the <strong>leftmost AND nonzero</strong> digit in the fraction.<br>Example:</p><blockquote><p>111.01 <em> 2^3 = <strong>1</strong>.1101 </em> 2^5 = 0.<strong>1</strong>1101 * 2^6</p></blockquote><p>So the computer does not have to store this “1”, which is <strong>hidden bit</strong> or <strong>hidden 1</strong>.<br>If the Hidden bit is used in the FPN normalization, for 1.1101, the computer only needs to store 1101 for the normalized fraction.</p><hr><h3 id="FPN-representation-in-the-computer"><a href="#FPN-representation-in-the-computer" class="headerlink" title="FPN representation in the computer"></a>FPN representation in the computer</h3><p>In a computer, the FPN representation is specified in:</p><blockquote><ol><li>The base of the original number;</li><li>The location of radix point in normalization: left OR right of the leftmost AND nonzero digit in the fraction;</li><li>The number of bits of exponent and fraction storage;</li><li>the representation of exponent, e.g. Excess, One’s Complement.</li></ol></blockquote><p>Example:</p><blockquote><p>A computer requires the order that:</p><ol><li>Sign bit;</li><li>3-bit Excess 4 exponent;</li><li>Base 16, 3-bit hexadecimal fraction;</li></ol><p>and</p><ol><li>The point is located immediately to the <strong>left</strong> of the leftmost and nonzero digit in the fraction.</li></ol><p>For example, the number is +120.0 (base 10).<br>step1. Convert +120.0 to base 16, 120.0(base 10) = 78.0(base 16);<br>step2. Normalization: 78.0 = 0.780 * 16^2;<br>step3. Sign bit: “+” -&gt; 0;<br>step4. Convert fraction into base2: 780 (base 16) = 0111 1000 0000 (base 2);<br>step5. Exponent in Excess 4: 2 + 4 = 6 (base 10) = 110 (base 2);<br>step6. Combine them together: 0 110 0111 1000 0000 (Sign bit | Exponent | Fraction).</p></blockquote><hr><h3 id="IEEE-754-Standard"><a href="#IEEE-754-Standard" class="headerlink" title="IEEE 754 Standard"></a>IEEE 754 Standard</h3><p>IEEE stands for Institute of Electrical and Electronics Engineers. IEEE 754 is a standard for Floating point numbers representation.<br>IEEE 754 has two formats: <strong>single</strong> precision and <strong>double</strong> precision. Single precision has 32 bits, and double precision has 64 bits.<br>IEEE 754 single precision standard:</p><blockquote><ol><li>In <strong>base 2</strong>;</li><li>Using <strong>Hidden bit</strong>;</li><li>Sign bit: 0 for positive, 1 for negative (1 bit);</li><li>Using 8-bit <strong>Excess 127</strong> exponent (8 bits);</li><li>The point is located immediately to the <strong>right</strong> of the leftmost and nonzero digit in the fraction (23 bits with 1 bit hidden);</li></ol></blockquote><p>Example:</p><blockquote><p>The number is +120.0 (base 10);</p><ol><li>convert to base 2: 1111000;</li><li>Normalization: +1.111 * 2^6;</li><li>Sign bit: 0;</li><li>Exponent: 6 + 127 = 133(base 10) = 1000 0101 (base 2);</li><li>Fraction: 111 0000 0000 0000 0000 0000 (with hidden 1);</li><li>Combination: 0 1000 0101 111 0000 0000 0000 0000 0000 (Sign bit | Exponent | Fraction).</li></ol></blockquote><p><em>Useful IEEE 754 website:<br><a href="http://weitz.de/ieee/" target="_blank" rel="noopener">http://weitz.de/ieee/</a><br><a href="https://ultrafish.cn/plus/files/ieee_754_single_representation.html" target="_blank" rel="noopener">UltraFish Plus - Floating point numbers convertor (IEEE 754 single precision)</a></em></p><p>Special IEEE 754 bit patterns</p><blockquote><p>+0: 0  0000 0000  000 0000 0000 0000 0000 0000;<br>-0: 1  0000 0000  000 0000 0000 0000 0000 0000;<br>+(-)INFINITY: 0(1)  1111 1111  000 0000 0000 0000 0000 0000;<br>+(-)NaN (Not a Number): 0(1)  1111 1111  001 0000 0110 0001 0010 0000 (The fraction is nonzero);<br>+2^(-128): 0  1111 1111  010 0000 0000 0000 0000 0000;</p></blockquote><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://weitz.de/ieee/" target="_blank" rel="noopener">IEEE 754 Calculator: http://weitz.de/ieee/</a></p><hr><h3 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h3><p>I have recorded Floating point numbers normalization, hidden bit, FPN representation in the computer, and IEEE 754 Standard in this article.<br>Please feel free to leave your comments, if you have any questions or find any mistakes. Thanks for reading. </p><hr><p><strong><em>Original article, please indicate the source when sharing</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">Thanks for your support(WeChat QR Code)</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Representation</category>
      
      <category>Floating Point Numbers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Data Representation</tag>
      
      <tag>Floating Point Numbers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的指针pointer2</title>
    <link href="/2020/12/06/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer2/"/>
    <url>/2020/12/06/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有相关文章:<br><a href="http://ultrafish.cn/2020/10/25/C++中的指针pointer/" target="_blank" rel="noopener">C++中的指针pointer - 指针的声明, 取地址运算符号, 指针的赋值, 指针运算符</a><br><a href="http://ultrafish.cn/2020/12/06/C++中的指针pointer2/" target="_blank" rel="noopener">C++中的指针pointer2 - 指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量</a></p></blockquote><p>在<a href="http://ultrafish.cn/2020/10/25/C++中的指针pointer/" target="_blank" rel="noopener">之前的文章</a>中我已经介绍了C++中指针的基本内容, 包括声明, 取地址运算符号, 赋值和运算符. 接下来我会介绍<strong>指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量.</strong></p><a id="more"></a><h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><p>指针运算就是对指针地址进行运算. 指针经过运算后, 其内存指向(地址)可能会发生变化, 其指向内存的内容(原值)也可能会发生变化. 以下举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> * p = &amp;a; <span class="hljs-comment">//定义指针并赋值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p++; <span class="hljs-comment">//指针自加运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p++; <span class="hljs-comment">//指针自加运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p--; <span class="hljs-comment">//指针自减运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">-446765300</span>, <span class="hljs-number">10</span><br><span class="hljs-number">-446765296</span>, <span class="hljs-number">-446765280</span><br><span class="hljs-number">-446765292</span>, <span class="hljs-number">32766</span><br><span class="hljs-number">-446765296</span>, <span class="hljs-number">-446765280</span><br></code></pre></td></tr></table></figure><br>由此发现, 指针运算后会使指针地址变化, 相对应的指向内存的内容也会发生变化, 但是内存内容的变化规律是和地址变化规律没有直接联系的. 另外, 指针进行加1运算后, 其地址的值并不是简单的加一, 而是而是加上一个变量对应类型的字节宽度, int对应的宽度就是sizeof(int), 也就是4. long类型宽度就是sizeof(long), 也就是8. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">long</span> * p = &amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>    p--;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, %d\n"</span>, p, *p);<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">-369174776</span>, <span class="hljs-number">10</span><br><span class="hljs-number">-369174768</span>, <span class="hljs-number">-369174752</span><br><span class="hljs-number">-369174760</span>, <span class="hljs-number">540288561</span><br><span class="hljs-number">-369174768</span>, <span class="hljs-number">-369174752</span><br></code></pre></td></tr></table></figure></p><hr><h3 id="指向空的指针与空类型指针"><a href="#指向空的指针与空类型指针" class="headerlink" title="指向空的指针与空类型指针"></a>指向空的指针与空类型指针</h3><h4 id="指向空的指针"><a href="#指向空的指针" class="headerlink" title="指向空的指针"></a>指向空的指针</h4><p>指向空的指针表示为:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">void</span>* p;<br></code></pre></td></tr></table></figure><br>指向空的指针是有指向的, 即指向空类型void, 但是在后期使用时可以给其赋值不同类型的数据. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> * p = &amp;a;<br>    <span class="hljs-keyword">void</span>* p1 = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//定义指向空的指针 </span><br>    p1 = p; <span class="hljs-comment">//给指向空的指针重新赋值指向</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="空类型指针"><a href="#空类型指针" class="headerlink" title="空类型指针"></a>空类型指针</h4><p>空类型的指针是指未初始化的指针, 不能直接使用, 需要赋值后才能使用, 在编写代码时需要注意. 举例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span>* p2 = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//定义空类型指针, 未初始化, 不能直接使用</span><br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>; <br>    p2 = &amp;b; <span class="hljs-comment">//初始化p2</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; p2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><hr><h3 id="指向常量的指针与指针常量"><a href="#指向常量的指针与指针常量" class="headerlink" title="指向常量的指针与指针常量"></a>指向常量的指针与指针常量</h3><h4 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h4><p>指向常量的指针(pointer-to-const)说明<strong>指针内存指向的内容</strong>是一个常量, 使用const关键字表示, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> *p = &amp;a;<br></code></pre></td></tr></table></figure><br>其中指针内存指向的内容(<em>p)是一个常量, 其无法修改内存数据, 也就是a, 做到了“只读”.<br>但是我们可以修改p, 也就是内存指向(地址). 举例如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> *p = &amp;a;<br>p = &amp;b; <span class="hljs-comment">//允许</span><br>*p = <span class="hljs-number">20</span>; <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><br>总的来说, 使用指向常量的指针(pointer-to-const)可以防止我们改变指针指向的内容(</em>p), 做到“只读”, 但是不能防止我们改变指针的内存指向(地址p). 指向常量的指针也称常量指针.</p><h4 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h4><p>指针常量(const pointer)说明这个<strong>指针本身</strong>是一个常量, 使用const关键字表示, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span>* <span class="hljs-keyword">const</span> p = &amp;a;<br></code></pre></td></tr></table></figure><br>其中指针p是常量, 其无法修改, 也就是说我们无法修改它的内存指向, 也就是地址.<br>但是我们可以修改<em>p, 也就是说我们可以修改指针指向内存的内容. 举例如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">int</span>* <span class="hljs-keyword">const</span> p = &amp;a;<br>p = &amp;b; <span class="hljs-comment">//报错</span><br>*p = <span class="hljs-number">20</span>; <span class="hljs-comment">//允许</span><br></code></pre></td></tr></table></figure><br>总的来说, 使用指针常量(const pointer)可以防止我们改变指针的内存指向(地址p), 但不可以防止我们改变指向内存的内容(</em>p).</p><p>两者可以用一张图总结:<br><img src="/2020/12/06/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer2/1.jpg" srcset="/img/loading.gif" lazyload alt="Pointers-to-const and const pointers"><br><em>图源: Prata S - C++ Primer Plus 6th Edition - 2011</em></p><h4 id="指向常量的指针常量"><a href="#指向常量的指针常量" class="headerlink" title="指向常量的指针常量"></a>指向常量的指针常量</h4><p>指向常量的指针常量, 它的指针指向(地址p)以及它内存指向的内容(*p)都是常量, 都不能改变, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> p = &amp;a;<br></code></pre></td></tr></table></figure></p><hr><p>引用:<br>Prata S - C++ Primer Plus 6th Edition - 2011</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文介绍了指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量, 之后会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>指针</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中的指针pointer</title>
    <link href="/2020/10/25/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer/"/>
    <url>/2020/10/25/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有相关文章:<br><a href="http://ultrafish.cn/2020/10/25/C++中的指针pointer/" target="_blank" rel="noopener">C++中的指针pointer - 指针的声明, 取地址运算符号, 指针的赋值, 指针运算符</a><br><a href="http://ultrafish.cn/2020/12/06/C++中的指针pointer2/" target="_blank" rel="noopener">C++中的指针pointer2 - 指针运算, 指向空的指针与空类型指针, 指向常量的指针与指针常量</a></p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><p>先看一段代码, 这段代码引入了一个整数型变量a,并把它赋值为2, 最后输出. 看上去十分简单, 但仔细思考一下, 程序是怎么知道变量a中到底存了什么数据呢, 或者说怎么去得到变量a中的数据呢? 其实程序通过变量名所对应的内存单元来对数据进行读取. 简单来说, 你的一位朋友想找你, 他不是直接找到你, 而是通过你所在的地址来找到你. 类似的, 程序也是通过变量相对应的内存地址来进行操作, 这时就需要引入一种新的数据类型—<strong>指针(pointer)</strong>.<br>在C/C++中, <strong>指针(pointer)</strong> 是一种特殊的数据类型, 它存储的是数值的内存地址, 指针也称指针变量.</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h3 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h3><p>指针的声明和一般的变量声明方式类似<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">数据类型 * 指针变量名<br><span class="hljs-comment">//如:</span><br><span class="hljs-keyword">int</span> * aPointer;<br><span class="hljs-keyword">float</span> * bPointer;<br></code></pre></td></tr></table></figure></p><hr><h3 id="取地址运算符号"><a href="#取地址运算符号" class="headerlink" title="取地址运算符号"></a>取地址运算符号</h3><p>指针所储存的地址是通过取地址运算符号(address operator) <strong>&amp;</strong> 来获取的. 如果 <em>home</em> 是一个变量, 那&amp;<em>home</em> 就是家的地址,例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> * aPointer;<br>aPointer = &amp;a;<br></code></pre></td></tr></table></figure><br>这样变量<em>a</em>的内存地址就被读取出来并且存在指针<em>aPointer</em>中了</p><hr><h3 id="指针的赋值"><a href="#指针的赋值" class="headerlink" title="指针的赋值"></a>指针的赋值</h3><p>有两种赋值方法<br>1.在声明时赋值:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> * aPointer = &amp;a; <span class="hljs-comment">//声明并赋值</span><br></code></pre></td></tr></table></figure><br>2.在后期赋值:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> * aPointer; <span class="hljs-comment">//声明</span><br>aPointer = &amp;a; <span class="hljs-comment">//赋值</span><br></code></pre></td></tr></table></figure></p><blockquote><p>注意:<br>在以上例子中, 指针变量名是<strong>aPointer</strong>, 不是 *aPointer,<br><strong><em>aPointer = &amp;a</em></strong> 指的是把整数型变量a的内存地址赋值给指针变量 <strong>aPointer</strong>, 若写成 *aPointer = &amp;a, 则程序会报错.</p></blockquote><hr><h3 id="指针运算符"><a href="#指针运算符" class="headerlink" title="指针运算符"></a>指针运算符</h3><p>指针运算符和取地址运算符的作用完全相反, <strong>指针运算符(indirect value/dereferencing operator)</strong> 可以通过地址取得对应的值. 举例来说, 假设host是一个指针, 那<em>host</em>代表的是地址, <em>*host</em>代表的是那个地址所对应的值. 例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> * aPointer = &amp;a;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出整数型变量a的值</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; *aPointer &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出整数型变量a所对应的指针所对应的值, 即为a</span><br>&#125;<br></code></pre></td></tr></table></figure><br>上面例子所输出的两个结果是一样的, 都为2.</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> * aPointer = &amp;a;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出整数型变量a的值</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; *aPointer &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出整数型变量a所对应的指针所对应的值, 即为a</span><br>    *aPointer = *aPointer + <span class="hljs-number">1</span>; <span class="hljs-comment">//使用指针改变原变量的值</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中, 变量a和指针aPointer相当于一枚硬币的两面.<br>通过取地址运算符&amp;得到变量a的地址, 通过指针运算符 *得到地址所对应的值.<br>所以说a和 *aPointer是完全一样的, aPointer对应的值为&amp;a. 还可以通过修改 *aPointer来修改a的值.<br><img src="/2020/10/25/C++%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88pointer/1.jpg" srcset="/img/loading.gif" lazyload alt="Two sides of a coin"><br><em>图源: Prata S - C++ Primer Plus 6th Edition - 2011</em></p><hr><p>引用:<br>Prata S - C++ Primer Plus 6th Edition - 2011</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文只讲了指针变量的简单内容, 之后会继续展开指针运算、指向空的指针和空类型指针、指向常量的指针和指针常量、指针与数组等内容, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>指针</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog2.0-部署到阿里云服务器以及更新域名</title>
    <link href="/2020/10/15/blog2/"/>
    <url>/2020/10/15/blog2/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>我在<a href="http://ultrafish.cn/2020/07/29/hello-ultrafisher/" target="_blank" rel="noopener">第一篇文章 “Hello UltraFisher” </a>中提到过, 我当时的博客<a href="https://ultrafisher.github.io" target="_blank" rel="noopener">UltraFisher</a>是用Hexo框架并且部署在GitHub上的, 但是GitHub的访问速度并不高, 导致上传时间和等待网页加载时间太长, 既不利于我更新文章, 也不方便浏览者浏览网页, 体验效果并不好. 直到我blog2.0的到来…<br><a id="more"></a><br>我的个人博客名称已由 <strong>UltraFisher</strong> 改为 <strong>UltraFish</strong>, 相应的域名已由 <a href="https://ultrafisher.github.io" target="_blank" rel="noopener">ultrafisher.github.io</a> 改为 <a href="http://ultrafish.cn" target="_blank" rel="noopener">ultrafish.cn</a> .后续所有的更新将会在ultrafish.cn进行, 旧网站将<strong>停止更新</strong>, 但它不会消失. 十分感谢您的浏览以及支持, 让我们在UltraFish再次启程!<br><img src="/2020/10/15/blog2/1.jpg" srcset="/img/loading.gif" lazyload alt></p><hr><p>接下来我来简单说一下更新的过程, 主要是把博客从原来部署在GitHub变成现在部署在了<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>上, 并且有了新的域名.</p><h3 id="2020-10-01"><a href="#2020-10-01" class="headerlink" title="2020-10-01"></a>2020-10-01</h3><p>国庆第一天, 我在阿里云上购买了<strong>云服务器 ECS（Elastic Compute Service）</strong> 以及一个新的<strong>域名</strong>, 并且提交了开始了各种认证和审核. 购买完成之后, 我就有了自己的服务器和域名, 最后完成了十分繁琐的部署工作.</p><hr><p><img src="/2020/10/15/blog2/2.jpg" srcset="/img/loading.gif" lazyload alt="云服务器 ECS"></p><hr><p><img src="/2020/10/15/blog2/3.jpg" srcset="/img/loading.gif" lazyload alt="域名"></p><hr><p><img src="/2020/10/15/blog2/4.jpg" srcset="/img/loading.gif" lazyload alt="价格"></p><hr><p><img src="/2020/10/15/blog2/5.jpg" srcset="/img/loading.gif" lazyload alt="价格"></p><p>其实这时我已经可以通过公网IP地址进入我的博客页面了, 但是因为认证和审核还未通过, 不能通过域名来访问.</p><h3 id="2020-10-09"><a href="#2020-10-09" class="headerlink" title="2020-10-09"></a>2020-10-09</h3><p>我收到了域名实名认证通过的消息, 之后我就把我的域名解析到了我的服务器IP地址, 这样就算建立了联系. 随后就是开始对网站的ICP备案.</p><hr><p><img src="/2020/10/15/blog2/6.jpg" srcset="/img/loading.gif" lazyload alt="认证"></p><h3 id="2020-10-14"><a href="#2020-10-14" class="headerlink" title="2020-10-14"></a>2020-10-14</h3><p>我收到了工信部的邮件, 表示我的网站ICP备案通过了审核, 并得到了备案/许可编号(标注在网页的底部)</p><p><img src="/2020/10/15/blog2/8.jpg" srcset="/img/loading.gif" lazyload alt="邮件"></p><hr><h3 id="2020-10-15"><a href="#2020-10-15" class="headerlink" title="2020-10-15"></a>2020-10-15</h3><p>也就是今天, 阿里云完成了最后的同步,这就表示可以正常的通过域名访问我的博客网站了, 但是还要在全国互联网安全管理平台进行备案, 但这并不影响正常访问, 等备案结束后网站就算真正的更新完成了.</p><p><img src="/2020/10/15/blog2/7.jpg" srcset="/img/loading.gif" lazyload alt="备案"></p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这次更新并不容易, 但是最后的结果还是符合预期的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>部署</tag>
      
      <tag>阿里云</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有符号二进制数表示方法Signed binary number representation</title>
    <link href="/2020/09/19/Signed-binary-number-representation/"/>
    <url>/2020/09/19/Signed-binary-number-representation/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有相关文章:<br><a href="http://ultrafish.cn/2020/09/19/Signed-binary-number-representation/" target="_blank" rel="noopener">有符号二进制数表示方法 Signed binary number representation</a><br><a href="http://ultrafish.cn/2020/12/20/floating%20point%20numbers%20representation/" target="_blank" rel="noopener">浮点数二进制数表示方法 Floating point numbers representation</a><br><a href="http://ultrafish.cn/plus/files/signed_binary_number_representation.html" target="_blank" rel="noopener">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a></p></blockquote><p>(2020-09-24更新: 新增Excess)<br>(2020-09-24更新: 新增转换代码)</p><p>我在之前的文章 <a href="http://ultrafish.cn/2020/08/15/Java学习重难点记录/" target="_blank" rel="noopener"><em>byte数据类型在显式类型转换时超出其取值范围的转换过程</em></a>中提到里了计算机中原码，反码，补码等概念, 但是并没有仔细展开. 最近在学校的课程内容中又碰到了, 所以接下来具体来说一下.<br>数据在计算机中都是以二进制(binary)0和1的形式储存的, 但是在表示负数的时候, 并不能直接把“-”加在数字前面, 必须要用一些特定的方法来表示.<br>一般来说,有以下4种常用的<strong>表示负数</strong>的方法:</p><blockquote><p>Signed Magnitude (原码);<br>One’s Complement (1的补码)(中文又称反码);<br>Two’s Complement (2的补码)(中文又称补码);<br>Excess (Biased)</p></blockquote><p><strong><em>(以下均以 8-bit 为例 )</em></strong></p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h3 id="Signed-Magnitude"><a href="#Signed-Magnitude" class="headerlink" title="Signed Magnitude"></a>Signed Magnitude</h3><p>Signed Magnitude又称原码, 是用二进制数最高位(MSB)来表示符号, <strong>0表示正号“+”, 1表示负号“-”, 剩下的位表示数值的绝对值</strong><br>例如: (等号前为十进制数, 后为二进制数)</p><blockquote><p>+20 = <strong>0</strong>0010100<br>-20 = <strong>1</strong>0010100</p></blockquote><p>有意思的一点是, +0 = 00000000, -0 = 10000000.<br>对于8-bit来说, 用Signed Magnitude来表示, 其取值范围是-127 ~ +127.<br>如下表:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center"><em>Signed Magnitude</em></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td></tr></tbody></table></div><p>以下是Python代码实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signedMagnitude</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span> <span class="hljs-comment">#储存输出结果</span><br>    absnumd = abs(int(numd)) <span class="hljs-comment">#取得绝对值</span><br>    numb = bin(absnumd) <span class="hljs-comment">#把绝对值转成二进制</span><br>    bnumb = numb[<span class="hljs-number">2</span>:] <span class="hljs-comment">#去除二进制数前两位0b</span><br>    fixed = <span class="hljs-string">'&#123;:0&gt;7&#125;'</span>.format(bnumb) <span class="hljs-comment">#用0填充空位至7位</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>: <span class="hljs-comment">#判断是否为负数</span><br>        outnum = <span class="hljs-string">"1"</span> + fixed <span class="hljs-comment">#若是则在最高位加上1</span><br>    <span class="hljs-keyword">else</span>:<br>        outnum = <span class="hljs-string">"0"</span> + fixed <span class="hljs-comment">#若不是则在最高位加上0</span><br>    print(outnum) <span class="hljs-comment">#输出</span><br>signedMagnitude(str(input(<span class="hljs-string">"Enter(-127to127):"</span>)))<br></code></pre></td></tr></table></figure><br>上面提到, 对于8-bit来说, 用Signed Magnitude来表示, 其取值范围是-127 ~ +127, 说明只能表示255个数, 但是8-bit应该是可以总共表示256个数的, 说明有一个数被浪费了.(0被表示了两次,+0和-0)</p><hr><h3 id="One’s-Complement-反码"><a href="#One’s-Complement-反码" class="headerlink" title="One’s Complement (反码)"></a>One’s Complement (反码)</h3><p>One’s Complement (1的补码), 中文又称反码. 对于一个 n-bit 的数, 数x的one’s complement(反码)即为:<strong>2^n - 1 - x.</strong><br>举例来说:</p><blockquote><p>for x= 00111100<br>one’s complement of x = 2^8 - 1 - x = 100000000 - 1 - 00111100 = 11000011</p></blockquote><p>可以发现, 00111100的one’s complement(反码)即为11000011, <strong>简单来说就是把原来的1变成0, 0变成1</strong>, 这也是为说明把one’s complement叫做<strong>反码</strong>.</p><p>再举一个例子:</p><blockquote><p>+20 = 00010100<br>-20 = 11101011</p></blockquote><p>有意思的一点是, +0 = 00000000, -0 = 11111111<br>对于8-bit来说, 用one’s complement(反码)来表示, 其取值范围是-127 ~ +127.<br>如下表:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center"><em>One’s Complement (反码 )</em></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center"><strong>127</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center"><strong>-126</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>-0</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">onesComplement</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - abs(int(numd)) <span class="hljs-comment">#2^n - 1 - x</span><br>    print(numd)<br>    absnumd = abs(int(numd))<br>    numb = bin(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br>onesComplement(input(<span class="hljs-string">"Enter(-127to127):"</span>))<br></code></pre></td></tr></table></figure><br>和Signed Magnitude一样, 用one’s complement(反码)表示也会浪费一个数.(0被表示了两次,+0和-0)</p><hr><h3 id="Two’s-Complement-2的补码-中文又称补码"><a href="#Two’s-Complement-2的补码-中文又称补码" class="headerlink" title="Two’s Complement (2的补码)(中文又称补码)"></a>Two’s Complement (2的补码)(中文又称补码)</h3><p>Two’s Complement (2的补码), 中文又称补码. 对于一个 n-bit 的数, 数x的two’s complement(补码)即为:<strong>2^n  - x.</strong> , <strong>其实就是在反码上+1</strong>, 即, <strong>two’s complement(补码) = one’s complement(反码) + 1</strong>. 这样就可以解决one’s complement(反码)出现-0的情况, 使-128 ~ -1都能被表示, 不产生浪费.<br>举一个例子:</p><blockquote><p>+20 = 00010100<br>one’s complement(反码) = 11101011<br>two’s complement(补码) = 11101011 + 1 = 11101100<br>-20 = 11101100</p><p>对于8-bit来说, 用two’s complement(补码)来表示, 其取值范围是-128 ~ +127.</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center"><strong><em>Two’s Complement(补码 )</em></strong></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center"><strong>127</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>-128</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"><strong>…</strong></td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center"><strong>-1</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twosComplement</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>:<br>        numd = <span class="hljs-number">256</span> - abs(int(numd)) <span class="hljs-comment">#2^n  - x</span><br>    print(numd)<br>    absnumd = abs(int(numd))<br>    numb = bin(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br>twosComplement(input(<span class="hljs-string">"Enter(-128to127):"</span>))<br></code></pre></td></tr></table></figure><br><strong>如何快速获得补码:</strong><br>以-12为例</p><blockquote><ol><li>写出其绝对值的二进制数: 00001100</li><li>从右向左开始, 找到第一个1(00001 <strong><em>1</em></strong> 00), 反转其左边所有位(11110 <strong><em>1</em></strong> 00)并保持其右边位不变</li></ol></blockquote><p>因此:</p><blockquote><p>+12 = 00001100<br>-12 = 11110100</p></blockquote><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>原码、反码、补码是用作负数的二进制表示, 对于正数的表示没有影响, 从下面的表格就可以看出这一点:</p><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center">Two’s Complement(补码)</th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center">127</td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center">-128</td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center">-127</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center">-1</td></tr></tbody></table></div><p>但是接下来的Excess方法对被转换的所有整数都有影响.</p><hr><h3 id="Excess-Biased"><a href="#Excess-Biased" class="headerlink" title="Excess (Biased)"></a>Excess (Biased)</h3><p>excess与上面所说的三种方法有很大的不同, 最明显的不同就是, 在excess方法中, <strong>最高位的1代表正数, 0代表负数</strong>, 以下是excess的转换方法:</p><blockquote><ol><li>在原来的数字上加上一个常量(bias);</li><li>再把得出来的数转成二进制.</li></ol></blockquote><p>举例:</p><blockquote><p><strong>Excess 128</strong> 表示加的数是128;<br>+12 -&gt; +12 + <strong>128</strong> = 140 = 10001100<br>-12 -&gt; -12 + <strong>128</strong> = 116 = 01110100<br>0 -&gt; 0 + <strong>128</strong> = 128 = 10000000<br>…<br>对于8-bit来说, 用Excess128来表示, 其取值范围是-128 ~ +127.</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">binary of:</th><th style="text-align:center">Signed Magnitude</th><th style="text-align:center">One’s Complement (反码)</th><th style="text-align:center">Two’s Complement(补码)</th><th style="text-align:center"><strong><em>Excess 128</em></strong></th></tr></thead><tbody><tr><td style="text-align:center">00000000</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><strong>-128</strong></td></tr><tr><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong>-127</strong></td></tr><tr><td style="text-align:center">00000010</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center"><strong>-126</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">01111111</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center">127</td><td style="text-align:center"><strong>-1</strong></td></tr><tr><td style="text-align:center">10000000</td><td style="text-align:center">-0</td><td style="text-align:center">-127</td><td style="text-align:center">-128</td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">10000001</td><td style="text-align:center">-1</td><td style="text-align:center">-126</td><td style="text-align:center">-127</td><td style="text-align:center"><strong>1</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">11111111</td><td style="text-align:center">-127</td><td style="text-align:center">-0</td><td style="text-align:center">-1</td><td style="text-align:center"><strong>127</strong></td></tr></tbody></table></div><p>以下是Python实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">excessEightbits</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    biasednum = int(numd) + <span class="hljs-number">128</span><br>    numb = bin(biasednum)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br>excessEightbits(input(<span class="hljs-string">"Enter(-128to127):"</span>))<br></code></pre></td></tr></table></figure></p><p>从上面这个表可以看出, 用excess的方法能够让二进制数和十进制数保持一样的大小顺序, 这样能够在之后计算时保持和值和差的的统一,方便计算.<br>总的来说, excess方法是让负号“消失”, 通过给每个数加上一个数, 让某一范围内的数整体向正数方向移动, 直到没有负数. 而移动的长度就是加的数的大小.<br>对于一个<strong>N-bit</strong>的数, 一共可以表示<strong>2^N</strong>个数, 其中有 <strong>2^(N-1)</strong> 个负数, <strong>2^(N-1)</strong> 个正数(包括0), 能够表示的范围就是 <strong>-2^(N-1) ~ 2^(N-1)-1</strong>.</p><hr><h3 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h3><p>以下Python代码实现用四种方法使整数在二进制数和十进制数之间转换<br>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Signed_Binary_Number_Conversion" target="_blank" rel="noopener">https://github.com/zhangwengyu999/Signed_Binary_Number_Conversion</a></p><p>也欢迎到我的开发性页面使用<a href="http://ultrafish.cn/plus/files/signed_binary_number_representation.html" target="_blank" rel="noopener">UltraFish Plus - 有符号二进制数转换器 Signed binary number convertor</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Made by Mike_Zhang</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signedMagnitude</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    absnumd = abs(int(numd))<br>    numb = bin(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    fixed = <span class="hljs-string">'&#123;:0&gt;7&#125;'</span>.format(bnumb)<br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>:<br>        outnum = <span class="hljs-string">"1"</span> + fixed<br>    <span class="hljs-keyword">else</span>:<br>        outnum = <span class="hljs-string">"0"</span> + fixed<br>    print(outnum)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">onesComplement</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - abs(int(numd))<br>    print(numd)<br>    absnumd = abs(int(numd))<br>    numb = bin(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twosComplement</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    <span class="hljs-keyword">if</span> numd[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>] == <span class="hljs-string">"-"</span>:<br>        numd = <span class="hljs-number">256</span> - abs(int(numd))<br>    print(numd)<br>    absnumd = abs(int(numd))<br>    numb = bin(absnumd)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">excessEightbits</span><span class="hljs-params">(numd)</span>:</span><br>    outnum = <span class="hljs-string">""</span><br>    biasednum = int(numd) + <span class="hljs-number">128</span><br>    numb = bin(biasednum)<br>    bnumb = numb[<span class="hljs-number">2</span>:]<br>    outnum = <span class="hljs-string">'&#123;:0&gt;8&#125;'</span>.format(bnumb)<br>    print(outnum)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signedMagnitude_re</span><span class="hljs-params">(numb)</span>:</span><br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"0"</span>:<br>        print(int(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"1"</span>:<br>        print(<span class="hljs-string">"-"</span>, int(str(numb[<span class="hljs-number">1</span>:]), <span class="hljs-number">2</span>),sep=<span class="hljs-string">""</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">onesComplement_re</span><span class="hljs-params">(numb)</span>:</span><br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"0"</span>:<br>        print(int(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"1"</span>:<br>        numd = <span class="hljs-number">256</span> - <span class="hljs-number">1</span> - int(str(numb), <span class="hljs-number">2</span>)<br>        print(<span class="hljs-string">"-"</span> , numd, sep=<span class="hljs-string">""</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twosComplement_re</span><span class="hljs-params">(numb)</span>:</span><br>    <span class="hljs-keyword">if</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"0"</span>:<br>        print(int(numb, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">elif</span> numb[<span class="hljs-number">0</span>] == <span class="hljs-string">"1"</span>:<br>        numd = <span class="hljs-number">256</span>  - int(str(numb), <span class="hljs-number">2</span>)<br>        print(<span class="hljs-string">"-"</span> , numd, sep=<span class="hljs-string">""</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">excessEightbits_re</span><span class="hljs-params">(numb)</span>:</span><br>    numd = int(str(numb), <span class="hljs-number">2</span>)<br>    print(numd - <span class="hljs-number">128</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    choice1 = input(<span class="hljs-string">"Enter(d = D to B; b = B to D):"</span>)<br>    choice2 = input(<span class="hljs-string">"Enter(s = Signed Magnitude; 1 = 1s Complement; 2 = 2sComplement; e = excess):"</span>)<br>    <span class="hljs-keyword">if</span> choice1 == <span class="hljs-string">"d"</span>:<br>        <span class="hljs-keyword">if</span> choice2 == <span class="hljs-string">"s"</span>:<br>            signedMagnitude(input(<span class="hljs-string">"Enter(-127to127):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"1"</span>:<br>            onesComplement(input(<span class="hljs-string">"Enter(-127to127):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"2"</span>:<br>            twosComplement(input(<span class="hljs-string">"Enter(-127to128):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"e"</span>:<br>            excessEightbits(input(<span class="hljs-string">"Enter(-127to128):"</span>))<br>    <span class="hljs-keyword">elif</span> choice1 == <span class="hljs-string">"b"</span>:<br>        <span class="hljs-keyword">if</span> choice2 == <span class="hljs-string">"s"</span>:<br>            signedMagnitude_re(input(<span class="hljs-string">"Enter(8bit binary):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"1"</span>:<br>            onesComplement_re(input(<span class="hljs-string">"Enter(8_bit binary):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"2"</span>:<br>            twosComplement_re(input(<span class="hljs-string">"Enter(8bit binary):"</span>))<br>        <span class="hljs-keyword">elif</span> choice2 == <span class="hljs-string">"e"</span>:<br>            excessEightbits_re(input(<span class="hljs-string">"Enter(8_bit binary):"</span>))<br>main()<br><span class="hljs-comment">#Made by Mike_Zhang</span><br></code></pre></td></tr></table></figure><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>原码、反码、补码中可以深挖的东西还有好多，都十分有趣，之后会继续记录。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Data Representation</category>
      
      <category>Signed Binary Nnumber</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Data Representation</tag>
      
      <tag>Signed Binary Number</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象编程(OOP)的继承性(Inheritance)</title>
    <link href="/2020/09/13/Java-oop-inheritance/"/>
    <url>/2020/09/13/Java-oop-inheritance/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><p>（二次更新：2021-09-18）</p><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><hr><blockquote><h3 id="面向对象编程-OOP-简单介绍"><a href="#面向对象编程-OOP-简单介绍" class="headerlink" title="面向对象编程(OOP)简单介绍"></a>面向对象编程(OOP)简单介绍</h3><p><strong>面向对象编程(Object Oriented Programming, OOP)</strong> 是一种计算机编程架构(一种编程方法). 它的核心在于把需要处理的问题进行建模, 即把问题抽象为对象(object). 对象被分成两个部分, <strong>静态部分</strong>和<strong>动态部分</strong>. <strong>静态部分</strong>指的是对象的<strong>属性</strong>, 以人举例, 属性包括人的身高、体重、年龄等特性. <strong>动态部分</strong>指的是对象的<strong>行为或方法</strong>, 以人举例, 行为包括人的吃饭、睡觉、讲话等动作. 在某一方面具有相同特性的事物可以被归为同一类事物, 而 <strong>类(class)</strong> 就是这些同一类事物的统称, 比如说, 婴儿、青少年,、年轻人、老人等都属于人这一类, 鸡、鸭、猪等都是属于家禽这一类. 类是对某一类对象的抽象描述, 类封装了对象的属性和行为.<br>了解更多有关OOP的知识, 请参考百度百科—<a href="https://baike.baidu.com/item/面向对象程序设计/24792" target="_blank" rel="noopener">面向对象程序设计</a>.<br>面向对象编程(OOP)具有以下三个特点:<br><strong>封装性(Encapsulation)</strong><br><strong>继承性(Inheritance)</strong><br><strong>多态性(Polymorphism)</strong></p></blockquote><hr><h3 id="继承性-Inheritance"><a href="#继承性-Inheritance" class="headerlink" title="继承性(Inheritance)"></a>继承性(Inheritance)</h3><p>类的继承是OOP中非常重要的概念, 它的核心思想是扩展某一个父类, 得到一个子类. 子类继承类它的父类的属性和方法, 子类也可以有新的不同于父类的属性和方法, 也可以重写父类中的一些方法. 举例来说, 定义一个父类为<strong>三角形类</strong>, 而<strong>直角三角形类</strong>就是<strong>三角形类</strong>的子类, 子类拥有父类具有的属性和方法, <strong>直角三角形类</strong>也拥有其父类不具有的属性和方法, 比如说<strong>直角三角形类</strong>的<em>一个角为90度</em> 这一属性就是<strong>直角三角形类</strong>特有的属性，同样也可以重写父类具有的属性和方法。</p><blockquote><p><code>extends</code>是Java中用来表明继承关系的关键字</p></blockquote><p>以下为例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> </span>&#123; <span class="hljs-comment">// 三角形类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//父类构造方法</span><br>        System.out.println(<span class="hljs-string">"This is Triangle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123; <span class="hljs-comment">//父类有参构造方法</span><br>        System.out.println(<span class="hljs-string">"A angle of the Triangle is "</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> triangleAngleA, triangleAngleB, triangleAngleC;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAngle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Please set triangleAngleA, B and C"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTriangleAngle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//成员方法</span><br>        System.out.println(<span class="hljs-string">"triangleAngleA + triangleAngleB + triangleAngleC = 180"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123; <span class="hljs-comment">//定义直角三角形子类继承三角形父类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RightTriangle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//子类构造方法</span><br>        System.out.println(<span class="hljs-string">"This is Right Triangle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RightTriangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        <span class="hljs-keyword">super</span>(i);<br>        System.out.println(<span class="hljs-string">"A angle of the Right Triangle is "</span> + i);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightAngle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//在子类中添加新的成员方法</span><br>        System.out.println(<span class="hljs-string">"triangleAngleC is 90"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTriangleAngle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//重写父类中的成员方法</span><br>        System.out.println(<span class="hljs-string">"triangleAngleC = 90, and "</span>);<br>        <span class="hljs-keyword">super</span>.getTriangleAngle(); <span class="hljs-comment">//调用父类方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsoscelesRightTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RightTriangle</span></span>&#123; <span class="hljs-comment">//定义等腰直角三角形子类继承直角三角形父类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IsoscelesRightTriangle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//子类构造方法</span><br>        System.out.println(<span class="hljs-string">"This is Isosceles Right Triangle"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IsoscelesRightTriangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        <span class="hljs-keyword">super</span>(i);<br>        System.out.println(<span class="hljs-string">"A angle of the Isosceles Right Triangle is "</span> + i);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIsoscelesRightAngle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//在子类中添加新的成员方法</span><br>        System.out.println(<span class="hljs-string">"triangleAngleA and B are 45, triangleAngleC is 90"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTriangleAngle</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//重写父类中的成员方法</span><br>        System.out.println(<span class="hljs-string">"triangleAngleA &amp; B = 45, and "</span>);<br>        <span class="hljs-keyword">super</span>.getTriangleAngle(); <span class="hljs-comment">//调用父类方法</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        IsoscelesRightTriangle x = <span class="hljs-keyword">new</span> IsoscelesRightTriangle(); <span class="hljs-comment">// 创建一个等腰直角三角形类的方法</span><br>        x.setAngle(); <span class="hljs-comment">// 调用三角形类的方法</span><br>        x.setRightAngle(); <span class="hljs-comment">// 调用直角三角形类的方法</span><br>        x.setIsoscelesRightAngle(); <span class="hljs-comment">// 调用本类的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">This is Triangle<br>This is Right Triangle<br>This is Isosceles Right Triangle<br>Please set triangleAngleA, B and C <br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><hr><h3 id="1-被继承的成员"><a href="#1-被继承的成员" class="headerlink" title="1. 被继承的成员"></a>1. 被继承的成员</h3><p>当一子类继承父类后，父类的实例变量将成为子类的<strong>一部分</strong>，父类的<strong>属性和方法可以被继承到子类</strong>，但是<strong>构造方法</strong>、<strong>static initializer</strong>、<strong>instance initializer</strong>并不是实例变量，所以<strong>不可以被继承</strong>。<br>判断实例变量是否可以继承到子类中，需要根据子类对父类实例变量的<strong>可访问性（accessibility）</strong>。子类继承了父类的某一成员，说明子类是可以访问到这一成员的。</p><h3 id="2-重写方法"><a href="#2-重写方法" class="headerlink" title="2. 重写方法"></a>2. 重写方法</h3><p>子类只能重写能<strong>够从父类中继承的方法</strong>，否则，如<code>private</code>修饰的方法不能被重写。<br>重写的方法必须有<strong>相同的Signature (i.e. method name, method argument type list)</strong>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123; … &#125;<br>    … <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wizard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Hero</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123; … &#125; <span class="hljs-comment">// overriding, same signature, a new version of the method in superclass</span><br>    … <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Knight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Hero</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">float</span> x)</span></span>&#123; … &#125; <span class="hljs-comment">// overloading, different signature, redefined a new method </span><br>    … <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-权限修饰符"><a href="#3-权限修饰符" class="headerlink" title="3. 权限修饰符"></a>3. 权限修饰符</h3><p>   一般来说，为了保护继承性，成员属性修饰为<code>private</code>，成员方法修饰为<code>public</code>。尽管<code>protected</code>修饰的属性和方法可以在继承类间访问，但是最好还是让成员属性被<code>private</code>修饰。<br>   子类在重写父类中的方法时, 权限的修改范围只能从小到大, protected修饰的方法只能重写成public, 而不能重写成private；</p><h3 id="4-super关键字"><a href="#4-super关键字" class="headerlink" title="4. super关键字"></a>4. <code>super</code>关键字</h3><blockquote><p><code>super</code>关键字与<code>this</code>关键字的作用十分类似。</p></blockquote><p>注意到例子三个类中都有<code>getTriangleAngle()</code>方法，因为子类可以使用或者修改父类中的方法。但是不能直接使用<code>getTriangleAngle()</code>语句调用父类方法，这样会造成自我循环调用的错误。需要使用<code>super</code>关键字来引用到目前子类的父类，如<code>super.getTriangleAngle()</code>，意思为调用目前子类的父类的<code>getTriangleAngle()</code>方法。但是只能调用public和protected修饰的方法。</p><h3 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h3><p>在Java中<strong>构造方法不会被继承</strong>，构造方法分为<strong>无参构造方法</strong>和<strong>有参构造方法</strong>。</p><h4 id="5-1-无参构造方法"><a href="#5-1-无参构造方法" class="headerlink" title="5.1 无参构造方法"></a>5.1 无参构造方法</h4><p>当子类创建对象时，会先调用其父类的无参构造方法。<strong>而父亲必须包含一个无参构造方法，否则子类无法隐形调用其父类的无参构造方法</strong>。</p><blockquote><p>例子中，<code>mian()</code>中创建了<code>IsoscelesRightTriangle</code>类的<code>x</code>对象，它会调用其父类<code>RightTriangle</code>的构造方法，而在<code>RightTriangle</code>被调用时，需要先调用其父类<code>Triangle</code>的构造方法，<strong>一层层向上</strong>。<br>因此最先完成调用的是最大的父类<code>Triangle</code>的构造方法，因此先输出<code>This is Triangle</code>，再完成调用子类<code>RightTriangle</code>的构造方法，输出<code>This is Right Triangle</code>，最后完成调用子类<code>IsoscelesRightTriangle</code>的构造方法，输出<code>This is Isosceles Right Triangle</code>，<strong>一层层向下</strong>。</p></blockquote><p>因此，运行后输出为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">This is Triangle <span class="hljs-comment">// 调用Triangle类的无参构造方法</span><br>This is Right Triangle <span class="hljs-comment">// 调用RightTriangle类的无参构造方法</span><br>This is Isosceles Right Triangle <span class="hljs-comment">// 调用IsoscelesRightTriangle类的无参构造方法</span><br>Please set triangleAngleA, B and C <br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br><strong>子类构造方法</strong>的<strong>第一句语句</strong>一直都是<strong>调用某一构造方法</strong>，可以是：</p><ol><li>对<strong>子类构造方法</strong>的<strong>显性重载</strong>，使用<code>this</code>关键字；</li><li>对其<strong>父类构造方法</strong>的<strong>显性调用</strong>，使用<code>super</code>关键字；</li><li><strong>隐性调用</strong>其<strong>父类的无参构造方法</strong>，当没有显性调用构造方法时，编译器会自动调用，使用<code>super</code>关键字，如：<blockquote><p>就算子类<code>IsoscelesRightTriangle</code>没有构造方法，Java编译器也会自动调用其父类的构造方法。</p></blockquote></li></ol><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;System.out.print(“<span class="hljs-number">1</span>”);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;System.out.print(“<span class="hljs-number">2</span>”);&#125; <br>&#125; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// NO super(); inserted by the compiler for an explicit constructor this(1); exists</span><br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// explicit constructor</span><br>        System.out.print(“<span class="hljs-number">3</span>”);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-keyword">float</span> x)</span></span>&#123; <br>        <span class="hljs-comment">// super(); // inserted by the compiler</span><br>        System.out.print(“<span class="hljs-number">4</span>”); <br>        &#125;<br>&#125; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">C</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// super(); // inserted by the compiler</span><br>        System.out.print(“<span class="hljs-number">5</span>”);<br>        &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>C cObj = new C();</code>的输出为<code>1435</code></p><hr><h4 id="5-2-有参构造方法"><a href="#5-2-有参构造方法" class="headerlink" title="5.2 有参构造方法"></a>5.2 有参构造方法</h4><p>父类无参构造方法能够被自动调用，但是调用父类有参构造方法需要在子类构造方法中用<code>super</code>关键字表明，若无，则不会调用。如下：</p><p>修改例子中的main()方法，其余不变，以测试有参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123; <span class="hljs-comment">// 主函数 main()</span><br>        IsoscelesRightTriangle x = <span class="hljs-keyword">new</span> IsoscelesRightTriangle(<span class="hljs-number">45</span>); <span class="hljs-comment">// 有参构造方法 </span><br>        x.setAngle(); <span class="hljs-comment">// 调用三角形类的方法</span><br>        x.setRightAngle(); <span class="hljs-comment">// 调用直角三角形类的方法</span><br>        x.setIsoscelesRightAngle(); <span class="hljs-comment">// 调用本类的方法</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">A angle of the Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用Triangle类的有参构造方法</span><br>A angle of the Right Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用RightTriangle类的有参构造方法</span><br>A angle of the Isosceles Right Triangle is <span class="hljs-number">45</span> <span class="hljs-comment">// 调用IsoscelesRightTriangle类的有参构造方法</span><br>Please set triangleAngleA, B and C<br>triangleAngleC is <span class="hljs-number">90</span><br>triangleAngleA and B are <span class="hljs-number">45</span>, triangleAngleC is <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br>在子类中，调用其父类构造方法的语句 <strong><em>必须是</em></strong> 此子类构造方法体中的 <strong><em>第一行被执行的语句</em></strong> ，否则会报错，例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IsoscelesRightTriangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123; <span class="hljs-comment">//子类有参构造方法</span><br>        System.out.println(<span class="hljs-string">"A angle of the Isosceles Right Triangle is "</span> + i);<br>        <span class="hljs-keyword">super</span>(i); <span class="hljs-comment">//没有写在构造方法的最前面</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>报错：</strong><br><code>Call to &#39;super()&#39; must be first statement in constructor body</code></p><h3 id="6-Object-类"><a href="#6-Object-类" class="headerlink" title="6. Object 类"></a>6. <code>Object</code> 类</h3><p>就算某一个类没有确切表明继承了父类，此类也已经自动的继承了<code>java.lang.Object</code>类，此为Java中的统一父类(Universal Superclass)。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>B. Eckel, <em>Thinking in java</em>. Upper Saddle River, N.Y. Prentice Hall, 2014.<br>M. Goodrich, R. Tamassia, and A. O’reilly, <em>Data Structures and Algorithms in Java, 6th Edition</em>. John Wiley &amp; Sons, 2014.</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>Java中OOP相关的知识是十分重要的, 会继续更新.<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
      <category>继承性 Inheritance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</title>
    <link href="/2020/09/06/%E5%9B%A0%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E8%80%8C%E5%AF%BC%E8%87%B4hexo%E9%83%A8%E7%BD%B2%E6%97%B6Spawnfailed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2020/09/06/%E5%9B%A0%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E8%80%8C%E5%AF%BC%E8%87%B4hexo%E9%83%A8%E7%BD%B2%E6%97%B6Spawnfailed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/" target="_blank" rel="noopener">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/" target="_blank" rel="noopener">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/" target="_blank" rel="noopener">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>之前我发布了一篇<a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/" target="_blank" rel="noopener">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a>的文章,当时上传的文件体积不大,最大的也只有1.5MB.后来我尝试把时间更长, 体积更大的视频上传, 但是并没有成功, warning警告说“GitHub建议上传最大体积为50MB, 上限为100MB”, 很明显我上传的视频文件体积已经超过了100MB. 因此我删掉了那个大文件, 但是当我再次尝试部署时, 还是弹出来一样的warning, 报错文件的路径也和之前的一样, 可是我明明已经删除了那个文件, 后来经过不断的尝试以及在网上搜索, 我找到了一篇和我遇到问题类似的文章<a href="https://perry96.com/archives/882898e3.html" target="_blank" rel="noopener">Hexo部署报错Spawn failed及解决方案</a>, 此方法指出报错的根源是出现在.deploy_git文件夹里, 删除本地文件并不能删除.deploy_git文件夹里的文件, 解决方法就是让本地仓库文件恢复到没有出现问题前的状态.<br>但这个并没有完全解决我的问题, 后来我不断尝试, 完善了<a href="https://perry96.com/archives/882898e3.html" target="_blank" rel="noopener">Hexo部署报错Spawn failed及解决方案</a>, 我的方法如下:<br><a id="more"></a></p><h2 id="1-获取GitHub最新仓库commitId"><a href="#1-获取GitHub最新仓库commitId" class="headerlink" title="1.获取GitHub最新仓库commitId"></a><strong>1.获取GitHub最新仓库commitId</strong></h2><p>获取GitHub最新仓库commitId, 此commitId就是你上一次部署成功的链接, 获取方法如下:</p><blockquote><p>1.点击更新时间:<br><img src="/2020/09/06/%E5%9B%A0%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E8%80%8C%E5%AF%BC%E8%87%B4hexo%E9%83%A8%E7%BD%B2%E6%97%B6Spawnfailed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.jpg" srcset="/img/loading.gif" lazyload alt><br>2.找到commitId并复制:<br><img src="/2020/09/06/%E5%9B%A0%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E8%80%8C%E5%AF%BC%E8%87%B4hexo%E9%83%A8%E7%BD%B2%E6%97%B6Spawnfailed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/3.jpg" srcset="/img/loading.gif" lazyload alt></p></blockquote><h2 id="2-恢复仓库文件"><a href="#2-恢复仓库文件" class="headerlink" title="2.恢复仓库文件"></a><strong>2.恢复仓库文件</strong></h2><h5 id="打开终端-并到GitHub本地仓库目录下"><a href="#打开终端-并到GitHub本地仓库目录下" class="headerlink" title="打开终端, 并到GitHub本地仓库目录下"></a>打开终端, 并到GitHub本地仓库目录下</h5><p>根据文章<a href="https://perry96.com/archives/882898e3.html" target="_blank" rel="noopener">Hexo部署报错Spawn failed及解决方案</a>, 本地仓库应该为.deploy_git文件夹, 但是我并没有找到此文件夹, 我尝试了好多次都没有打开这个路径.<br>后来我干脆直接用命令语句打开:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure><br>万万没想到, 没有报错, 就说明打开了本地仓库文件夹.deploy_git.</p><h5 id="接下来输入命令"><a href="#接下来输入命令" class="headerlink" title="接下来输入命令"></a>接下来输入命令</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard  commitId</span><br></code></pre></td></tr></table></figure><p>commitId即为刚刚从GitHub仓库复制的commitId, 即如下:<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">git</span></span> reset --hard  c7e7...ed<br></code></pre></td></tr></table></figure><br>(此处仅举例, commitId需填写完整)</p><h5 id="最后进行Hexo操作"><a href="#最后进行Hexo操作" class="headerlink" title="最后进行Hexo操作"></a>最后进行Hexo操作</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>最后你会发现网站恢复到上一次成功部署后的样子了, 下一次部署的时候就不会报错了.</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a><strong>3.注意事项</strong></h2><p><strong>1.上传到GitHub的单个文件大小不要超过50MB;</strong><br><strong>2.部署Hexo是把.deploy_git文件push到GitHub上的, 在mac上可能.deploy_git文件夹被隐藏, 直接通过命令语句打开即可.</strong><br>希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br><a href="https://perry96.com/archives/882898e3.html" target="_blank" rel="noopener">Hexo部署报错Spawn failed及解决方案</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>部署</category>
      
      <category>报错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>spawn_failed报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一年》</title>
    <link href="/2020/08/31/one-year/"/>
    <url>/2020/08/31/one-year/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><div style="position:relative; padding-bottom:75%; width:100%; height:0">    <iframe src="//player.bilibili.com/player.html?aid=711986414&bvid=BV1SD4y1d7Kf&cid=230909797&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h2 id="一年前刚来-现在依然在"><a href="#一年前刚来-现在依然在" class="headerlink" title="一年前刚来 现在依然在"></a>一年前刚来 现在依然在</h2><a id="more"></a><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>一年</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hexo中用Markdown添加网络或本地视频以及GIF动图</title>
    <link href="/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/"/>
    <url>/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>相关文章:<br><a href="http://ultrafish.cn/2020/08/23/在Hexo中用Markdown添加网络或本地视频以及GIF动图/" target="_blank" rel="noopener">在Hexo中用Markdown添加网络或本地视频以及GIF动图</a><br><a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/" target="_blank" rel="noopener">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a><br><a href="http://ultrafish.cn/2021/04/25/post-video-with-oss/" target="_blank" rel="noopener">在Hexo中用Markdown通过阿里云OSS添加视频文件</a></p></blockquote><hr><p>最近更新维护了一下blog，之前的视频是通过链接过来的，现在可以添加本地的视频，还可以添加本地的GIF动图，具体效果可以看一下我的<a href="http://ultrafish.cn/2020/07/29/hello-ultrafisher/" target="_blank" rel="noopener">第一篇文章 “Hello UltraFisher”</a>。这个blog的文章都是用标记语言Markdown写的，那接下来说说如何在Hexo中用Markdown添加网络或本地视频以及GIF动图</p><p><strong><em>注意 : 上传的单个文件大小不要超过50MB, 具体问题以及解决方法已经更新 : <a href="http://ultrafish.cn/2020/09/06/因上传过大文件而导致hexo部署时Spawnfailed报错的解决方法以及注意事项/" target="_blank" rel="noopener">因上传过大文件而导致hexo部署时Spawn failed报错的解决方法以及注意事项</a></em></strong></p><h2 id="1-用Markdown添加网络视频"><a href="#1-用Markdown添加网络视频" class="headerlink" title="1.用Markdown添加网络视频"></a><strong>1.用Markdown添加网络视频</strong></h2><p>目前可以在Markdown里链接的视频平台并不多，有b站和优酷，接下来我就用b站举例。<br><a id="more"></a></p><h4 id="第一步：获取视频链接"><a href="#第一步：获取视频链接" class="headerlink" title="第一步：获取视频链接"></a>第一步：获取视频链接</h4><p>找到你想添加的视频，点击分享按钮，复制嵌入代码。<br><img src="/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/1.jpg" srcset="/img/loading.gif" lazyload alt><br><em>图源：bilibili</em></p><h4 id="第二步：在-md文件中添加代码"><a href="#第二步：在-md文件中添加代码" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> </span></span><br><span class="xml">src="//player.bilibili.com/player.html?aid=201033992&amp;bvid=BV1dz411i75o&amp;cid=203132924&amp;page=1" scrolling="no" border="0" </span><br><span class="xml">frameborder="no" framespacing="0" allowfullscreen="true"&gt;</span> <span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>注意其中第二行开始的以下代码是你之前从b站复制的嵌入代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//player.bilibili.com/player.html?aid=201033992&amp;bvid=BV1dz411i75o&amp;cid=203132924&amp;page=1"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">"true"</span>&gt;</span></span> <span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><h4 id="第三步：Hexo操作"><a href="#第三步：Hexo操作" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>部署之后就可以看到b站链接过来的视频了，<strong>但是请注意，我链接的是我个人b站的视频，在链接他人视频之前请先询问视频作者是否可以转载。</strong><br>这样链接是挺方便，但是视频内容十分有限制，只能添加在网络上的视频，那接下来就看看如何添加本地的视频。</p><hr><h2 id="2-用Markdown添加本地视频"><a href="#2-用Markdown添加本地视频" class="headerlink" title="2.用Markdown添加本地视频"></a><strong>2.用Markdown添加本地视频</strong></h2><h4 id="第一步：放置本地视频"><a href="#第一步：放置本地视频" class="headerlink" title="第一步：放置本地视频"></a>第一步：放置本地视频</h4><p>先在于.md同目录下创建一个文件夹用于放置添加的视频文件：<br>（文件名建议和Markdown文件名一致，这样比较规范）<br><img src="/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/2.jpg" srcset="/img/loading.gif" lazyload alt><br>接下来把需要添加的视频放入此文件夹。</p><h4 id="第二步：在-md文件中添加代码-1"><a href="#第二步：在-md文件中添加代码-1" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/2020/07/29/hello-ultrafisher/logo.mp4"</span> <span class="hljs-attr">position</span>= <span class="hljs-string">"absolute"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100%"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100%"</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>视频地址为 /2020/07/29/hello-ultrafisher/logo.mp4<br>其中：<br>/2020/07/29/为文章的地址名（根据日期命名）<br>hello-ultrafisher为放置视频的文件夹名<br>logo.mp4为视频文件名</p><p><strong>如何准确获取本地视频地址名：</strong><br>我的blog是部署在GitHub上的，在部署时，本地视频会被上传到GitHub，其实blog的所以文件都在GitHub上，那我们只需要在GitHub中就可以找到准确的地址名。<br>在把视频放入之前创建的文件夹后，先进行一遍Hexo操作：<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><br>之后在你GitHub库中找到你的视频文件：<br><img src="/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/3.jpg" srcset="/img/loading.gif" lazyload alt><br><em>图源：GitHub</em></p><h4 id="第三步：Hexo操作-1"><a href="#第三步：Hexo操作-1" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>这样视频添加就完成了。<br>看一下效果：</p><p><video src="/2020/07/29/hello-ultrafisher/logo.mp4" position="absolute" width="100%" height="100%" controls="controls"></video><br>接下来介绍如何添加GIF动图。相比于视频，GIF动图能够自己循环播放，比较适合播一些小动画。</p><hr><h2 id="3-用Markdown添加本地GIF动图"><a href="#3-用Markdown添加本地GIF动图" class="headerlink" title="3.用Markdown添加本地GIF动图"></a><strong>3.用Markdown添加本地GIF动图</strong></h2><h4 id="第一步：放置本地GIF动图"><a href="#第一步：放置本地GIF动图" class="headerlink" title="第一步：放置本地GIF动图"></a>第一步：放置本地GIF动图</h4><p>放置方法和放置本地视频相同，也是放置于与.md同目录的文件夹中，这里不多描述。</p><p><strong>如何把视频转换成GIF动图：</strong><br>最直接的方法就是在网上搜索在线的视频转GIF工具。<br>或者用一些软件来转换，这里推荐一个Mac上的转换软件Gifski：<br><img src="/2020/08/23/%E5%9C%A8Hexo%E4%B8%AD%E7%94%A8Markdown%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%88%96%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8AGIF%E5%8A%A8%E5%9B%BE/4.jpg" srcset="/img/loading.gif" lazyload alt><br><strong>如何裁剪GIF动图：</strong><br>分享一个网上的在线裁剪工具：<br><a href="https://www.iloveimg.com/zh-cn/crop-image/crop-gif" target="_blank" rel="noopener">iLoveIMG</a></p><h4 id="第二步：在-md文件中添加代码-2"><a href="#第二步：在-md文件中添加代码-2" class="headerlink" title="第二步：在.md文件中添加代码"></a>第二步：在.md文件中添加代码</h4><p>打开文章的Markdown文件，如“hello-ultrafisher.md”<br>把以下代码添加在你想放入视频的位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"hello-ultrafisher/logo3.gif"</span> <span class="hljs-attr">width</span> = <span class="hljs-string">""</span> <span class="hljs-attr">height</span> = <span class="hljs-string">""</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>GIF地址为 hello-ultrafisher/logo3.gif<br>其中：<br>hello-ultrafisher为放置GIF的文件夹名<br>logo3.gif为GIF文件名</p><p>width = “” height = “”：表示自动填充大小<br>也可以自己填写长度或者百分比来改变GIF的大小<br>前后的”center”表示居中，也可以改成”left”靠左或者”right”靠右。</p><h4 id="第三步：Hexo操作-2"><a href="#第三步：Hexo操作-2" class="headerlink" title="第三步：Hexo操作"></a>第三步：Hexo操作</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>这样GIF动图就添加完成了，可以在文章末尾看到效果。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>网上说的比较多的是如何从网上链接视频，我不断尝试摸索添加本地视频的方法。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>byte数据类型在显式类型转换时超出其取值范围的转换过程</title>
    <link href="/2020/08/15/Java-data-type-conversion/"/>
    <url>/2020/08/15/Java-data-type-conversion/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2021/09/02/Java-learning-1/" target="_blank" rel="noopener">Java基础学习1—声明和初始化与修饰符</a><br><a href="https://ultrafish.cn/2021/09/17/Java-learning-2/" target="_blank" rel="noopener">Java基础学习2—表达式、控制流与I/O</a><br><a href="https://ultrafish.cn/2021/10/08/Java-learning-3/" target="_blank" rel="noopener">基础Java异常处理 Basic Exception handling in Java</a><br><a href="https://ultrafish.cn/2020/08/15/Java-data-type-conversion/" target="_blank" rel="noopener">Java中byte数据类型在显式类型转换时超出其取值范围的转换过程</a><br><a href="https://ultrafish.cn/2021/03/07/Java-oop-encapsulation/" target="_blank" rel="noopener">Java面向对象编程(OOP)的封装性(Encapsulation)</a><br><a href="https://ultrafish.cn/2020/09/13/Java-oop-inheritance/" target="_blank" rel="noopener">Java面向对象编程(OOP)的继承性(Inheritance)</a><br><a href="https://ultrafish.cn/2021/10/02/Java-oop-polymorphism/" target="_blank" rel="noopener">Java面向对象编程(OOP)的多态性(Polymorphism)</a><br><a href="https://ultrafish.cn/2021/10/05/Java-oop-interface/" target="_blank" rel="noopener">Java面向对象编程之接口 Java OOP Interface</a></p></blockquote><h4 id="byte数据类型简介"><a href="#byte数据类型简介" class="headerlink" title="byte数据类型简介"></a>byte数据类型简介</h4><p>byte是四个整数类型（byte、short、int、long）中取值范围最小的整型数据类型，具体如下：<br><a id="more"></a></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型名称</th><th style="text-align:center">内存大小</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">8b(1B)</td><td style="text-align:center">-128~127(2^8)</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">16b(2B)</td><td style="text-align:center">-32768~32767(2^16)</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">32b(4B)</td><td style="text-align:center">-2147483648~2147482647(2^32)</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">64b(8B)</td><td style="text-align:center">-9223372036854775808~9223372036854775807(2^64)</td></tr></tbody></table></div><hr><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>数据类型转换分为<strong>隐式转换</strong>和<strong>显式转换（也称强制类型转换）</strong></p><p><strong>隐式转换</strong>指的是低精度数据类型向高精度数据类型转换，数据不会溢出，并且一定成功，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Frist</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>; <span class="hljs-comment">//初始int变量a，初值为100</span><br><span class="hljs-keyword">float</span> b = a; <span class="hljs-comment">//a赋值给float型变量b</span><br>System.out.println(b); <span class="hljs-comment">//输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">100.0</span><br></code></pre></td></tr></table></figure></p><p><strong>显式转换（也称强制类型转换)</strong> 指的是高精度数据类型转换向低精度数据类型，转换时可能会造成数据精度损失，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Frist</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a = (<span class="hljs-keyword">int</span>)<span class="hljs-number">100.99</span>; <span class="hljs-comment">//从浮点型到整型</span><br><span class="hljs-keyword">short</span> b = (<span class="hljs-keyword">short</span>)<span class="hljs-number">12.3f</span>; <span class="hljs-comment">//从浮点型到整型</span><br>System.out.println(a); <span class="hljs-comment">//输出</span><br>System.out.println(b); <span class="hljs-comment">//输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">100</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure></p><hr><h4 id="byte类型显式转换时超出其取值范围"><a href="#byte类型显式转换时超出其取值范围" class="headerlink" title="byte类型显式转换时超出其取值范围"></a>byte类型显式转换时超出其取值范围</h4><p>若我们运行以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Frist</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">byte</span> a = (<span class="hljs-keyword">byte</span>)<span class="hljs-number">129</span>;<br>System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">127</span><br></code></pre></td></tr></table></figure><br>因为byte数据类型的取值范围是-128～127，以上例子中被转换的数值为129，已经超出了byte数据类型的取值范围，所以不能正常显示为129，而现实了看似奇怪的-127.<br>其实，-127并不是凭空出现的，而是因为byte数据类型对于超出其取值范围的强制类型转换有特殊的处理过程。</p><p>步骤为：</p><blockquote><p><strong>1.保留被转换数值补码的低字节部分；</strong><br><strong>2.将保留下来的部分转换成原码。</strong></p></blockquote><p>（这里不会对原码，反码，补码等概念进行讲解，若不了解的，请自行搜索）</p><p>接下来以129为例：</p><blockquote><p><strong>第一步 保留被转换数值补码的低字节部分</strong><br>129的原码为 <strong>0…0 1000 0001(原)</strong><br>保留其低字节部分后为：<br><strong>1000 0001(原)</strong></p><p><strong>第二步 将保留下来的部分转换成原码</strong><br>因为程序是以补码处理数值的，所以上一步中的<strong>1000 0001(原)</strong>将会被看成补码<strong>1000 0001(补)</strong><br>接下来将补码还原成原码：<br><strong>1000 0001(补)</strong> &gt;&gt;&gt; <strong>1000 0000(反)</strong> &gt;&gt;&gt; <strong>1111 1111(原)</strong><br><strong>1111 1111(原)</strong> 即为-127（<strong>1111 1111(原)</strong> 的最高位是符号位，1表示负数，余下的 <strong>111 1111</strong> 即为十进制的127，所以<strong>1111 1111(原)</strong> 为-127）</p></blockquote><p>所以以上步骤解释了byte a = (byte)129;的输出结果为-127。</p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>在研究过程中发现，其实原码、反码、补码中可以深挖的东西还有好多，都十分有趣，之后也会记录。<br>最后，希望大家一起交流，分享，指出问题，谢谢！</p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>数据类型</category>
      
      <category>数据类型转换</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python对约瑟夫问题(Josephus Problem)的高效解决方法</title>
    <link href="/2020/08/05/josephus-problem/"/>
    <url>/2020/08/05/josephus-problem/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><blockquote><p>所有文章:<br><a href="https://ultrafish.cn/2020/08/05/josephus-problem/" target="_blank" rel="noopener">约瑟夫问题的高效解决方法 Josephus Problem with Python</a><br><a href="https://ultrafish.cn/plus/files/josephus_problem.html" target="_blank" rel="noopener">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a><br><a href="https://ultrafish.cn/2021/11/04/domino-matching/" target="_blank" rel="noopener">多米诺配对问题 Domino Matching with Python</a></p></blockquote><hr><h2 id="1-约瑟夫问题引入"><a href="#1-约瑟夫问题引入" class="headerlink" title="1.约瑟夫问题引入"></a><strong>1.约瑟夫问题引入</strong></h2><h4 id="约瑟夫问题由来"><a href="#约瑟夫问题由来" class="headerlink" title="约瑟夫问题由来"></a>约瑟夫问题由来</h4><p>先看一下<a href="https://baike.baidu.com/item/约瑟夫问题" target="_blank" rel="noopener">百度百科</a>对约瑟夫问题的介绍：</p><blockquote><p>据说著名犹太历史学家Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是，给定了和，一开始要站在什么地方才能避免被处决？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。(来自百度百科-约瑟夫问题)</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h4 id="实际问题案例"><a href="#实际问题案例" class="headerlink" title="实际问题案例"></a>实际问题案例</h4><p>以下问题来自我的一个作业，经过改编：<br>There are n people sitting around a circle, and all are numbered from 1 to n. Starting from the first person, they count from 1 to m and the one who counts m will be eliminated. The process will be started again from the next person until all people are eliminated. Your task now is to write a program to derive the order of the elimination for given n and m. That is, your program should ask the user to input integers n and m, and then print the sequence of elimination on screen.</p></blockquote><p>翻译如下：</p><blockquote><p>一圈有n个人坐着，所有人从1到n编号，从第一个人开始，他们从1数到m，数到m的人将被淘汰。这个过程将从下一个人重新开始，直到所有人都被淘汰。现在的任务是编写一个程序，根据给定的n和m来推导淘汰的顺序。也就是说，程序应该要求用户输入整数n和m，然后在屏幕上输出淘汰的顺序。 </p></blockquote><p>举例：<br>总人数n=5，数到m=2</p><blockquote><p>第一轮：(从1开始数)<br>1 <del>2</del> 3 <del>4</del> 5 （淘汰：2, 4）<br>第二轮:（上次淘汰为4号，则从5号开始数，5号数完回到1号）<br><del>1</del> 3 <del>5</del> （淘汰：2, 4, 1, 5）<br>第三轮：<br><del>3</del> （淘汰：2, 4, 1, 5, 3）<br>结束</p></blockquote><p>所以，最后淘汰顺序为2, 4, 1, 5, 3</p><p>现在需要用Python编写一个程序来解决这一个问题，但是在此之前，我们先来看一个在生活中类似的问题——星期计算问题。</p><h2 id="2-星期计算问题"><a href="#2-星期计算问题" class="headerlink" title="2.星期计算问题"></a><strong>2.星期计算问题</strong></h2><blockquote><p>假设今天是1号星期一，问：过n天后是星期几？</p></blockquote><div class="table-container"><table><thead><tr><th>日</th><th style="text-align:center">一</th><th style="text-align:right">二</th><th style="text-align:right">三</th><th style="text-align:right">四</th><th style="text-align:right">五</th><th style="text-align:right">六</th></tr></thead><tbody><tr><td>-</td><td style="text-align:center">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td></tr><tr><td>7</td><td style="text-align:center">8</td><td style="text-align:right">9</td><td style="text-align:right">10</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr><tr><td>14</td><td style="text-align:center">15</td><td style="text-align:right">16</td><td style="text-align:right">17</td><td style="text-align:right">18</td><td style="text-align:right">19</td><td style="text-align:right">20</td></tr><tr><td>21</td><td style="text-align:center">22</td><td style="text-align:right">23</td><td style="text-align:right">24</td><td style="text-align:right">25</td><td style="text-align:right">26</td><td style="text-align:right">27</td></tr><tr><td>28</td><td style="text-align:center">29</td><td style="text-align:right">30</td></tr></tbody></table></div><blockquote><p>举例：<br>过19天后，为20号，星期六<br>过8天后，为9号，星期二<br>过6天后，为7号，星期日</p></blockquote><p>以上例子根据日历来数是非常简单的，但是问10000天之后是星期几就没有这样简单了。<br>但是我们可以根据规律，以7天为一个周期，用数学方法来计算。把经过的日子除以7<strong>取余数</strong>就可以找到规律并计算出目标日期的星期。</p><blockquote><p>验证：<br>过19天后，为20号 &gt;&gt;&gt; (1+19)/7 = 2余6 &gt;&gt;&gt; 星期六<br>过8天后，为9号 &gt;&gt;&gt; (1+8)/7 = 1余2 &gt;&gt;&gt; 星期二</p><h2 id="过6天后，为7号-gt-gt-gt-1-6-7-1余0-gt-gt-gt-星期日-余0看作星期日"><a href="#过6天后，为7号-gt-gt-gt-1-6-7-1余0-gt-gt-gt-星期日-余0看作星期日" class="headerlink" title="过6天后，为7号 &gt;&gt;&gt; (1+6)/7 = 1余0 &gt;&gt;&gt; 星期日(余0看作星期日)"></a>过6天后，为7号 &gt;&gt;&gt; (1+6)/7 = 1余0 &gt;&gt;&gt; 星期日(余0看作星期日)</h2><p><strong>取余数(take the remainder)</strong>，在Python中的运算符是%(mod运算):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>+<span class="hljs-number">19</span>)%<span class="hljs-number">7</span><br>(<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)%<span class="hljs-number">7</span><br>(<span class="hljs-number">1</span>+<span class="hljs-number">6</span>)%<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><br>以下为Python实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">"今天是1号星期一"</span>)<br>weekstr = <span class="hljs-string">'日一二三四五六'</span><br>n = int(input(<span class="hljs-string">"输入经过的天数："</span>))<br>m = (<span class="hljs-number">1</span> + n) % <span class="hljs-number">7</span><br>week = weekstr[m]<br>print(<span class="hljs-string">"经过"</span>,n,<span class="hljs-string">"天后是星期"</span>,week,sep=<span class="hljs-string">''</span>)<br></code></pre></td></tr></table></figure><br>输出如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">今天是<span class="hljs-number">1</span>号星期一<br>输入经过的天数：<span class="hljs-number">19</span><br>经过<span class="hljs-number">19</span>天后是星期六<br></code></pre></td></tr></table></figure></p><h2 id="3-Python代码实现"><a href="#3-Python代码实现" class="headerlink" title="3.Python代码实现"></a><strong>3.Python代码实现</strong></h2><p>回到上面介绍的约瑟夫问题<br>一圈有n个人坐着，所有人从1到n编号，从第一个人开始，他们从1数到m，数到m的人将被淘汰。这个过程将从下一个人重新开始，直到所有人都被淘汰。现在的任务是编写一个程序，根据给定的n和m来推导淘汰的顺序。也就是说，程序应该要求用户输入整数n和m，然后在屏幕上输出淘汰的顺序。 </p></blockquote><p>和刚刚的星期计算问题十分的类似，都是一种周期性的问题，星期问题的周期是7，而约瑟夫问题的周期是一个变量m，也就是一圈人报的数字。这也不奇怪，因为在编程算法中，类似这样的问题又被成为<strong>约瑟夫环</strong></p><h4 id="类比星期问题"><a href="#类比星期问题" class="headerlink" title="类比星期问题"></a>类比星期问题</h4><p>还是用之前的星期列表，如果从1号开始从1报数，每次报到7的出列，那出列的就是和1号同一个星期（星期一）的日子，也就是8日，15日，22日，29日。</p><div class="table-container"><table><thead><tr><th>日</th><th style="text-align:center">一</th><th style="text-align:right">二</th><th style="text-align:right">三</th><th style="text-align:right">四</th><th style="text-align:right">五</th><th style="text-align:right">六</th></tr></thead><tbody><tr><td>-</td><td style="text-align:center">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td></tr><tr><td>7</td><td style="text-align:center">8</td><td style="text-align:right">9</td><td style="text-align:right">10</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr><tr><td>14</td><td style="text-align:center">15</td><td style="text-align:right">16</td><td style="text-align:right">17</td><td style="text-align:right">18</td><td style="text-align:right">19</td><td style="text-align:right">20</td></tr><tr><td>21</td><td style="text-align:center">22</td><td style="text-align:right">23</td><td style="text-align:right">24</td><td style="text-align:right">25</td><td style="text-align:right">26</td><td style="text-align:right">27</td></tr><tr><td>28</td><td style="text-align:center">29</td><td style="text-align:right">30</td></tr></tbody></table></div><hr><p>现在我们把约瑟夫环也类比成星期问题：<br>举例：总人数n=5，数到m=2</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1（开始）</td><td style="text-align:center"><strong><em>2</em></strong></td><td></td></tr><tr><td>3</td><td style="text-align:center"><strong><em>4</em></strong></td><td></td></tr><tr><td>5</td><td style="text-align:center">-</td><td></td></tr></tbody></table></div><p>从1号开始报数，每次报到2的出列，类比成星期问题，那就是只用两个星期（星期一和星期二），并且星期二的就是需要出列的日子，那就不难发现，在上面的表中，需要出列的就是<strong>2号</strong>和<strong>4号</strong>。</p><p>但是约瑟夫环有一点和星期问题不同，那就是约瑟夫环需要把所有一圈的人（日子）全部淘汰才能结束，那我们就可以把还没有被淘汰的人（日子）顺次接到第一轮的后面，如下：</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center"><em><del>2</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>4</del></em></td><td></td></tr><tr><td>5（开始）</td><td style="text-align:center"><strong>1</strong></td><td></td></tr><tr><td><strong>3</strong></td><td style="text-align:center"><strong>5</strong></td><td></td></tr></tbody></table></div><p>继续报数，这一次从上一次被淘汰（4号）的下一个开始报数（5号），那这一次需要出列的是星期二的<strong>1号</strong>和<strong>5号</strong><br>继续把还没有出列的（3号）接到上一轮的后面：</p><div class="table-container"><table><thead><tr><th>一</th><th style="text-align:center">二</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center"><em><del>2</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>4</del></em></td><td></td></tr><tr><td>5</td><td style="text-align:center"><em><del>1</del></em></td><td></td></tr><tr><td>3</td><td style="text-align:center"><em><del>5</del></em></td><td></td></tr><tr><td><strong>3</strong></td><td style="text-align:center"></td><td></td></tr></tbody></table></div><p>最后只剩下<strong>3号</strong>，那就自然变成最后一个出列的<br>综上：淘汰（出列）的顺序就是2号，4号，1号，5号，3号，和我们在开头例子中得出的结果是一样的。</p><p>小结：类比成星期问题，约瑟夫环每次需要淘汰的人位置都可以通过<strong>取余数</strong>的方式确定下来，还需要把未淘汰的人顺次接到上一轮的后面。因此，我们只需先确定每次需要淘汰的位置，然后通过遍历这一圈人，当遍历到的位置和需要淘汰的位置相同时，就把此位置的人移除，并把移除的后一个人作为下一次遍历的起点，不断循环，直到全部的人都被淘汰。</p><p>为了实现以上的想法，我们就需要用到Python中的<strong>队列queue</strong>来当作载体，因为队列的FIFO（即First in First Out,先进先出）的特性能保持这一圈人的顺序不发生变化。</p><h4 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h4><p>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Josephus_Problem_with_Python" target="_blank" rel="noopener">https://github.com/zhangwengyu999/Josephus_Problem_with_Python</a></p><p>也欢迎到我的开发性页面使用<a href="https://ultrafish.cn/plus/files/josephus_problem.html" target="_blank" rel="noopener">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue <span class="hljs-comment">#引入队列queue</span><br>n = int(input(<span class="hljs-string">"\n输入总人数n（n为正整数）:"</span>))<br>m = int(input(<span class="hljs-string">"输入每次报数 m（m为正整数） :"</span>))<br>position = <span class="hljs-number">1</span> <span class="hljs-comment">#需要被淘汰的位置，初始为1</span><br>nowposition = <span class="hljs-number">1</span> <span class="hljs-comment">#当前遍历的位置，初始为1</span><br>outqueue = Queue() <span class="hljs-comment">#储存输出的队列</span><br>nqueue = Queue() <span class="hljs-comment">#储存每一遍中还没有被淘汰的人</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>): <span class="hljs-comment">#新建一个从1到n的队列</span><br>    nqueue.put(i)<br><br><span class="hljs-keyword">while</span> nqueue.empty() <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>: <span class="hljs-comment">#循环直到列表为空</span><br>    <span class="hljs-comment">#&gt;&gt;&gt;第一步是确定下一次需要被淘汰的位置&lt;&lt;&lt;</span><br>    position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <span class="hljs-comment">#使用取余数%来确定下一次需要被淘汰的位置("-1" 和 "+1" 的作用会在后文解释)</span><br>    <span class="hljs-comment">#&gt;&gt;&gt;第二步就是把遍历到的人移到队列的末尾或者输出的队列中&lt;&lt;&lt;</span><br>    <span class="hljs-keyword">if</span> nowposition != position: <span class="hljs-comment">#当遍历到的人不是淘汰的目标时，就把他移到队列的末尾</span><br>        nqueue.put(nqueue.get())<br>        nowposition += <span class="hljs-number">1</span> <span class="hljs-comment">#遍历后一个人</span><br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment">#当遍历到的人是需要被淘汰的时，把他移动到输出的队列中</span><br>        outqueue.put(nqueue.get())<br>        nowposition = <span class="hljs-number">1</span> <span class="hljs-comment">#下一个人作为遍历的起点</span><br>print(<span class="hljs-string">"&gt;&gt;&gt;结果如下，总人数["</span>,n,<span class="hljs-string">"]人，每次报数["</span>,m,<span class="hljs-string">"]:"</span>,sep=<span class="hljs-string">""</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> outqueue.empty():<br>     print(outqueue.get(), end=<span class="hljs-string">' '</span>)<span class="hljs-comment">#输出队列</span><br></code></pre></td></tr></table></figure><p>解释以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><br>这句代码中的”-1” 和 “+1”是为了解决当<strong>报数m</strong>是<strong>剩下队列长度</strong>的倍数时所产生的bug</p><hr><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>接下来，我用一个例子验证以上代码和这个bug的解决方法</p><p>举例：n=5，m=2</p><p>第1次:</p><blockquote><p>1 2 3 4 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(1)</td><td style="text-align:left">2</td><td style="text-align:center">-</td></tr></tbody></table></div><p>第2次:</p><blockquote><p><del>2</del> 3 4 5 1</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(2)</td><td style="text-align:left">2</td><td style="text-align:center">2</td></tr></tbody></table></div><p>第3次:</p><blockquote><p>3 4 5 1</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2</td></tr></tbody></table></div><p>第4次:</p><blockquote><p><del>4</del> 5 1 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(4)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4</td></tr></tbody></table></div><p>第5次:</p><blockquote><p>5 1 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(5)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4</td></tr></tbody></table></div><p>第6次:</p><blockquote><p><del>1</del> 3 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(1)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1</td></tr></tbody></table></div><p>第7次:</p><blockquote><p>3 5</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1</td></tr></tbody></table></div><p>解释：此时m=2，剩下队列长度=2，<strong>报数m</strong>是<strong>剩下队列长度</strong>的倍数<br>若直接运行以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = m % nqueue.qsize()<br></code></pre></td></tr></table></figure><br>得到的position返回值是0，并不是正确的position=2，会出现bug<br>因此，加上”-1” 和 “+1”就能解决这个bug，变成以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>第8次:</p><blockquote><p><del>5</del> 3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(5)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5</td></tr></tbody></table></div><p>第9次:</p><blockquote><p>3</p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>1(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5</td></tr></tbody></table></div><p>第10次:</p><blockquote><p><del>3</del></p></blockquote><div class="table-container"><table><thead><tr><th>nowposition(人编号)</th><th style="text-align:left">position</th><th style="text-align:center">outqueue</th></tr></thead><tbody><tr><td>2(3)</td><td style="text-align:left">2</td><td style="text-align:center">2, 4, 1, 5, 3</td></tr></tbody></table></div><p>nqueue队列变空，循环结束，输出outqueue：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><br>和开头举的例子结果相同。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a><strong>4.总结</strong></h2><p>去掉注释后的代码其实没有多少行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue <br>n = int(input(<span class="hljs-string">"\n输入总人数n（n为正整数）:"</span>))<br>m = int(input(<span class="hljs-string">"输入每次报数 m（m为正整数） :"</span>))<br>position = <span class="hljs-number">1</span> <br>nowposition = <span class="hljs-number">1</span> <br>outqueue = Queue() <br>nqueue = Queue() <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>): <br>    nqueue.put(i)<br><span class="hljs-keyword">while</span> nqueue.empty() <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>: <br>    position = (m - <span class="hljs-number">1</span>) % nqueue.qsize() + <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">if</span> nowposition != position:<br>        nqueue.put(nqueue.get())<br>        nowposition += <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">else</span>: <br>        outqueue.put(nqueue.get())<br>        nowposition = <span class="hljs-number">1</span> <br>print(<span class="hljs-string">"&gt;&gt;&gt;结果如下，总人数["</span>,n,<span class="hljs-string">"]人，每次报数["</span>,m,<span class="hljs-string">"]:"</span>,sep=<span class="hljs-string">""</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> outqueue.empty():<br>     print(outqueue.get(), end=<span class="hljs-string">' '</span>)<br></code></pre></td></tr></table></figure><br>代码下载链接：<br><a href="https://github.com/zhangwengyu999/Josephus_Problem_with_Python" target="_blank" rel="noopener">https://github.com/zhangwengyu999/Josephus_Problem_with_Python</a></p><p>也欢迎到我的开发性页面使用<a href="https://ultrafish.cn/plus/files/josephus_problem.html" target="_blank" rel="noopener">UltraFish Plus - 在线约瑟夫问题计算器 Online Josephus Problem Calculator</a></p><p>核心就是类比星期计算问题，采用取余数来获取下一次需要被淘汰的人的位置，当遍历到此位置时，就把他移除，并继续遍历。</p><p>网上有好多关于约瑟夫环的解决方法，可能我的方法并不是最简单的，最高效的，但也希望大家一起交流，分享，指出问题，谢谢！</p><hr><p>引用：<br>百度百科—约瑟夫问题 <a href="https://baike.baidu.com/item/约瑟夫问题" target="_blank" rel="noopener">https://baike.baidu.com/item/约瑟夫问题</a></p><hr><p><strong><em>原创文章，转载请标明出处</em></strong><br><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Josephus Problem</category>
      
      <category>约瑟夫环</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>约瑟夫环</tag>
      
      <tag>Josephus Problem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+yilia主题中用本地图片设置背景</title>
    <link href="/2020/07/30/hexo+yilia%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF/"/>
    <url>/2020/07/30/hexo+yilia%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><h2 id="1-准备一张背景图片"><a href="#1-准备一张背景图片" class="headerlink" title="1.准备一张背景图片"></a><strong>1.准备一张背景图片</strong></h2><p>准备一张背景图片，例如：bg.jpg。<br>把它放到themes/yilia/source路径下<br><a id="more"></a></p><h2 id="2-修改maim-0cf68a-css文件"><a href="#2-修改maim-0cf68a-css文件" class="headerlink" title="2.修改maim.0cf68a.css文件"></a><strong>2.修改maim.0cf68a.css文件</strong></h2><p>打开themes/yilia/source/中的maim.0cf68a.css，找到以下代码*<br>（Windows用户按ctrl+F搜索，mac用户按command+F搜索）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#eaeaea</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure><h4 id="第一步：取消背景颜色"><a href="#第一步：取消背景颜色" class="headerlink" title="第一步：取消背景颜色"></a>第一步：取消背景颜色</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">background</span>:<span class="hljs-number">#eaeaea</span>;<br></code></pre></td></tr></table></figure><p>把以上代码改成：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">/*background:<span class="hljs-meta">#eaeaea;*/</span><br></code></pre></td></tr></table></figure><br>修改后为：</p><h2 id><a href="#" class="headerlink" title></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-comment">/*background:#eaeaea;*/</span><span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure></h2><h4 id="第二步：加入背景图片"><a href="#第二步：加入背景图片" class="headerlink" title="第二步：加入背景图片"></a>第二步：加入背景图片</h4><p>把以下代码加到position前面**<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">background</span>-<span class="hljs-built_in">image</span>:url(<span class="hljs-string">"bg.jpg"</span>);<br></code></pre></td></tr></table></figure><br>(bg.jpg是你放到themes/yilia/source路径下的图片)</p><p>修改后为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mid-col</span>&#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">"bg.jpg"</span>);<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<span class="hljs-comment">/*background:#eaeaea;*/</span><span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;<span class="hljs-attribute">width</span>:auto&#125;<br></code></pre></td></tr></table></figure></p><h2 id="3-Hexo操作"><a href="#3-Hexo操作" class="headerlink" title="3.Hexo操作"></a><strong>3.Hexo操作</strong></h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a><strong>4.注意</strong></h2><p>用此方法设置的背景图片是以平铺的效果展示在背景上<br>maim.0cf68a.css文件名称可能不同，找到maim.xxxx.css以.css后缀结尾的文件即可<br>我试过网上好多换背景的方法，但是我都没有成功，此方法是我不断尝试出来的，可能有点不足，会持续更新。</p><hr><p><strong><em>Made by Mike_Zhang</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>yilia</category>
      
      <category>背景图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>yilia</tag>
      
      <tag>背景</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章 “Hello UltraFisher”</title>
    <link href="/2020/07/29/hello-ultrafisher/"/>
    <url>/2020/07/29/hello-ultrafisher/</url>
    
    <content type="html"><![CDATA[<p><strong><em>Made by Mike_Zhang</em></strong></p><hr><h2 id="1-blog介绍"><a href="#1-blog介绍" class="headerlink" title="1.blog介绍"></a><strong>1.blog介绍</strong></h2><p>本blog由Mike_Zhang搭建，采用Hexo框架，现使用yilia主题，我会不断完善和维护此blog。本blog旨在分享我专业Computer Engineering有关学习经验和知识，亦会分享一点生活。欢迎大家在文章下面评论或者点击头像下方邮箱图标发送邮件联系我，希望和你一起进步，谢谢。</p><h2 id="2-起名活动"><a href="#2-起名活动" class="headerlink" title="2.起名活动"></a><strong>2.起名活动</strong></h2><p>本blog现英文名为UltraFisher，但是它还没有一个中文名字，欢迎大家在下面评论区留言，为UltraFisher取一个名字吧！</p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>分享一个视频</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=201033992&bvid=BV1dz411i75o&cid=203132924&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><em>*视频转自我的 b站: PhysicsPhysics</em></p><video id="video" controls preload="none" allowfullscreen="true" position="absolute" width="100%" poster="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/vlog_ending_hor_3.0.mp4?versionId=CAEQFxiBgICZgq.eyBciIGZjODlmNzAyZjQwZjQ5Mzc5ZjRlMjI1NDRhM2U1M2Rl">      <source id="mp4" src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/vlog_ending_hor_3.0.mp4?versionId=CAEQFxiBgICZgq.eyBciIGZjODlmNzAyZjQwZjQ5Mzc5ZjRlMjI1NDRhM2U1M2Rl" type="video/mp4">      </video><hr><p><strong><em>Made by Mike_Zhang 更多内容 敬请期待</em></strong></p><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/blog3/logo3.gif?versionId=CAEQGxiBgIDY95eb1xciIGY2MzBlMTcyY2NlNzQ0MjE5Y2MyZGM5MGE0NDQ3YzQ2" srcset="/img/loading.gif" lazyload width height><br><br></center><center><img src="https://ultrafish-blog.oss-cn-hangzhou.aliyuncs.com/reward.jpg?versionId=CAEQGxiBgIDPm9ir1xciIGJkMDY1ZGMwYmViOTQ4ZTA5NGQ0MDMyMDg1OWQ2ZTZi" srcset="/img/loading.gif" lazyload width="25%" height><br>    <div style="color:orange;     border-bottom: 15px solid rgba(0,0,0,0);    display: inline-block;    color: #999;    padding: 0px;">感谢你的支持</div></center>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>yilia</category>
      
      <category>第一篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>第一篇</tag>
      
      <tag>yilia</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
